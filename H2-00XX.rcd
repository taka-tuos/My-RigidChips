// [RCD] 
Val
{
	B(default=0, max=10000000000)
	B2(default=0, max=10000000000)
	BL(default=0, max=16777216)
	P(default=0, min=-10000000000, max=10000000000)
	S(default=180, min=-360, max=360)
}
Key
{
}
Body
{
	Core() {
		S:Frame(angle=90) {
			S:Frame(angle=-90, option=1) {
				N:Weight() {
					N:Frame() {
						N:Frame() {
							W:Frame(angle=10, option=1) {
								W:RudderF(angle=-S, option=1) {
									E:Wheel(angle=-100, power=P, brake=B, effect=5) { }
								}
							}
							E:Frame(angle=10, option=1) {
								E:RudderF(angle=-S, option=1) {
									W:Wheel(angle=-100, power=-P, brake=B, effect=5) { }
								}
							}
						}
					}
					S:Cowl(angle=-20) {
						S:Cowl(angle=-10) { }
						W:Cowl(angle=105, option=1, effect=#F0FB) {
							W:Cowl(angle=150, option=1, effect=#F0FB) {
								W:Cowl(angle=105) {
									S:Cowl(angle=-10) { }
								}
							}
						}
						E:Cowl(angle=105, option=1, effect=#F0FB) {
							E:Cowl(angle=150, option=1, effect=#F0FB) {
								E:Cowl(angle=105) {
									S:Cowl(angle=-10) { }
								}
							}
						}
					}
					E:Cowl(angle=105, option=1, effect=#F0FB) {
						E:Cowl(angle=150, option=1, effect=#F0FB) {
							E:Cowl(angle=105) {
								E:Cowl(angle=-90) {
									S:Cowl() {
										S:Cowl() { }
									}
								}
							}
						}
					}
					W:Cowl(angle=105, option=1, effect=#F0FB) {
						W:Cowl(angle=150, option=1, effect=#F0FB) {
							W:Cowl(angle=105) {
								W:Cowl(angle=-90) {
									S:Cowl() {
										S:Cowl() { }
									}
								}
							}
						}
					}
					E:Cowl(angle=-90) {
						S:Cowl() {
							S:Cowl(option=5) { }
						}
					}
					W:Cowl(angle=-90) {
						S:Cowl() {
							S:Cowl(option=5) { }
						}
					}
					E:Cowl() {
						E:Cowl(angle=110, option=1, effect=#F0FB) {
							E:Cowl(angle=140, option=1, effect=#F0FB) {
								E:Cowl(angle=110) {
									E:Cowl(angle=-90) {
										S:Cowl() {
											E:Cowl(angle=-90) {
												S:Cowl(option=5) {
													W:Cowl(angle=100, option=1, effect=#F0FB) {
														W:Cowl(angle=160, option=1, effect=#F0FB) {
															W:Cowl(angle=-80) {
																S:Cowl(angle=-150, color=BL, effect=#0FFB) {
																	W:Cowl() { }
																}
															}
														}
													}
												}
											}
										}
										N:Cowl(angle=-10) { }
										E:Cowl(angle=-20) {
											E:Cowl(angle=-70) {
												N:Cowl(angle=-40, option=0) {
													N:Cowl() {
														W:Cowl(angle=-75, option=4) { }
													}
													W:Cowl(angle=-75) { }
												}
												S:Cowl() {
													S:Cowl(angle=-50) {
														E:Cowl() { }
													}
												}
												E:Cowl() {
													S:Cowl() { }
													N:Cowl(angle=-40) {
														N:Cowl() { }
													}
												}
											}
											N:Cowl(angle=-30, option=4) { }
											S:Cowl() {
												S:Cowl(angle=-22, option=3) { }
											}
										}
									}
									N:Cowl() { }
									S:Cowl(option=5) { }
								}
							}
						}
					}
					W:Cowl() {
						W:Cowl(angle=110, option=1, effect=#F0FB) {
							W:Cowl(angle=140, option=1, effect=#F0FB) {
								W:Cowl(angle=110) {
									W:Cowl(angle=-90) {
										N:Cowl(angle=-10) { }
										S:Cowl() {
											W:Cowl(angle=-90) {
												S:Cowl(option=5) {
													E:Cowl(angle=100, option=1, effect=#F0FB) {
														E:Cowl(angle=160, option=1, effect=#F0FB) {
															E:Cowl(angle=-80) {
																S:Cowl(angle=-150, color=BL, effect=#0FFB) {
																	E:Cowl() { }
																}
															}
														}
													}
												}
											}
										}
										W:Cowl(angle=-20) {
											W:Cowl(angle=-70) {
												N:Cowl(angle=-40, option=0) {
													N:Cowl() {
														E:Cowl(angle=-75, option=3) { }
													}
													E:Cowl(angle=-75) { }
												}
												S:Cowl() {
													S:Cowl(angle=-50) {
														W:Cowl() { }
													}
												}
												W:Cowl() {
													S:Cowl() { }
													N:Cowl(angle=-40) {
														N:Cowl() { }
													}
												}
											}
											N:Cowl(angle=-30, option=3) { }
											S:Cowl() {
												S:Cowl(angle=-22, option=4) { }
											}
										}
									}
									N:Cowl() { }
									S:Cowl(option=5) { }
								}
							}
						}
					}
					N:Cowl() {
						N:Cowl() {
							N:Cowl(angle=-70) {
								E:Cowl() {
									E:Cowl(angle=110, option=1, effect=#F0FB) {
										E:Cowl(angle=140, option=1, effect=#F0FB) {
											E:Cowl(angle=110) {
												N:Cowl(angle=-100) {
													W:Cowl() { }
													N:Cowl(angle=-10) {
														E:Cowl(angle=-90, option=4) { }
													}
												}
											}
										}
									}
									E:Cowl(angle=-95, option=3) { }
								}
								W:Cowl() {
									W:Cowl(angle=110, option=1, effect=#F0FB) {
										W:Cowl(angle=140, option=1, effect=#F0FB) {
											W:Cowl(angle=110) {
												N:Cowl(angle=-100) {
													E:Cowl() { }
													N:Cowl(angle=-10) {
														W:Cowl(angle=-90, option=3) { }
													}
												}
											}
										}
									}
									W:Cowl(angle=-95, option=4) { }
								}
								N:Cowl(angle=-100) {
									E:Cowl() {
										E:Cowl(angle=-95, option=4) { }
									}
									W:Cowl() {
										W:Cowl(angle=-95, option=3) { }
									}
									N:Cowl(angle=-10) {
										E:Cowl() {
											E:Cowl(angle=-95) { }
										}
										W:Cowl() {
											W:Cowl(angle=-95) { }
										}
									}
								}
							}
						}
					}
					W:Chip(angle=-90) {
						S:Chip() { }
					}
					E:Chip(angle=-90) {
						S:Chip() { }
					}
				}
				S:Frame(option=1) {
					W:Frame(angle=10, option=1) {
						W:Wheel(angle=-100, power=P, brake=B2, effect=5) { }
					}
					E:Frame(angle=10, option=1) {
						E:Wheel(angle=-100, power=-P, brake=B2, effect=5) { }
					}
				}
			}
		}
	}
}
Lua
{
require("daretoku_taka/xgui.lua")

_sms=0
_sma=0

function _VEL(n)
	return _LEN3( _VX(n), _VY(n), _VZ(n))
end

function _LEN3(a,b,c)
	return math.sqrt(a * a + b * b + c * c)
end

function _LINER(v,t,s)
	local r=v
	if v<t then r=v+s end
	if v>t then r=v-s end
	if r>t and v<t then r=t end
	if r<t and v>t then r=t end
	return r
end

function _NORMANALOG(n)
	local v = _ANALOG(n)
	if v < 100 and v > -100 then v = 0 end
	return v/1000
end


function OnFrame()
	XGUI.SetStringSize(32)
	
	XGUI.SetStringPosition(_WIDTH()/2,_HEIGHT()-64)
	XGUI.DrawVectorStringCenter(string.format("% 3d km/h",math.abs(_VEL(0))*3.6))
	
	--[[XGUI.SetStringPosition(192+64,192+64)
	XGUI.DrawVectorStringCenter("‘¬“x")
	XGUI.SetStringPosition(192+64,192+64+32)
	XGUI.DrawVectorStringCenter("x1 [km/h]")
	
	local kph=math.abs(_VEL(0))*3.6
	
	if kph>_sms then _sms=kph end
	
	local ratea = 1/_TICKS()
	local rateb = 1-ratea
	
	_sma = ratea*kph+rateb*_sma
	
	XGUI.SetStringSize(16)
	
	XMET.Draw(obj,192,192,192,90,360,16.875,20,kph,320,_sms,_sma)
	
	XGUI.SetDrawColorRGB(255,255,255)]]--
	
	local key4 = -_NORMANALOG(5)
	local key0 = _NORMANALOG(5)
	local key1 = 0
	
	if key0 < 0 then
		if _KEY(14) == 1 then
			key1 = -key0
		end
		key0 = 0
	end
	
	if key4 < 0 or key1 > 0 then key4 = 0 end
	
	BL = (math.floor(223*key4)+32)*65536
	
	B2=_LINER(B2,key4*100+_KEY(15)*200,100)
	B=_LINER(B,key4*200,100)
	
	P=_LINER(P,key0*15000-key1*5000,2000)
	
	S=_LINER(S,180+_NORMANALOG(0)*30,5)
end
}
