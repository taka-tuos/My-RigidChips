// [RCD] 
Val
{
	G0(default=0, max=10000000000)
	G1(default=0, max=10000000000)
	G2(default=0, max=10000000000)
	G3(default=0, max=10000000000)
	GJ(default=0, max=10000000000)
	P(default=0, min=-10000000000, max=10000000000)
	R(default=0, min=-90, max=90)
	T(default=0, min=-90, max=90)
	V(default=0, min=-90, max=90)
	V0(default=0, min=-90, max=90)
	V1(default=0, min=-90, max=90)
	V2(default=0, min=-90, max=90)
	V3(default=0, min=-90, max=90)
}
Key
{
}
Body
{
	Core() {
		W:Cowl(option=1, effect=#F0FB, name=LS) { }
		E:Cowl(option=1, effect=#F0FB, name=RS) { }
		S:Cowl(option=1, effect=#F0FB, name=TS) { }
		N:Cowl(option=1, effect=#F0FB, name=FS) { }
		S:Frame(angle=180) {
			N:Frame(angle=-90) {
				N:Chip(angle=-90) {
					S:Chip() {
						S:RLW(angle=-90, power=-P) {
							E:Trim(angle=T) { }
							W:Trim(angle=T) { }
						}
						S:RLW(angle=-90, power=P) {
							E:Trim(angle=-T) { }
							W:Trim(angle=-T) { }
						}
						S:Frame(angle=-20) {
							S:TrimF(angle=-90, option=1) {
								S:Chip() {
									S:Rudder(angle=-20) { }
									N:Rudder(angle=-20) { }
								}
							}
							S:Frame(angle=20) {
								W:Trim(angle=-R) {
									W:Chip() { }
								}
								E:Trim(angle=-R) {
									E:Chip() { }
								}
								W:Cowl(option=1) {
									W:Cowl(option=1) {
										W:Cowl(option=3) {
											N:Cowl() {
												W:Cowl(angle=-90, option=1, effect=#F0FB) {
													N:Cowl(angle=-75, option=1, effect=#F0FB) {
														E:Cowl(angle=-90) {
															N:Cowl() {
																N:Cowl() {
																	N:Cowl() { }
																}
															}
														}
													}
												}
											}
										}
										N:Cowl() { }
									}
									N:Cowl() { }
								}
								E:Cowl(option=1) {
									E:Cowl(option=1) {
										E:Cowl(option=4) {
											N:Cowl() {
												E:Cowl(angle=-90, option=1, effect=#F0FB) {
													N:Cowl(angle=-75, option=1, effect=#F0FB) {
														W:Cowl(angle=-90) {
															N:Cowl() {
																N:Cowl() {
																	N:Cowl() { }
																}
															}
														}
													}
												}
											}
										}
										N:Cowl() { }
									}
									N:Cowl() { }
								}
								S:Frame() {
									S:Chip() {
										W:Trim(angle=V) {
											W:Cowl(angle=-90, option=1, effect=#F0FB) {
												N:Cowl(angle=-70, option=1, effect=#F0FB) {
													E:Cowl(angle=-90) { }
												}
											}
										}
										E:Trim(angle=-V) {
											E:Cowl(angle=-90, option=1, effect=#F0FB) {
												N:Cowl(angle=-70, option=1, effect=#F0FB) {
													W:Cowl(angle=-90) { }
												}
											}
										}
									}
								}
							}
						}
						N:Frame(angle=V0) {
							N:Arm(option=50000, power=G0, angle=-V0, name=A0) { }
						}
						N:Frame(angle=V1) {
							N:Arm(option=50000, power=G1, angle=-V1, name=A1) { }
						}
						N:Frame(angle=V2) {
							N:Arm(option=50000, power=G2, angle=-V2, name=A2) { }
						}
						N:Frame(angle=V3) {
							N:Arm(option=50000, power=G3, angle=-V3, name=A3) { }
						}
					}
					S:Cowl() {
						S:Cowl() {
							S:Cowl() {
								S:Cowl(angle=-20, option=5) { }
							}
						}
					}
					N:Cowl() {
						N:Cowl(angle=-30, option=5) { }
						S:Cowl(angle=10) {
							S:Cowl(angle=-10) {
								S:Cowl() {
									S:Cowl(angle=-10) {
										E:Cowl(angle=-90) { }
										W:Cowl(angle=-90) { }
									}
									E:Cowl(angle=-90) { }
									W:Cowl(angle=-90) { }
								}
								E:Cowl(angle=-90) { }
								W:Cowl(angle=-90) { }
							}
							E:Cowl(angle=-90) { }
							W:Cowl(angle=-90) { }
						}
					}
				}
				E:Cowl(angle=-90) {
					W:Cowl() {
						W:Cowl() {
							W:Cowl() {
								W:Cowl(angle=-20, option=5) { }
							}
						}
					}
					E:Cowl() {
						E:Cowl(angle=-30, option=5) { }
						W:Cowl(angle=10) {
							W:Cowl(angle=-10) {
								W:Cowl() {
									W:Cowl(angle=-10) {
										S:Cowl(angle=-90) { }
										N:Cowl(angle=-90) { }
									}
									S:Cowl(angle=-90) { }
									N:Cowl(angle=-90) { }
								}
								S:Cowl(angle=-90) { }
								N:Cowl(angle=-90) { }
							}
							S:Cowl(angle=-90) { }
							N:Cowl(angle=-90) { }
						}
					}
				}
				W:Cowl(angle=-90) {
					W:Cowl() {
						W:Cowl(angle=-30, option=5) { }
						E:Cowl(angle=10) {
							E:Cowl(angle=-10) {
								E:Cowl() {
									E:Cowl(angle=-10) {
										N:Cowl(angle=-90) { }
										S:Cowl(angle=-90) { }
									}
									N:Cowl(angle=-90) { }
									S:Cowl(angle=-90) { }
								}
								N:Cowl(angle=-90) { }
								S:Cowl(angle=-90) { }
							}
							N:Cowl(angle=-90) { }
							S:Cowl(angle=-90) { }
						}
					}
					E:Cowl() {
						E:Cowl() {
							E:Cowl() {
								E:Cowl(angle=-20, option=5) { }
							}
						}
					}
				}
			}
		}
		N:Cowl() {
			N:Cowl(angle=30, option=5) { }
			S:Cowl(angle=-20, color=#101020, effect=#80FB) {
				S:Cowl(angle=15, color=#101020, effect=#80FB) {
					S:Cowl(angle=15) {
						S:Cowl(angle=10) {
							W:Cowl(angle=85, option=3) { }
							E:Cowl(angle=85, option=4) { }
						}
						W:Cowl(angle=85) { }
						E:Cowl(angle=85) { }
					}
					W:Cowl(angle=85, color=#101020, effect=#80FB) { }
					E:Cowl(angle=85, color=#101020, effect=#80FB) { }
				}
				W:Cowl(angle=85, option=4, color=#101020, effect=#80FB) { }
				E:Cowl(angle=85, option=3, color=#101020, effect=#80FB) { }
			}
		}
		S:Cowl() {
			S:Cowl() {
				S:Cowl() {
					S:Cowl(angle=20, option=5) { }
				}
			}
		}
	}
}
Lua
{
require("daretoku_taka/xgui.lua")

do
	local FSX=_X(FS)
	local FSY=_Y(FS)
	local FSZ=_Z(FS)
	local RSX=_X(RS)
	local RSY=_Y(RS)
	local RSZ=_Z(RS)
	local LSX=_X(LS)
	local LSY=_Y(LS)
	local LSZ=_Z(LS)
	local TSX=_X(TS)
	local TSY=_Y(TS)
	local TSZ=_Z(TS)
	
	function MF(a)
		local FX=_X(FS)-FSX
		local FY=_Y(FS)-FSY
		local FZ=_Z(FS)-FSZ
		local RX=_X(RS)-RSX
		local RY=_Y(RS)-RSY
		local RZ=_Z(RS)-RSZ
		local LX=_X(LS)-LSX
		local LY=_Y(LS)-LSY
		local LZ=_Z(LS)-LSZ
		local TX=_X(TS)-TSX
		local TY=_Y(TS)-TSY
		local TZ=_Z(TS)-TSZ

		WX=(FX*_YX(FS)+FY*_YY(FS)+FZ*_YZ(FS))-(TX*_YX(TS)+TY*_YY(TS)+TZ*_YZ(TS))
		WY=(RX*_ZX(RS)+RY*_ZY(RS)+RZ*_ZZ(RS))-(LX*_ZX(LS)+LY*_ZY(LS)+LZ*_ZZ(LS))
		WZ=(RX*_YX(RS)+RY*_YY(RS)+RZ*_YZ(RS))-(LX*_YX(LS)+LY*_YY(LS)+LZ*_YZ(LS))
		VEL=(FX*_ZX(FS)+FY*_ZY(FS)+FZ*_ZZ(FS))*3.6
		VX=(FX*_XX(FS)+FY*_XY(FS)+FZ*_XZ(FS))*3.6

		VY=(FX*_YX(FS)+FY*_YY(FS)+FZ*_YZ(FS))*3.6

		FSX=_X(FS)
		FSY=_Y(FS)
		FSZ=_Z(FS)
		RSX=_X(RS)
		RSY=_Y(RS)
		RSZ=_Z(RS)
		LSX=_X(LS)
		LSY=_Y(LS)
		LSZ=_Z(LS)
		TSX=_X(TS)
		TSY=_Y(TS)
		TSZ=_Z(TS)
	end
end

function _VEL(n)
	return _LEN3( _VX(n), _VY(n), _VZ(n))
end

function _LEN3(a,b,c)
	return math.sqrt(a * a + b * b + c * c)
end

function _LINER(v,t,s)
	local r=v
	if v<t then r=v+s end
	if v>t then r=v-s end
	if r<t and t<0 then r=t end
	if r>t and t>0 then r=t end
	if t-r<s and t-r>0 then r=t end
	if r-t<s and r-t>0 then r=t end
	return r
end

function _CROSS3D(x,y,z)
	_MOVE3D(x,y,z)
	_LINE3D(x+0.3,y,z)
	
	_MOVE3D(x,y,z)
	_LINE3D(x-0.3,y,z)
	
	_MOVE3D(x,y,z)
	_LINE3D(x,y+0.3,z)
	
	_MOVE3D(x,y,z)
	_LINE3D(x,y-0.3,z)
	
	_MOVE3D(x,y,z)
	_LINE3D(x,y,z+0.3)
	
	_MOVE3D(x,y,z)
	_LINE3D(x,y,z-0.3)
end

_ab=0

window_info = nil
window_radar = nil

_maxvel = 0

function OnInit()
	window_info = XGUI.CreateWindow(640,200,"機体状況",OnDraw_Window_Info,true)
	window_radar = XGUI.CreateWindow(512,512,"レーダー",OnDraw_Window_Radar,true)
	
	--_ZOOM(_GETVIEWZOOM())
end

_jp=300000
_ra=10
_va=20

_md=0
_prev=0

_mel=0
_mer=0

_tn=-60

_tv={0,_tn,_tn,_tn}

_v=0

function OnFrame()
	MF()
	
	P=_LINER(P,_KEY(4)*_jp+(_jp*_ab),_jp/10+(_jp*_ab)/10)
	R=_LINER(R,_KEY(3)*_ra-_KEY(2)*_ra,_ra/4)
	V=_LINER(V,_KEY(1)*_va-_KEY(0)*_va,_va/4)
	
	if _KEY(2) == 0 and _KEY(3) == 0 then
		R=WZ*32
	end
	
	if _KEY(0) == 0 and _KEY(1) == 0 then
		V=WX*-192
	end
	
	T = math.max(55, 25 * ((_VEL(0) * 3.6 - 200) / 200) + 55)
	
	if _md == 1 then
		_prev=_prev-(_AX(0)-math.atan2(-_VY(0),-_VZ(0)))*0.25
		_prev=math.min(2,math.max(-2,_prev))
		R=_EZ(0)*-10-_WZ(0)
		V=-_AX(0)*20-_WX(0)+_prev
		
		R=math.min(10,math.max(-10,R))
		V=math.min(10,math.max(-10,V))
		
		P = _jp
	end
	
	_ab=_KEY(6)*0.2*_KEY(4)
	
	if _KEYDOWN(15) == 1 then
		_md = 1 - _md
	end
	
	GJ = 0
	
	for i=0,3 do
		_G['G'..i]=0
	end
	
	if _KEY(5) == 1 and _E(_G['A'.._v]) == _OPTION(_G['A'.._v]) and _G['V'.._v] == 0 then
		_G['G'.._v]=_OPTION(_G['A'.._v])
		GJ=_OPTION(_G['A'.._v])
		_v=math.mod(_v+1,4)
		_tv={_tn,_tn,_tn,_tn}
		_tv[_v+1]=0
	end
	
	for i=0,3 do
		_G['V'..i]=_LINER(_G['V'..i],_tv[i+1],math.abs(_tn/3))
	end
	
	XGUI.RefreshWindowManager()
	
	_SETCOLOR(255*256)
	
	_MOVE2D( 0.10, 0.0)
	_LINE2D( 0.05,-0.05)
	_LINE2D( 0.00, 0.00)
	_LINE2D(-0.05,-0.05)
	_LINE2D(-0.10, 0.00)
end

function OnDraw_Window_Info(obj)
	XGUI.WindowDrawBegin(obj)
	XGUI.SetStringPosition(2,0)
	local vel = _VEL(0)
	XGUI.DrawVectorString(string.format("現在 : %.3f km/h (%.3f MACH, %.3f m/s)",vel*3.6,vel/340,vel))
	if _maxvel < vel then _maxvel = vel end
	vel = _maxvel
	XGUI.SetStringPosition(2,16)
	XGUI.DrawVectorString(string.format("最高 : %.3f km/h (%.3f MACH, %.3f m/s)",vel*3.6,vel/340,vel))
	XGUI.SetStringPosition(2,48)
	XGUI.DrawVectorString(string.format("海抜 %.3f m",_Y(0)))
	
	XGUI.WindowDrawEnd()
end

function _NPOS(n)
	math.randomseed(1519)
	local x = _PLAYERX(n)
	math.randomseed(1519)
	local y = _PLAYERY(n)
	math.randomseed(1519)
	local z = _PLAYERZ(n)
	
	local a = math.pow(_PLAYERCHIPS(n), 1.0 / 3.0) / 2.0
	
	local g_RandTime = _NTICKS()
	
	x = x - math.sin(g_RandTime / 150.0)*a + math.sin(g_RandTime / 350.0)*a
	y = y - math.sin(g_RandTime / 160.0)*a + math.sin(g_RandTime / 360.0)*a
	z = z - math.sin(g_RandTime / 140.0)*a + math.sin(g_RandTime / 340.0)*a
	
	return x,y,z
end

function OnDraw_Window_Radar(obj)
	XGUI.WindowDrawBegin(obj)
	
	XGUI.SetStringPosition(256,256)
	XGUI.DrawVectorStringCenter("△")
	
	XGUI.Move2D(256,256)
	XGUI.Line2D(256-math.sin(math.rad(_ZOOM(0)))*256,0)
	XGUI.Move2D(256,256)
	XGUI.Line2D(256+math.sin(math.rad(_ZOOM(0)))*256,0)
	
	XGUI.Move2D(256,256)
	XGUI.Line2D(256,0)
	
	local i
	
	for i=1,_PLAYERS()-1 do
		local x,y,z = _NPOS(i)
		
		local x1,y1 = x-_X(0),z-_Z(0)
		
		local x2 = x1 * math.cos(_EY(0)) - y1 * math.sin(_EY(0))
		local y2 = x1 * math.sin(_EY(0)) + y1 * math.cos(_EY(0))
		
		x2 = x2 / 1000 * -256 + 256
		y2 = y2 / 1000 * 256 + 256
		
		XGUI.SetStringSize(12)
		
		if x2 < 512 and x2 >= 0 and y2 < 512 and y2 >= 0 and _PLAYERID(i) ~= _PLAYERMYID() then
			XGUI.SetStringPosition(x2,y2)
			XGUI.DrawVectorStringCenter("×")
			XGUI.SetStringPosition(x2+6,y2+6)
			XGUI.DrawVectorString(_PLAYERNAME(i))
		end
	end
	
	XGUI.WindowDrawEnd()
end
}
