// [RCD] 
Val
{
	G1(default=0, max=65536, step=65536)
	G2(default=0, max=65536, step=65536)
	G3(default=0, max=65536, step=65536)
	G4(default=0, max=65536, step=65536)
	P(default=0, min=-10000000000, max=10000000000)
	R(default=0, min=-90, max=90, step=1)
	RD(default=0, min=-90, max=90, step=1)
	T(default=0, min=-90, max=90)
	V(default=0, min=-90, max=90, step=8)
}
Key
{
}
Body
{
	Core() {
		W:Cowl(option=1, effect=#F0FB, name=LS) { }
		E:Cowl(option=1, effect=#F0FB, name=RS) { }
		S:Cowl(option=1, effect=#F0FB, name=TS) { }
		N:Cowl(option=1, effect=#F0FB, name=FS) { }
		N:Cowl(angle=30, option=5) {
			S:Cowl(color=#202020, effect=#80FB) {
				S:Cowl(angle=30, color=#202020, effect=#80FB) {
					S:Cowl(angle=30, color=#202020, effect=#80FB) {
						S:Cowl(angle=-20) { }
						E:Cowl(angle=91, color=#202020, effect=#80FB) { }
						W:Cowl(angle=91, color=#202020, effect=#80FB) { }
					}
					E:Cowl(angle=91, color=#202020, effect=#80FB) { }
					W:Cowl(angle=91, color=#202020, effect=#80FB) { }
				}
				E:Cowl(angle=91, color=#202020, effect=#80FB) { }
				W:Cowl(angle=91, color=#202020, effect=#80FB) { }
			}
		}
		N:Arm(power=G1, option=50000) { }
		S:Frame(angle=90) {
			S:Frame(angle=-90) {
				S:Frame() {
					S:Frame(option=1) {
						S:Frame(angle=-30, option=1) {
							S:Frame(angle=30, option=1) {
								E:Trim(angle=V) {
									N:Cowl(angle=-90, effect=#F0FB) {
										E:Cowl(angle=170, effect=#F0FB) {
											S:Cowl(angle=90) {
												E:Cowl(option=3) { }
											}
										}
									}
									W:Cowl() { }
								}
								W:Trim(angle=-V) {
									N:Cowl(angle=-90, effect=#F0FB) {
										W:Cowl(angle=170, effect=#F0FB) {
											S:Cowl(angle=90) {
												W:Cowl(option=4) { }
											}
										}
									}
									E:Cowl() { }
								}
								N:Trim(angle=-90) {
									S:Chip(angle=RD) {
										E:Cowl(option=5) { }
									}
									N:Rudder(angle=150) {
										N:Chip() { }
									}
								}
							}
						}
					}
				}
				W:Cowl(angle=-90) {
					S:Cowl() {
						S:Cowl(angle=-5) {
							S:Cowl(angle=-5) {
								S:Cowl(angle=-5) { }
								W:Cowl(angle=-150) { }
								E:Cowl(angle=-150) { }
							}
							W:Cowl(angle=-150) { }
							E:Cowl(angle=-150) { }
						}
					}
				}
				W:Trim(angle=R) {
					W:Chip() {
						W:Chip() {
							S:Cowl(angle=-90, effect=#F0FB) {
								W:Cowl(angle=170, effect=#F0FB) {
									N:Cowl(angle=90) {
										W:Cowl() {
											W:Cowl() { }
										}
									}
								}
							}
						}
					}
				}
				E:Trim(angle=R) {
					E:Chip() {
						E:Chip() {
							S:Cowl(angle=-90, effect=#F0FB) {
								E:Cowl(angle=170, effect=#F0FB) {
									N:Cowl(angle=90) {
										E:Cowl() {
											E:Cowl() { }
										}
									}
								}
							}
						}
					}
				}
				N:Frame() {
					N:Cowl(angle=-30, option=5) { }
					E:Cowl(angle=-90) {
						S:Cowl() {
							S:Cowl() {
								S:Cowl(angle=-5) {
									S:Cowl(angle=-5) {
										S:Cowl(angle=-5) { }
										E:Cowl(angle=-150) { }
										W:Cowl(angle=-150) { }
									}
									E:Cowl(angle=-150) { }
									W:Cowl(angle=-150) { }
								}
							}
						}
						N:Cowl(angle=-30, option=5) { }
					}
					W:Cowl(angle=-90) {
						N:Cowl(angle=-30, option=5) { }
					}
					W:Frame(angle=-90) {
						N:Arm(power=G4, option=50000) { }
					}
					E:Frame(angle=-90) {
						N:Arm(power=G3, option=50000) { }
					}
					N:Arm(power=G2, option=50000) { }
					N:RLW(angle=-90, power=P) {
						E:Trim(angle=T) { }
						W:Trim(angle=T) { }
					}
					N:RLW(angle=-90, power=-P) {
						E:Trim(angle=-T) { }
						W:Trim(angle=-T) { }
					}
				}
			}
		}
	}
}
Lua
{
require("daretoku_taka/xgui.lua")
require("daretoku_taka/xhud.lua")
require("daretoku_taka/libccvx2.lua")

_mn = 0
_mdl = {1,-1}
_ntp = {0,0}

_prvtbl = InitPRVTable()

_prvtbl.p.limit = 360000
_prvtbl.p.step  = 360000

_prvtbl.r.tgt = 360
_prvtbl.r.kp  = 12
_prvtbl.r.ki  = 12
_prvtbl.r.kd  = 4
_prvtbl.r.il  = 20

_prvtbl.v.tgt = 180
_prvtbl.v.kp  = 32
_prvtbl.v.ki  = 32
_prvtbl.v.kd  = 4
_prvtbl.v.il  = 40

_ng = 0

RD_PID = XPID_new()

function OnFrame()
	CCVXOnFrame(false)

	ShowSplash("XU-4 NorthanLights")
	
	local p,r,v = GetPRVAnalog(_prvtbl)
	
	local dy = math.rad((_KEY(5)-_KEY(4))*60/30)
	
	RD = RD_PID:PID(dy,WY,24,16,2,40)
	
	for _i=0,3 do
		_G["G".._i] = 0
	end
	
	if _KEY(7) == 1 and math.mod(_TICKS(),3) == 0 then
		_G["G"..(_ng+1)] = 10000000000
		_ng = math.mod(_ng+1,4)
	end
	
	P=p
	R=r
	V=-v
	
	NK = _VEL(0) * 3.6
	
	T = 25 * ((NK - 200) / 200) + 55
	
	CheckLimit()
	
	XHUD.Draw()
end
}
