// [RCD] 
Val
{
	P(default=0, min=-10000000000, max=10000000000)
	R(default=0, min=-90, max=90)
	V(default=0, min=-90, max=90)
}
Key
{
}
Body
{
	Core() {
		W:Cowl(color=#FFFFFF, option=1, effect=#F0FB, name=LS) { }
		E:Cowl(color=#FFFFFF, option=1, effect=#F0FB, name=RS) { }
		S:Cowl(color=#FFFFFF, option=1, effect=#F0FB, name=TS) { }
		N:Cowl(color=#FFFFFF, option=1, effect=#F0FB, name=FS) { }
		N:Chip() {
			N:Chip() {
				S:Chip(angle=V) {
					N:Cowl() {
						E:Cowl(angle=-20, option=3) {
							S:Cowl() { }
						}
						W:Cowl(angle=-20, option=4) {
							S:Cowl() { }
						}
					}
				}
				N:Cowl() {
					N:Cowl() {
						N:Cowl(angle=-150) {
							N:Cowl(angle=-25) {
								N:Cowl(angle=20) {
									N:Cowl(angle=-30) {
										N:Cowl(angle=-10) {
											N:Cowl(angle=5) {
												N:Cowl(angle=10) {
													N:Cowl(angle=-10) { }
													W:Cowl(angle=-35) {
														S:Cowl() { }
														N:Cowl(angle=-10) { }
													}
													E:Cowl(angle=-25) {
														N:Cowl(angle=-10) { }
														S:Cowl() { }
													}
												}
												W:Cowl(angle=-40) {
													S:Cowl(angle=-10, option=3) { }
												}
												E:Cowl(angle=-40) {
													S:Cowl(angle=-10, option=4) { }
												}
											}
											W:Cowl(angle=-50) { }
											E:Cowl(angle=-52) { }
											W:Cowl(angle=-85) { }
										}
										W:Cowl(angle=-90) { }
									}
									W:Cowl(angle=-90) { }
								}
								W:Cowl(angle=-85, option=3) {
									N:Cowl(option=4) { }
								}
							}
							W:Cowl(angle=-85, option=3) {
								N:Cowl(option=4) { }
							}
						}
						N:Cowl(angle=150) {
							N:Cowl(angle=30) {
								N:Cowl() {
									N:Cowl() {
										N:Cowl() {
											N:Cowl() {
												N:Cowl() {
													N:Cowl(angle=10) { }
													E:Cowl(angle=25) {
														N:Cowl(angle=10) { }
													}
													W:Cowl() { }
												}
											}
										}
									}
									W:Cowl(angle=85) { }
								}
								W:Cowl(angle=85, option=3) { }
							}
							W:Cowl(angle=85, option=3) {
								N:Cowl(option=4) { }
							}
						}
					}
				}
			}
		}
		S:Chip() {
			S:Chip() { }
			S:TrimF(angle=90, option=1) {
				N:Rudder(angle=90) {
					E:Chip() { }
				}
			}
			W:Chip() {
				W:Rudder(angle=-10) {
					W:Trim(angle=R) {
						S:Cowl(option=4) { }
					}
					E:Cowl() {
						E:Cowl() { }
					}
					S:Chip() {
						E:Cowl() { }
					}
					W:Cowl() {
						W:Cowl(angle=90) {
							N:Cowl(angle=70) {
								E:Cowl(angle=90) {
									N:Cowl() {
										N:Cowl() {
											W:Cowl(angle=90) {
												N:Cowl(angle=-30) {
													E:Cowl(angle=90) {
														S:Cowl() { }
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
				W:Wheel(angle=90) { }
			}
			E:Chip() {
				E:Rudder(angle=10) {
					E:Trim(angle=R) {
						S:Cowl(option=3) { }
					}
					W:Cowl() {
						W:Cowl() { }
					}
					S:Chip() {
						W:Cowl() { }
					}
					E:Cowl() {
						E:Cowl(angle=90) {
							N:Cowl(angle=70) {
								W:Cowl(angle=90) {
									N:Cowl() {
										N:Cowl() {
											E:Cowl(angle=90) {
												N:Cowl(angle=-30) {
													W:Cowl(angle=90) {
														S:Cowl() { }
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
				E:Wheel(angle=90) { }
			}
			S:Frame(angle=-30) {
				S:Jet(angle=120, power=-P) { }
			}
			E:Cowl() {
				E:Cowl() {
					S:Cowl(angle=30, option=1, effect=#F0FB) {
						E:Cowl(angle=-90, option=3) { }
						W:Cowl(angle=-90, option=4) { }
					}
				}
			}
			W:Cowl() {
				W:Cowl() {
					S:Cowl(angle=30, option=1, effect=#F0FB) {
						E:Cowl(angle=-90, option=3) { }
						W:Cowl(angle=-90, option=4) { }
					}
				}
			}
		}
		N:TrimF(angle=-90, option=1) {
			N:RudderF(angle=-30) {
				N:Wheel() { }
			}
		}
	}
}
Lua
{
require("daretoku_taka/xgui.lua")
require("daretoku_taka/xhud.lua")
require("daretoku_taka/libccvx2.lua")

_mn = 0
_mdl = {1,-1}
_ntp = {0,0}

_prvtbl = InitPRVTable()

_prvtbl.p.limit = 200000
_prvtbl.p.step  = 100000

_prvtbl.r.tgt = 360
_prvtbl.r.kp  = 12
_prvtbl.r.ki  = 12
_prvtbl.r.kd  = 4
_prvtbl.r.il  = 20

_prvtbl.v.tgt = 180
_prvtbl.v.kp  = 32
_prvtbl.v.ki  = 32
_prvtbl.v.kd  = 4
_prvtbl.v.il  = 40

function OnFrame()
	CCVXOnFrame(false)

	ShowSplash("CCVX-10 Falken")
	
	local p,r,v = GetPRVAnalog(_prvtbl)
	
	P=p
	R=r
	V=v
	
	CheckLimit()
	
	XHUD.Draw()
end
}
