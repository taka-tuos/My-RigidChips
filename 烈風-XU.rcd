// [RCD] 
Val
{
	G0(default=0, max=10000000000)
	G1(default=0, max=10000000000)
	G2(default=0, max=10000000000)
	G3(default=0, max=10000000000)
	GJ(default=0, max=10000000000)
	P(default=0, min=-10000000000, max=10000000000)
	R(default=0, min=-90, max=90)
	T(default=0, min=-90, max=90)
	V(default=0, min=-90, max=90)
	V0(default=0, min=-90, max=90)
	V1(default=0, min=-90, max=90)
	V2(default=0, min=-90, max=90)
	V3(default=0, min=-90, max=90)
}
Key
{
}
Body
{
	Core() {
		W:Cowl(option=1, effect=#F0FB, name=LS) { }
		E:Cowl(option=1, effect=#F0FB, name=RS) { }
		S:Cowl(option=1, effect=#F0FB, name=TS) { }
		N:Cowl(option=1, effect=#F0FB, name=FS) { }
		S:Frame(angle=180) {
			N:Frame(angle=-90) {
				N:Chip(angle=-90) {
					S:Chip() {
						S:RLW(angle=-90, power=-P) {
							E:Trim(angle=T) { }
							W:Trim(angle=T) { }
						}
						S:RLW(angle=-90, power=P) {
							E:Trim(angle=-T) { }
							W:Trim(angle=-T) { }
						}
						S:Frame(angle=-20) {
							S:TrimF(angle=-90, option=1) {
								S:Chip() {
									S:Rudder(angle=-20) { }
									N:Rudder(angle=-20) { }
								}
							}
							S:Frame(angle=20) {
								W:Trim(angle=-R) {
									W:Chip() { }
								}
								E:Trim(angle=-R) {
									E:Chip() { }
								}
								W:Cowl(option=1) {
									W:Cowl(option=1) {
										W:Cowl(option=3) {
											N:Cowl() {
												W:Cowl(angle=-90, option=1, effect=#F0FB) {
													N:Cowl(angle=-75, option=1, effect=#F0FB) {
														E:Cowl(angle=-90) {
															N:Cowl() {
																N:Cowl() {
																	N:Cowl() { }
																}
															}
														}
													}
												}
											}
										}
										N:Cowl() { }
									}
									N:Cowl() { }
								}
								E:Cowl(option=1) {
									E:Cowl(option=1) {
										E:Cowl(option=4) {
											N:Cowl() {
												E:Cowl(angle=-90, option=1, effect=#F0FB) {
													N:Cowl(angle=-75, option=1, effect=#F0FB) {
														W:Cowl(angle=-90) {
															N:Cowl() {
																N:Cowl() {
																	N:Cowl() { }
																}
															}
														}
													}
												}
											}
										}
										N:Cowl() { }
									}
									N:Cowl() { }
								}
								S:Frame() {
									S:Chip() {
										W:Trim(angle=V) {
											W:Cowl(angle=-90, option=1, effect=#F0FB) {
												N:Cowl(angle=-70, option=1, effect=#F0FB) {
													E:Cowl(angle=-90) { }
												}
											}
										}
										E:Trim(angle=-V) {
											E:Cowl(angle=-90, option=1, effect=#F0FB) {
												N:Cowl(angle=-70, option=1, effect=#F0FB) {
													W:Cowl(angle=-90) { }
												}
											}
										}
									}
								}
							}
						}
						N:Frame(angle=V0) {
							N:Arm(option=50000, power=G0, angle=-V0, name=A0) { }
						}
						N:Frame(angle=V1) {
							N:Arm(option=50000, power=G1, angle=-V1, name=A1) { }
						}
						N:Frame(angle=V2) {
							N:Arm(option=50000, power=G2, angle=-V2, name=A2) { }
						}
						N:Frame(angle=V3) {
							N:Arm(option=50000, power=G3, angle=-V3, name=A3) { }
						}
					}
					S:Cowl() {
						S:Cowl() {
							S:Cowl() {
								S:Cowl(angle=-20, option=5) { }
							}
						}
					}
					N:Cowl() {
						N:Cowl(angle=-30, option=5) { }
						S:Cowl(angle=10) {
							S:Cowl(angle=-10) {
								S:Cowl() {
									S:Cowl(angle=-10) {
										E:Cowl(angle=-90) { }
										W:Cowl(angle=-90) { }
									}
									E:Cowl(angle=-90) { }
									W:Cowl(angle=-90) { }
								}
								E:Cowl(angle=-90) { }
								W:Cowl(angle=-90) { }
							}
							E:Cowl(angle=-90) { }
							W:Cowl(angle=-90) { }
						}
					}
				}
				E:Cowl(angle=-90) {
					W:Cowl() {
						W:Cowl() {
							W:Cowl() {
								W:Cowl(angle=-20, option=5) { }
							}
						}
					}
					E:Cowl() {
						E:Cowl(angle=-30, option=5) { }
						W:Cowl(angle=10) {
							W:Cowl(angle=-10) {
								W:Cowl() {
									W:Cowl(angle=-10) {
										S:Cowl(angle=-90) { }
										N:Cowl(angle=-90) { }
									}
									S:Cowl(angle=-90) { }
									N:Cowl(angle=-90) { }
								}
								S:Cowl(angle=-90) { }
								N:Cowl(angle=-90) { }
							}
							S:Cowl(angle=-90) { }
							N:Cowl(angle=-90) { }
						}
					}
				}
				W:Cowl(angle=-90) {
					W:Cowl() {
						W:Cowl(angle=-30, option=5) { }
						E:Cowl(angle=10) {
							E:Cowl(angle=-10) {
								E:Cowl() {
									E:Cowl(angle=-10) {
										N:Cowl(angle=-90) { }
										S:Cowl(angle=-90) { }
									}
									N:Cowl(angle=-90) { }
									S:Cowl(angle=-90) { }
								}
								N:Cowl(angle=-90) { }
								S:Cowl(angle=-90) { }
							}
							N:Cowl(angle=-90) { }
							S:Cowl(angle=-90) { }
						}
					}
					E:Cowl() {
						E:Cowl() {
							E:Cowl() {
								E:Cowl(angle=-20, option=5) { }
							}
						}
					}
				}
			}
		}
		N:Cowl() {
			N:Cowl(angle=30, option=5) { }
			S:Cowl(angle=-20, color=#101020, effect=#80FB) {
				S:Cowl(angle=15, color=#101020, effect=#80FB) {
					S:Cowl(angle=15) {
						S:Cowl(angle=10) {
							W:Cowl(angle=85, option=3) { }
							E:Cowl(angle=85, option=4) { }
						}
						W:Cowl(angle=85) { }
						E:Cowl(angle=85) { }
					}
					W:Cowl(angle=85, color=#101020, effect=#80FB) { }
					E:Cowl(angle=85, color=#101020, effect=#80FB) { }
				}
				W:Cowl(angle=85, option=4, color=#101020, effect=#80FB) { }
				E:Cowl(angle=85, option=3, color=#101020, effect=#80FB) { }
			}
		}
		S:Cowl() {
			S:Cowl() {
				S:Cowl() {
					S:Cowl(angle=20, option=5) { }
				}
			}
		}
	}
}
Lua
{
require("daretoku_taka/xgui.lua")
require("daretoku_taka/xhud2.lua")
require("daretoku_taka/libccvx3.lua")
require("daretoku_taka/libgun.lua")
require("daretoku_taka/libweapon.lua")

_limitlist={1500,1800,2000,2200,2500,64512}

_prvtbl = InitPRVTable()

_prvtbl.p.limit = 750000
_prvtbl.p.step  = 375000

_prvtbl.r.tgt = 360
_prvtbl.r.kp  = 12
_prvtbl.r.ki  = 12
_prvtbl.r.kd  = 4
_prvtbl.r.il  = 20

_prvtbl.v.tgt = 180
_prvtbl.v.kp  = 32
_prvtbl.v.ki  = 32
_prvtbl.v.kd  = 4
_prvtbl.v.il  = 40

RD_PID = XPID_new()

inited = false

local ng = 0

local i = 0

function OnFrame()
	if not inited then
		CCVXOnInit({ Gun={func=_KEY,fire=7,op=50000,an=4,ang=-60} })
		inited = true
	end

	CCVXOnFrame(true)

	ShowSplash("XU-2 Wolffire")
	
	local p,r,v,b = GetPRVBAnalog(_prvtbl,{p=P,b=0})
	
	P=p
	R=-r
	V=v
	
	local dy = math.rad((_KEY(5)-_KEY(4))*60/30)
	
	RD = RD_PID:PID(dy,WY,12,24,4,40)
	
	CheckLimit()
	
	XHUD.Draw()
	
	for i=0,3 do
		_G["G"..i] = 0
	end
	
	if _KEY(7) == 1 and math.mod(_TICKS(),3) == 0 then
		_G["G"..ng] = 10000000000
		ng = math.mod(ng+1,4)
	end
	
	T = math.max(55,25 * ((_VEL(0) * 3.6 - 200) / 500) + 55)
end
}
