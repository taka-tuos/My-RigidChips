// [RCD] 
Val
{
	B(default=0, max=200)
	BC(default=#202020)
	BC2(default=#FF7F00)
	C(default=#00F0FB)
	EC(default=#606040)
	EFF1(default=#000000)
	HC(default=#FFFFFF)
	METC(default=#404040)
	NC(default=#7F4F00)
	NEK(default=0, min=-150, max=150, step=15)
	PW(default=0, min=-2500, max=2500)
	S(default=0, min=-2500, max=2500)
}
Key
{
}
Body
{
	Core() {
		S:Jet(angle=180, power=200, option=2, color=METC) {
			N:Frame(angle=90, option=1) {
				S:TrimF(angle=NEK, option=1) {
					S:Frame(angle=55, option=1) {
						S:Frame(angle=-145) {
							N:Frame() {
								N:Frame() {
									W:Frame(angle=5, option=1) {
										W:RudderF(angle=s, option=1) {
											E:Wheel(angle=-85, color=hc, effect=4) { }
										}
									}
									E:Frame(angle=5, option=1) {
										E:RudderF(angle=s, option=1) {
											W:Wheel(angle=-85, color=hc, effect=4) { }
										}
									}
									N:Chip(angle=-170) { }
									N:Cowl() {
										E:Cowl(angle=80, option=1, effect=#F0FB) {
											E:Cowl(angle=-160, option=1, effect=#F0FB) {
												E:Cowl(angle=80) {
													N:Cowl(angle=-135) {
														N:Cowl(angle=-25) {
															N:Cowl(angle=-20) {
																E:Cowl(angle=-90, option=4) {
																	N:Cowl() {
																		N:Cowl(option=4) { }
																		E:Cowl(angle=-90, color=#202020) { }
																	}
																}
																N:Cowl() {
																	N:Cowl() {
																		N:Cowl(angle=10) {
																			E:Cowl(angle=-90, option=3) { }
																			W:Cowl(angle=-90, option=4, color=#202020) {
																				S:Cowl(option=5, color=#202020) { }
																			}
																			W:Cowl() { }
																		}
																		W:Cowl() { }
																	}
																}
																W:Cowl(angle=-60) { }
															}
															W:Cowl(angle=-60) { }
														}
														W:Cowl(angle=-60, option=3) { }
														E:Cowl(angle=-120, option=4) { }
													}
													E:Cowl(angle=-130, option=3) { }
												}
											}
										}
										W:Cowl(angle=80, option=1, effect=#F0FB) {
											W:Cowl(angle=-160, option=1, effect=#F0FB) {
												W:Cowl(angle=80) {
													N:Cowl(angle=-135, color=#0000FF) {
														N:Cowl(angle=-25, color=#0000FF) {
															N:Cowl(angle=-20, color=#0000FF) {
																N:Cowl(color=#0000FF) {
																	N:Cowl(color=#0000FF) {
																		N:Cowl(angle=10, color=#0000FF) {
																			E:Cowl(angle=-90, option=3, color=#202020) {
																				S:Cowl(option=5, color=#202020) { }
																			}
																			W:Cowl(angle=-90, option=4, color=#0000FF) { }
																			E:Cowl() { }
																		}
																		E:Cowl() { }
																	}
																}
																W:Cowl(angle=-90, option=3, color=#0000FF) {
																	N:Cowl(color=#0000FF) {
																		N:Cowl(option=3, color=#0000FF) { }
																		W:Cowl(angle=-90, color=#202020) { }
																	}
																}
																E:Cowl(angle=-60, color=#0000FF) { }
															}
															E:Cowl(angle=-60, color=#0000FF) { }
														}
														E:Cowl(angle=-60, option=4, color=#0000FF) { }
														W:Cowl(angle=-120, option=3, color=#0000FF) { }
													}
													W:Cowl(angle=-130, option=4, color=#0000FF) { }
												}
											}
										}
										E:Cowl() { }
										W:Cowl() { }
										N:Cowl(angle=-150) {
											N:Cowl(angle=-10) {
												E:Cowl() {
													N:Cowl(angle=-10) {
														W:Cowl(option=4) { }
													}
												}
												W:Cowl() {
													N:Cowl(angle=-10) {
														E:Cowl(option=3) { }
													}
												}
											}
											E:Cowl() { }
											W:Cowl() { }
										}
									}
									S:Cowl(angle=-5, color=#804040) {
										S:Cowl(angle=-45, color=#804040) {
											S:Cowl(angle=-10, option=5, color=#804040) { }
										}
									}
								}
							}
							S:Frame() {
								E:Frame(angle=5, option=1) {
									E:Wheel(angle=-95, power=-PW, brake=b, color=hc, effect=4) { }
								}
								W:Frame(angle=5, option=1) {
									W:Wheel(angle=-95, power=PW, brake=b, color=hc, effect=4) { }
								}
								N:Chip(angle=-165, color=#202020) {
									W:Cowl(color=#202020) { }
									E:Cowl(color=#202020) { }
									N:Cowl(angle=30, option=5, color=#402020) { }
								}
							}
							S:Cowl(angle=-90, color=#202020) {
								W:Cowl(angle=-60, color=#202020) {
									S:Cowl(angle=90, option=4) { }
								}
								E:Cowl(angle=-60, color=#202020) {
									S:Cowl(angle=90, option=3) { }
								}
							}
						}
					}
				}
			}
		}
	}
}
Lua
{
function APAD(a,b)--アナログパッド
return
_ANALOG(0+a)/1000*b
end

function _NORMANALOG(n)
	local v = _ANALOG(n)
	if v < 100 and v > -100 then v = 0 end
	return v/1000
end

function _LINER(v,t,s)
	local r=v
	if v<t then r=v+s end
	if v>t then r=v-s end
	if r>t and v<t then r=t end
	if r<t and v>t then r=t end
	return r
end


function main()
_ZOOM(80)
--[[
　　　　カートでレースしようぜ

出力は絶対値で PW=2500までとし、自動制御は禁止
ステアリングの最大切れ角は30度まで自動制御は禁止
ブレーキに最大値は設けないが　同じく自動制御は禁止

各変数に代入する数値はユーザーの操作に関する数値に限る
	マシンの状態取得などを利用した自動制御を一切禁止する

BodyブロックはCowl以外一切の変更を認めない

カラーリングはvalブロックの変数で変えれるようにしました（一応）
]]--


--PW=0     --パワー
--B=0      --ブレーキ
--S=0      --ステアリング
--以下振り向き機能

if _KEY(8)==1 then NEK=NEK+8 end

if _KEY(9)==1 then NEK=NEK-8 end

local key4 = -_NORMANALOG(5)
local key0 = _NORMANALOG(5)
local key1 = 0

if key0 < 0 then
	if _KEY(14) == 1 then
		key1 = -key0
	end
	key0 = 0
end

if key4 < 0 or key1 > 0 then key4 = 0 end

PW=_LINER(PW,2500*key0+2500*-key1,300)     --パワー
B=_LINER(B,50*key4,50)      --ブレーキ
S=_LINER(S,-30*_NORMANALOG(0),4)      --ステアリング

out(0,_CHAT())
end}
