// [RCD] 
Val
{
	HRAD(default=0, min=-360, max=360)
	VRAD(default=0, min=-360, max=360)
	ZRAD(default=0, min=-360, max=360)
}
Key
{
}
Body
{
	Core() {
		N:Frame(option=1) {
			N:Frame(option=1) {
				S:RudderF(angle=HRAD) {
					N:TrimF(angle=-90, option=1) {
						S:RudderF(angle=VRAD, name=N1) {
							N:Arm(name=N2) { }
						}
					}
				}
			}
		}
		W:Frame(angle=70) {
			W:Frame() {
				W:Frame(angle=110) {
					N:Chip() {
						E:Chip() { }
					}
					S:Chip() {
						E:Chip() { }
					}
					E:Weight() { }
				}
			}
		}
		E:Frame(angle=70) {
			E:Frame() {
				E:Frame(angle=110) {
					N:Chip() {
						W:Chip() { }
					}
					S:Chip() {
						W:Chip() { }
					}
					W:Weight() { }
				}
			}
		}
	}
}
Lua
{
function _VEL(n)
	return _LEN3( _VX(n), _VY(n), _VZ(n))
end

function _LEN3(a,b,c)
	return math.sqrt(a * a + b * b + c * c)
end

function rclib_pointget(p,loop)
	local px=_PLAYERX(p)
	local py=_PLAYERY(p)
	local pz=_PLAYERZ(p)
	
	local sel={
		x_min=px,
		x_max=px,
	
		y_min=py,
		y_max=py,
	
		z_min=pz,
		z_max=pz
	}
	
	for i=1,loop do
	
		px=_PLAYERX(p)
		
		py=_PLAYERY(p)
		
		pz=_PLAYERZ(p)
		
		sel.x_min=math.min(px,sel.x_min)
		sel.x_max=math.max(px,sel.x_max)
	
		sel.y_min=math.min(py,sel.y_min)
		sel.y_max=math.max(py,sel.y_max)
		
		sel.z_min=math.min(pz,sel.z_min)
		sel.z_max=math.max(pz,sel.z_max)
	end
	
	px=(sel.x_min+sel.x_max)/2
	py=(sel.y_min+sel.y_max)/2
	pz=(sel.z_min+sel.z_max)/2
	
	return px,py,pz
end

function nvec(x,y,z)
	len = _LEN3(x,y,z)
	
	if len < 0.000001 then return x,y,z end
	
	len = 1 / len
	x = x * len
	y = y * len
	z = z * len
	
	return x,y,z
end

PN = 1

function OnFrame()
	ax,ay,az = _X(0)-_ZX(0)*0.9,_Y(0)-_ZY(0)*0.9,_Z(0)-_ZZ(0)*0.9
	bx,by,bz = rclib_pointget(PN,2500)
	
	PN = PN + _KEYDOWN(0)
	PN = PN - _KEYDOWN(1)
	
	ex,ey,ez = nvec(bx-ax,by-ay,bz-az)
	
	_MOVE3D(ax,ay,az)
	_LINE3D(ax+ex,ay+ey,az+ez)
	
	HRAD = 180-math.deg(_AY(0)-math.atan2(ex,ez))
	if HRAD<-180 then HRAD=HRAD+360 end
	if HRAD>180 then HRAD=HRAD-360 end
	VRAD = -180+math.deg(_AX(0)-math.atan2(ey,ez))
end
}
