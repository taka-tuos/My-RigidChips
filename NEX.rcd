// [RCD] 
Val
{
	R(default=0, min=-16, max=16, step=4)
	T(default=0, min=-90, max=90)
	V(default=0, min=-16, max=16, step=4)
	VAL(default=0, min=-100000000000, max=100000000000)
}
Key
{
	0:V(step=4)
	1:V(step=-4)
	2:R(step=4)
	3:R(step=-4)
}
Body
{
	Core() {
		S:Trim(angle=90) {
			E:Frame(angle=-120, option=1) {
				E:Chip(angle=30) {
					E:Trim(angle=R) {
						E:Chip() { }
					}
				}
			}
			E:Frame(angle=120, option=1) {
				E:Chip(angle=-30) {
					E:Trim(angle=R) {
						E:Chip() { }
					}
				}
			}
			S:Chip() {
				S:Chip() {
					S:Chip() {
						S:Chip() {
							S:Trim() {
								E:Frame(angle=-120, option=1) {
									E:Chip(angle=30) {
										E:Trim(angle=-V) { }
									}
								}
								E:Frame(angle=120, option=1) {
									E:Chip(angle=-30) {
										E:Trim(angle=V) { }
									}
								}
							}
						}
					}
				}
			}
		}
		S:Chip() {
			N:TrimF(angle=VAL, spring=0.15, damper=0) {
				W:Trim(angle=T) { }
				E:Trim(angle=T) { }
			}
			N:TrimF(angle=-VAL, spring=0.15, damper=0) {
				W:Trim(angle=-T) { }
				E:Trim(angle=-T) { }
			}
		}
	}
}
Lua
{pw=0

function _VEL(n)
	return _LEN3( _VX(n), _VY(n), _VZ(n))
end

function _LEN3(a,b,c)
	return math.sqrt(a * a + b * b + c * c)
end


function OnFrame()
	nk=_VEL(0)*3.6
	pw=pw*0.9+-179*0.1
	VAL = _TICKS()*pw
	T = 10
end}
