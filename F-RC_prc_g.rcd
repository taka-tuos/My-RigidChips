// [RCD] 
Val
{
	B(default=0, max=200000)
	BC(default=#FFFFFF)
	BC2(default=#FFFFFF)
	C(default=#F7F7F7)
	DF(default=0)
	DMP(default=0)
	DMPF(default=0)
	DMPR(default=0)
	EC(default=#504B41)
	FB(default=0, max=200)
	FCAMBER(default=85, min=10, max=170)
	HAND(default=90, max=90, step=8)
	HAND2(default=180, min=160, max=240, step=8)
	HC(default=#FFFFFF)
	METC(default=#008080)
	NC(default=#408080)
	NEK(default=0, min=-150, max=150, step=15)
	NS(default=#353535)
	PW(default=0, min=-2000, max=25000)
	RB(default=0, max=200000)
	RCAMBER(default=95, min=10, max=170)
	S(default=0, min=-2500, max=2500)
	S1(default=0, min=-2500, max=2500)
	S2(default=0, min=-2500, max=2500)
	SPR(default=0)
	SPRF(default=0)
	SPRR(default=0)
}
Key
{
}
Body
{
	Core() {
		S:Frame(angle=54, option=1, spring=1, damper=1) {
			S:Frame(angle=100, spring=1, damper=1) {
				S:Frame(angle=27, spring=1, damper=1) {
					S:Cowl(color=ns) {
						S:Cowl(color=ns) {
							S:Cowl(angle=45, option=1, effect=c) {
								W:Cowl(angle=89, option=1, effect=c) {
									N:Cowl(option=4, color=ns) {
										W:Cowl(option=3, color=bc2) {
											N:Cowl(option=4, color=bc2) {
												W:Cowl(angle=2, option=3, color=bc) {
													N:Cowl(option=4, color=bc) { }
												}
											}
										}
									}
								}
								E:Cowl(angle=89, option=1, effect=c) {
									N:Cowl(option=3, color=ns) {
										E:Cowl(option=4, color=bc2) {
											N:Cowl(option=3, color=bc2) {
												E:Cowl(angle=2, option=4, color=bc) {
													N:Cowl(option=3, color=bc) { }
												}
											}
										}
									}
								}
							}
							N:Cowl(angle=90, option=1, color=c, effect=c) {
								E:Cowl(angle=-60, option=1, effect=c) {
									E:Cowl(angle=-120, option=1, effect=c) {
										S:Cowl(angle=90, color=ns) {
											S:Cowl(color=ns) {
												S:Cowl(angle=15, color=ns) { }
											}
											W:Cowl(angle=140, color=bc2) {
												S:Cowl(color=bc) {
													S:Cowl(angle=20, option=3, color=bc) { }
												}
												N:Cowl(option=4, color=bc2) { }
											}
											N:Cowl(option=5, color=ns) { }
										}
									}
								}
								W:Cowl(angle=-60, option=1, effect=c) {
									W:Cowl(angle=-120, option=1, effect=c) {
										S:Cowl(angle=90, color=ns) {
											S:Cowl(color=ns) {
												S:Cowl(angle=15, color=ns) { }
											}
											E:Cowl(angle=140, color=bc2) {
												S:Cowl(color=bc) {
													S:Cowl(angle=20, option=4, color=bc) { }
												}
												N:Cowl(option=3, color=bc2) { }
											}
											N:Cowl(option=5, color=ns) { }
										}
									}
								}
							}
							S:Cowl(angle=35, option=1, effect=c) {
								W:Cowl(angle=90, option=1, effect=c) {
									N:Cowl(option=4, color=ns) {
										W:Cowl(option=3, color=bc2) {
											N:Cowl(angle=4, option=4, color=bc) { }
										}
										S:Cowl(angle=30, option=4, color=bc) {
											E:Cowl(angle=90, option=1, effect=c) {
												S:Cowl(angle=135, option=1, effect=c) {
													W:Cowl(angle=-170, option=4, color=bc) { }
												}
											}
										}
									}
								}
								E:Cowl(angle=90, option=1, effect=c) {
									N:Cowl(option=3, color=ns) {
										E:Cowl(option=4, color=bc2) {
											N:Cowl(angle=4, option=3, color=bc) { }
											N:Cowl(angle=90) {
												E:Cowl(angle=136, color=bc2) {
													W:Cowl(angle=15, option=1, effect=c) {
														N:Cowl(angle=91, color=bc) {
															W:Cowl(angle=3, color=bc) { }
														}
														S:Cowl(angle=91, color=bc) {
															W:Cowl(angle=3, color=bc) { }
														}
													}
													W:Cowl(angle=80, color=ns, effect=c) {
														S:Cowl(angle=130) {
															S:Cowl(angle=100, option=4, color=bc) { }
														}
														N:Cowl(angle=130) {
															N:Cowl(angle=100, option=3, color=bc) { }
														}
														N:Cowl(angle=90, option=1, effect=c) {
															E:Cowl(angle=90, option=1, effect=c) {
																S:Cowl(angle=88, option=2, color=ns, effect=#00F3, name=mtp) {
																	S:Cowl(angle=110, option=1, effect=c) {
																		S:Cowl(angle=143) { }
																	}
																}
															}
														}
														E:Cowl(angle=160, color=ns) { }
													}
												}
											}
											W:Cowl(angle=90) {
												S:Cowl(angle=135, color=bc2) {
													E:Cowl(angle=-90, option=1, effect=c) { }
													N:Cowl(angle=-175, option=1, color=bc, effect=c) {
														E:Cowl(angle=90, option=1, effect=c) {
															S:Cowl(angle=20, option=1, effect=c) {
																W:Cowl(angle=85, option=3, color=bc) { }
															}
														}
														W:Cowl(angle=90, option=1, effect=c) {
															S:Cowl(angle=20, option=1, effect=c) {
																E:Cowl(angle=85, option=4, color=bc) { }
															}
														}
														S:Cowl(angle=-45, color=ns) { }
													}
												}
											}
										}
										S:Cowl(angle=30, option=3, color=bc) {
											W:Cowl(angle=90, option=1, effect=c) {
												S:Cowl(angle=135, option=1, effect=c) {
													E:Cowl(angle=-170, option=3, color=bc) { }
												}
											}
										}
									}
								}
							}
						}
						N:Cowl(color=ns) {
							N:Cowl(angle=80) {
								N:Cowl(angle=-80, color=bc) {
									W:Cowl(angle=-91, color=bc) {
										N:Cowl(angle=-20, color=ec) { }
									}
									E:Cowl(angle=-91, color=bc) {
										N:Cowl(angle=-20, color=ec) { }
									}
									E:Cowl(angle=120, option=3, color=ns) { }
									W:Cowl(angle=120, option=4, color=ns) { }
									N:Cowl(angle=-20, option=5, color=ec) {
										W:Cowl(angle=-120, option=2, color=ec) { }
										E:Cowl(angle=-120, option=2, color=ec) { }
									}
								}
							}
						}
					}
					S:TrimF(spring=1, damper=1) {
						S:Frame(option=1, spring=1, damper=1) {
							E:Frame(angle=-5, option=1, spring=sprf, damper=dmpf) {
								E:RudderF(angle=-s1, option=1, spring=spr, damper=dmp) {
									W:Wheel(angle=FCAMBER, brake=fb, color=hc, effect=2) { }
								}
								W:Cowl(angle=150, option=1) {
									W:Cowl(angle=-150, option=1) { }
								}
							}
							W:Frame(angle=-5, option=1, spring=sprf, damper=dmpf) {
								W:RudderF(angle=-s2, option=1, spring=spr, damper=dmp) {
									E:Wheel(angle=FCAMBER, brake=fb, color=hc, effect=2) { }
								}
								E:Cowl(angle=150, option=1) {
									E:Cowl(angle=-150, option=1) { }
								}
							}
						}
					}
					N:TrimF(spring=1, damper=1) {
						N:RudderF(spring=1, damper=1) {
							E:Frame(angle=-5, option=1, spring=sprr, damper=dmpr) {
								E:Wheel(angle=RCAMBER, power=PW, brake=rb, color=hc, effect=2, spring=1, damper=1, name=RRH) { }
								W:Cowl(angle=150, option=1) {
									W:Cowl(angle=-150, option=1) { }
								}
							}
							W:Frame(angle=-5, option=1, spring=sprr, damper=dmpr) {
								W:Wheel(angle=RCAMBER, power=-pw, brake=rb, color=hc, effect=2, spring=1, damper=1, name=RLH) { }
								E:Cowl(angle=150, option=1) {
									E:Cowl(angle=-150, option=1) { }
								}
							}
							S:Frame(angle=-90, option=1) {
								N:Trim(angle=90, color=ec) {
									W:Chip(color=ec) { }
								}
							}
						}
					}
					S:Cowl(option=1, effect=c, name=FS) { }
					E:Cowl(option=1, effect=c, name=RS) { }
					W:Cowl(option=1, effect=c, name=LS) { }
					N:Cowl(option=1, effect=c, name=TS) { }
					N:Chip(angle=DF) { }
				}
			}
		}
	}
}
Lua
{
--//ここから・・・//////////////////////////////////////////////////////////////
--サウンドコード表示
s_pace,s_code=0,{}
for loop=1,17 do s_code[loop]={0,0,0 ,0,0,0} end
s_code[0]= {0,0,0 ,0,0,0}	--認識パターン左
s_code[18]={0,0,0 ,0,0,0}	--認識パターン右
function sound_code()
	--重複再生防止
	if s_pace>127 then s_pace=0 end
	s_code[17][1],s_pace=s_pace,s_pace+1
	--再生速度処理
	for loop=1,16 do
		if s_code[loop][4]>255 then
			s_code[loop][5]=s_code[loop][4]-255
			s_code[loop][4]=255
		end
	end
	--描画
	local wid,hei,px
	local now_wid,now_hei=_WIDTH(),_HEIGHT()
	if now_wid~=old_wid then
		wid =-now_wid/2+20
		local old_wid=now_wid
	end
	if now_hei~=old_wid then
		hei,px = now_hei/2,2/now_hei
		local old_hei=now_hei
	end
	for loop_x=0,18 do
		local wid2 = (wid+loop_x)*px
		for loop_y=0,1 do
			local hei2,ly3 = hei-loop_y,3*loop_y
			_SETCOLOR(
			          math.floor(s_code[loop_x][1+ly3])*65536
			         +math.floor(s_code[loop_x][2+ly3])*256
			         +math.floor(s_code[loop_x][3+ly3])
			         )
			_MOVE2D(wid2,hei2*px) _LINE2D(wid2,(hei2+1)*px)
		end
	end
	--コード初期化
	for loop=1,16 do s_code[loop]={0,0,100 ,127,0,0} end
end
--//ここまでをコピーしてください////////////////////////////////////////////////

function _NORMANALOG(n)
	local v = _ANALOG(n)
	if v < 100 and v > -100 then v = 0 end
	return v/1000
end

RRL=0
RRR=0
PWB={0,0.1,0.3,0.5,0.6,0.7,0.8,1,-0.6,-1}
function main()
MF()

RRL=RRL+(-_WY(RLH)-RRL)/2
RRR=RRR+(_WY(RRH)-RRR)/2

--[[
　　　　カートのスピード感がもどかしいあなたに
FJ1600のような車で腕を競おう

出力は変数THを介した操作に限る、自動制御は禁止
ステアリングの最大切れ角は30度まで自動制御は禁止
ブレーキに最大値は設けないが　同じく自動制御は禁止

各変数に代入する数値はユーザーの操作に関する数値に限る
	マシンの状態取得などを利用した自動制御を一切禁止する

Bodyブロックは
・wheelﾁｯﾌﾟの角度変更またはそれを行うための構造変更（アライメント調整を想定した物）
・Cowl
以外一切の変更を認めない

カラーリングはvalブロックの変数で変えれるようにしました（一応）
]]--
--////////////////////////////////////////////////////////////////////////
	_ZOOM(60)
	
	out(1,TACO)
	
	local key4 = -_NORMANALOG(5)
	local key0 = _NORMANALOG(5)
	local key1 = 0
	
	if key0 < 0 then
		if _KEY(14) == 1 then
			key1 = -key0
		end
		key0 = 0
	end
	
	local m = 0
	if key0 > 0 then m = 2 end
	
	local vh = 0
	local vm = 0
	local vl = 0
	local vi = 0
	
	local sh = 0
	local sm = 0
	local sl = 0
	local si = 0
	
	local v = TACO
	
	vh = 1
	sh = v / 0.7
	
	out(2,sh)
	
	s_code[1]={	--サウンドスロット指定
		6-m		--再生モード
		,60*vh	--音量
		,100	--音量バランス
		,sh*127	--再生速度
		,0		--再生速度2
		,0		--未使用
	}
	
	s_code[2]={	--サウンドスロット指定
		4+m		--再生モード
		,60*vh	--音量
		,100	--音量バランス
		,sh*127	--再生速度
		,0		--再生速度2
		,0		--未使用
	}
	
	sound_code()

	TH=key0			--ｽﾛｯﾄﾙ0〜1
	SH_U=14			--ｼﾌﾄｱｯﾌﾟ(キー番号)
	SH_D=15			--ｼﾌﾄﾀﾞｳﾝ(キー番号)
	B=100*key4			--ﾌﾞﾚｰｷ　0〜無制限
	B_B=0.8			--前100% 0〜0.5〜1 後ろ100%
	S=-30*_NORMANALOG(0)			   --ｽﾃｱﾘﾝｸﾞ　-30〜+30
	DF=30			--ﾀﾞｳﾝﾌｫｰｽ0〜180
	SPRF=0.15		--ﾌﾛﾝﾄｽﾌﾟﾘﾝｸﾞ
	SPRR=0.15		--ﾘｱｽﾌﾟﾘﾝｸﾞ
	DMPF=1			--ﾌﾛﾝﾄﾀﾞﾝﾊﾟｰ
	DMPR=1			--ﾘｱﾀﾞﾝﾊﾟｰ
	TOE=1			--ﾌﾛﾝﾄﾄｰ角
	F_CAMBER=-2		--ﾌﾛﾝﾄｷｬﾝﾊﾞｰ角
	R_CAMBER=-1		--ﾌﾛﾝﾄｷｬﾝﾊﾞｰ角

--/////////////////////////////////////////////////////////////////////////
FB=limit((1-B_B)*B,0,200000)
RB=limit((B_B)*B,0,200000)
S1=S+TOE
S2=S-TOE
FCAMBER=85+F_CAMBER
RCAMBER=95-R_CAMBER
SPR=1;DMP=1
PW=GN(TH,_KEYDOWN(SH_D),_KEYDOWN(SH_U))
meter()
end

------------------------------------------------------------------
GIA=0
TACO=0
rate=0
clutch_mode=0
function GN(st,down,up)
	st=limit(st,0,1)
	POWER=0
	GIA=limit(GIA+up-down,-1,5)
	TOP=(300/5)*GIA
	RPM=RRL+RRR/2
	if clutch_mode==0 then
		if rate>0.95 then rate=rate-0.3 end
		rate=rate+(PWB[3+math.int(limit(st*5,0,5))]-rate)/3
		TACO=rate
		POWER=0
		if GIA~=0 then clutch_mode=1 end
		if GIA==-1 then clutch_mode=3 end
	elseif clutch_mode==1 then
		rate=rate+(st*PWB[math.int(limit(((RPM)/TOP)*10,1,10))]-rate)/20
		TACO=((RPM)/TOP)
		POWER=rate*8000
	
		if TACO>0.5 then clutch_mode=2 end
	elseif clutch_mode==2 then
		rate=rate+(st*PWB[math.int(limit(((RPM)/TOP)*10,1,10))]-rate)/3
		TACO=((RPM)/TOP)
		POWER=rate*8000
	
		if GIA==0 then clutch_mode=0 end
	elseif clutch_mode==3 then
		rate=rate+(st*PWB[math.int(limit((-RPM/-TOP)*10,1,10))]-rate)/10
		TACO=math.abs((RPM)/TOP)
		POWER=-rate*8000
	
		if GIA==0 then clutch_mode=0 end
	end
	
		--out(0,rate)
	return POWER
end

clk=0
miyasuiVEL=0
REVM=0
full_fuel=_FUEL()
function meter()
	clk=clk+1
	if clk>2 then 
		clk=0
		miyasuiVEL=VEL 
	end
movec(-0.065,0.1755)
linec(-0.120,0.1755)
linec(-0.120,0.2055)
linec(-0.065,0.2055)
linec(-0.065,0.1755)
	print16seg(-0.068,0.162,0.005,0.01,"km/h","T")
	_SETCOLOR(RGB(255,100,0))
	print16seg(-0.08,0.18,0.011,0.022,""..math.abs(math.int(miyasuiVEL*30)),"T")
		
	if GIA>0 then
		print16seg(-0.1,0.13,0.011,0.022,""..math.abs(math.int(GIA)),"T")
	elseif GIA==0 then
		print16seg(-0.1,0.13,0.011,0.022,"N","T")
	elseif GIA==-1 then
		print16seg(-0.1,0.13,0.011,0.022,"R","T")
	end
mtx=-0.15
mty=0.02
REVR=0

REVR=math.abs(TACO)--math.abs(RRL+RRR)/2/200
REVlimit=0

if rate<0 then REVlimit=1 end
Runp(-0.055,0.23,REVlimit,1,1,RGB(255,0,0))

out(0,REVlimit)

_SETCOLOR(RGB(255,255,255))
for i=90,360,300/100*10 do
print16seg(EN_X(0.198+mtx,0.045,i),EN_Y(0.1950-mty,0.045,i),0.007,0.009,""..math.ceil((i-90)*100/300/10).."  ","T")
end
_SETCOLOR(RGB(255,255,255))
REVM=REVM+((-90+limit(REVR*270,-270,270))-REVM)/6
movec(EN_X(-0.12-mtx,-0.005,REVM),EN_Y(0.20-mty,-0.005,REVM))
linec(EN_X(-0.12-mtx,-0.065,REVM),EN_Y(0.20-mty,-0.065,REVM))

_SETCOLOR(RGB(255,255,255))

movec(EN_X(-0.12-mtx,0.070,0),EN_Y(0.20-mty,0.070,0))
for i=0,360,20 do
linec(EN_X(-0.12-mtx,0.070,i),EN_Y(0.20-mty,0.070,i))
end

movec(EN_X(-0.12-mtx,0.010,0),EN_Y(0.20-mty,0.010,0))
for i=0,360,40 do
linec(EN_X(-0.12-mtx,0.010,i),EN_Y(0.20-mty,0.010,i))
end

_SETCOLOR(RGB(255,255,255))
for i=90,335,270/90*10 do
movec(EN_X(-0.12-mtx,0.055,i),EN_Y(0.20-mty,0.055,i))
linec(EN_X(-0.12-mtx,0.065,i),EN_Y(0.20-mty,0.065,i))
end
for i=105,335,270/90*10 do
movec(EN_X(-0.12-mtx,0.065,i),EN_Y(0.20-mty,0.065,i))
linec(EN_X(-0.12-mtx,0.06,i),EN_Y(0.20-mty,0.06,i))
end

for i=335,360,5 do
_SETCOLOR(RGB(255,0,0))
movec(EN_X(-0.12-mtx,0.055,i),EN_Y(0.20-mty,0.055,i))
linec(EN_X(-0.12-mtx,0.065,i),EN_Y(0.20-mty,0.065,i))

_SETCOLOR(RGB(255,255,255))
end


movec(EN_X(0.15,0.030,0),EN_Y(0.18-mty,0.030,0))
for i=0,360,20 do
linec(EN_X(0.15,0.030,i),EN_Y(0.18-mty,0.030,i))
end

_SETCOLOR(RGB(255,0,0))
movec(EN_X(0.15,0.005,-45-(1-(_FUEL()/full_fuel))*90),EN_Y(0.17-mty,0.005,-45-(_FUEL()/full_fuel)*90))
linec(EN_X(0.15,0.030,-45-(1-(_FUEL()/full_fuel))*90),EN_Y(0.17-mty,0.030,-45-(_FUEL()/full_fuel)*90))

_SETCOLOR(RGB(255,255,255))
for i=-45,-135,-45 do
movec(EN_X(0.15,0.025,i),EN_Y(0.17-mty,0.025,i))
linec(EN_X(0.15,0.030,i),EN_Y(0.17-mty,0.030,i))
end
print16seg(0.13,0.14,0.005,0.007,"FUEL","F")

print16seg(0.160,0.155,0.005,0.007,"F","F")

print16seg(0.1225,0.155,0.005,0.007,"E","F")

end

function APAD(a,b)
return
_ANALOG(0+a)/1000*b
end


do
local FSX=_X(FS)
local FSY=_Y(FS)
local FSZ=_Z(FS)
local RSX=_X(RS)
local RSY=_Y(RS)
local RSZ=_Z(RS)
local LSX=_X(LS)
local LSY=_Y(LS)
local LSZ=_Z(LS)
local TSX=_X(TS)
local TSY=_Y(TS)
local TSZ=_Z(TS)
function MF(a)
ajfps=_FPS()/30
local FX=_X(FS)-FSX
local FY=_Y(FS)-FSY
local FZ=_Z(FS)-FSZ
local RX=_X(RS)-RSX
local RY=_Y(RS)-RSY
local RZ=_Z(RS)-RSZ
local LX=_X(LS)-LSX
local LY=_Y(LS)-LSY
local LZ=_Z(LS)-LSZ
local TX=_X(TS)-TSX
local TY=_Y(TS)-TSY
local TZ=_Z(TS)-TSZ

WX=((FX*_YX(FS)+FY*_YY(FS)+FZ*_YZ(FS))-(TX*_YX(TS)+TY*_YY(TS)+TZ*_YZ(TS)))*ajfps
WY=((RX*_ZX(RS)+RY*_ZY(RS)+RZ*_ZZ(RS))-(LX*_ZX(LS)+LY*_ZY(LS)+LZ*_ZZ(LS)))*ajfps
WZ=((RX*_YX(RS)+RY*_YY(RS)+RZ*_YZ(RS))-(LX*_YX(LS)+LY*_YY(LS)+LZ*_YZ(LS)))*ajfps
VEL=((FX*_ZX(FS)+FY*_ZY(FS)+FZ*_ZZ(FS))*3.6)*ajfps
VX=((FX*_XX(FS)+FY*_XY(FS)+FZ*_XZ(FS))*3.6)*ajfps




FSX=_X(FS)
FSY=_Y(FS)
FSZ=_Z(FS)
RSX=_X(RS)
RSY=_Y(RS)
RSZ=_Z(RS)
LSX=_X(LS)
LSY=_Y(LS)
LSZ=_Z(LS)
TSX=_X(TS)
TSY=_Y(TS)
TSZ=_Z(TS)
end
end

WFL=0
do
local FL1x=_X(FLS1)
local FL1y=_Y(FLS1)
local FL1z=_Z(FLS1)
local FL2x=_X(FLS2)
local FL2y=_Y(FLS2)
local FL2z=_Z(FLS2)

function Vwheel(a)
local FL1xs=_X(FLS1)-FL1x
local FL1ys=_Y(FLS1)-FL1y
local FL1zs=_Z(FLS1)-FL1z
local FL2xs=_X(FLS2)-FL2x
local FL2ys=_Y(FLS2)-FL2y
local FL2zs=_Z(FLS2)-FL2z

WFL=((FL1xs*_XX(FLS1)+FL1ys*_XY(FLS1)+FL1xs*_XZ(FLS1))*3.6)-((FL2xs*_XX(FLS2)+FL2ys*_XY(FLS2)+FL2zs*_XZ(FLS2))*3.6)

FL1x=_X(FLS1)
FL1y=_Y(FLS1)
FL1z=_Z(FLS1)
FL2x=_X(FLS2)
FL2y=_Y(FLS2)
FL2z=_Z(FLS2)
end
end


function math.int(n)
if n>0 then n=math.floor(n) else n=math.ceil(n) end
return n
end

function RGB(r,g,b)--RGB関数 
d = math.int(r)*256^2+math.int(g)*256+math.int(b) 
return d
end 

function pn(x)
if x==0 or x==-0 then y=1 end
if x<0 then y=-1 end
if x>0 then y=1 end
return y
end

function limit(x,y,z)
 
if x<y then
x=y
end

if x>z then
x=z
end

return
x
 
end

function vector(x,z)--めーたーの付録　ベクトルの関数
c=MTP
y=-0.01
xx=(-_XX(c))*x+(-_YX(c))*y+(-_ZX(c))*z+(_X(c))
yy=(-_XY(c))*x+(-_YY(c))*y+(-_ZY(c))*z+_Y(c)
zz=(-_XZ(c))*x+(-_YZ(c))*y+(-_ZZ(c))*z+_Z(c)
return xx,yy,zz
end


function vector(x,z)--めーたーの付録　ベクトルの関数
c=MTP
y=-0.01
xx=(-_XX(c))*x+(-_YX(c))*y+(-_ZX(c))*z+(_X(c))
yy=(-_XY(c))*x+(-_YY(c))*y+(-_ZY(c))*z+_Y(c)
zz=(-_XZ(c))*x+(-_YZ(c))*y+(-_ZZ(c))*z+_Z(c)
return xx,yy,zz
end

function Runp(x,y,v,r,r2,c)
_SETCOLOR(RGB(250,250,250))
_MOVE3D(vector(EN_X(x,0.01,0),EN_Y(y,0.01,0)))
for i=0,360,45 do
_LINE3D(vector(EN_X(x,0.01,i),EN_Y(y,0.01,i)))
end
_SETCOLOR(c)
if v>=r and v<=r2 then
for i=0,360,15 do
_MOVE3D(vector(EN_X(x,0.008,i),EN_Y(y,0.008,i)))
_LINE3D(vector(EN_X(x,0.008,-i),EN_Y(y,0.008,-i)))
end
end
_SETCOLOR(RGB(255,255,255))
end

TEST_NUMBER=0
function sL_16(s,x,y,xs,ys)
--これは文字リストです　文字を追加する場合ココにも文字を追加してください
WORD_LIST={
"A","B","C","D","E","F","G","H","I","J",
"K","L","M","N","O","P","Q","R","S","T",
"U","V","W","X","Y","Z","a","b","c","d",
"e","f","g","h","i","j","k","l","m","n",
"o","p","q","r","s","t","u","v","w","x",
"y","z","1","2","3","4","5","6","7","8",
"9","0","_","."," ","-","/",".",","
}
--文字ﾃﾞｰﾀです　ｎ〜 というように配列を追加し１６のビットﾃﾞｰﾀーで文字を構成してください
nA={1,1 ,1,0,0,0,1 ,1,1 ,1,0,0,0,1 ,0,0}nB={1,1 ,0,0,1,0,1 ,0,1 ,0,0,1,0,1 ,1,1}
nC={1,1 ,1,0,0,0,0 ,0,0 ,1,0,0,0,0 ,1,1}nD={1,1 ,0,0,1,0,1 ,0,0 ,0,0,1,0,1 ,1,1}
nE={1,1 ,1,0,0,0,0 ,1,0 ,1,0,0,0,0 ,1,1}nF={1,1 ,1,0,0,0,0 ,1,0 ,1,0,0,0,0 ,0,0}
nG={1,1 ,1,0,0,0,0 ,0,0 ,1,0,0,0,1 ,1,1}nH={0,0 ,1,0,0,0,1 ,1,1 ,1,0,0,0,1 ,0,0}
nI={1,1 ,0,0,1,0,0 ,0,0 ,0,0,1,0,0 ,1,1}nJ={0,0 ,0,0,0,0,1 ,0,0 ,1,0,0,0,1 ,1,1}
nK={0,0 ,1,0,0,1,0 ,1,0 ,1,0,0,1,0 ,0,0}nL={0,0 ,1,0,0,0,0 ,0,0 ,1,0,0,0,0 ,1,1}
nN={0,0 ,1,1,0,0,1 ,0,0 ,1,0,0,1,1 ,0,0}nM={0,0 ,1,1,0,1,1 ,0,0 ,1,0,0,0,1 ,0,0}
nO={1,1 ,1,0,0,0,1 ,0,0 ,1,0,0,0,1 ,1,1}nP={1,1 ,1,0,0,0,1 ,1,1 ,1,0,0,0,0 ,0,0}
nQ={1,1 ,1,0,0,0,1 ,0,0 ,1,0,0,1,1 ,1,1}nR={1,1 ,1,0,0,0,1 ,1,1 ,1,0,0,1,0 ,0,0}
nS={1,1 ,1,0,0,0,0 ,1,1 ,0,0,0,0,1 ,1,1}nT={1,1 ,0,0,1,0,0 ,0,0 ,0,0,1,0,0 ,0,0}
nU={0,0 ,1,0,0,0,1 ,0,0 ,1,0,0,0,1 ,1,1}nV={0,0 ,1,0,0,1,0 ,0,0 ,1,1,0,0,0 ,0,0}
nW={0,0 ,1,0,0,0,1 ,0,0 ,1,1,0,1,1 ,0,0}nX={0,0 ,0,1,0,1,0 ,0,0 ,0,1,0,1,0 ,0,0}
nY={0,0 ,1,0,0,0,1 ,1,1 ,0,0,1,0,0 ,0,0}nZ={1,1 ,0,0,0,1,0 ,0,0 ,0,1,0,0,0 ,1,1}

na={0,0 ,0,0,0,0,0 ,1,0 ,1,0,1,0,0 ,1,1}nb={0,0 ,1,0,0,0,0 ,1,0 ,1,0,1,0,0 ,1,0}
nc={0,0 ,0,0,0,0,0 ,1,0 ,1,0,0,0,0 ,1,0}nd={0,0 ,0,0,1,0,0 ,1,0 ,1,0,1,0,0 ,1,0}
ne={0,0 ,0,0,0,0,0 ,1,0 ,1,1,0,0,0 ,1,0}nf={0,1 ,0,0,1,0,0 ,1,1 ,0,0,1,0,0 ,0,0}
ng={1,0 ,1,0,1,0,0 ,1,0 ,0,0,1,0,0 ,1,0}nh={0,0 ,1,0,0,0,0 ,1,0 ,1,0,1,0,0 ,0,0}
ni={1,0 ,0,0,0,0,0 ,0,0 ,1,0,0,0,0 ,0,0}nj={0,0 ,0,0,1,0,0 ,0,0 ,1,0,1,0,0 ,1,0}
nk={0,0 ,0,0,1,0,0 ,0,1 ,0,0,1,1,0 ,0,0}nl={0,0 ,0,0,1,0,0 ,0,0 ,0,0,1,0,0 ,0,0}
nn={0,0 ,0,0,0,0,0 ,1,1 ,1,0,0,0,1 ,0,0}nm={0,0 ,0,0,0,0,0 ,1,1 ,1,0,1,0,1 ,0,0}
no={0,0 ,0,0,0,0,0 ,1,0 ,1,0,1,0,0 ,1,0}np={1,0 ,1,0,1,0,0 ,1,0 ,1,0,0,0,0 ,0,0}
nq={1,0 ,1,0,1,0,0 ,1,0 ,0,0,1,0,0 ,0,0}nr={0,0 ,0,0,0,0,0 ,1,0 ,1,0,0,0,0 ,0,0}
ns={0,0 ,0,0,0,0,0 ,0,1 ,0,0,0,1,0 ,1,1}nt={0,0 ,0,0,1,0,0 ,1,1 ,0,0,1,0,0 ,0,1}
nu={0,0 ,0,0,0,0,0 ,0,0 ,1,0,1,0,0 ,1,0}nv={0,0 ,0,0,0,0,0 ,0,0 ,1,1,0,0,0 ,0,0}
nw={0,0 ,0,0,0,0,0 ,0,0 ,1,1,0,1,1 ,0,0}nx={0,0 ,0,1,0,1,0 ,0,0 ,0,1,0,1,0 ,0,0}
ny={0,0 ,1,0,1,0,0 ,1,0 ,0,0,1,0,0 ,1,0}nz={0,0 ,0,0,0,0,0 ,1,0 ,0,1,0,0,0 ,1,0}

n1={0,0 ,0,0,0,1,1 ,0,0 ,0,0,0,0,1 ,0,0}n2={1,1 ,0,0,0,0,1 ,0,1 ,0,1,0,0,0 ,1,1}
n3={1,1 ,0,0,0,1,0 ,0,0 ,0,0,0,1,0 ,1,1}n4={0,0 ,1,0,1,0,0 ,1,1 ,0,0,1,0,0 ,0,0}
n5={1,1 ,1,0,0,0,0 ,1,0 ,0,0,0,1,0 ,1,1}n6={1,1 ,1,0,0,0,0 ,1,1 ,1,0,0,0,1 ,1,1}
n7={1,1 ,0,0,0,1,0 ,0,0 ,0,1,0,0,0 ,0,0}n8={1,1 ,1,0,0,0,1 ,1,1 ,1,0,0,0,1 ,1,1}
n9={1,1 ,1,0,0,0,1 ,1,1 ,0,0,0,0,1 ,0,1}n0={1,1 ,1,0,0,1,1 ,0,0 ,1,1,0,0,1 ,1,1}

n_={0,0 ,0,0,0,0,0 ,0,0 ,0,0,0,0,0 ,1,1}

nM1={0,0 ,0,0,0,0,0 ,0,0 ,0,0,0,0,0 ,0,0}nM2={0,0 ,0,0,0,0,0 ,1,1 ,0,0,0,0,0 ,0,0}
nM3={0,0 ,0,0,0,1,0 ,0,0 ,0,1,0,0,0 ,0,0}nM4={0,0 ,0,0,0,0,0 ,0,0 ,0,0,0,1,0 ,0,0}
nM5={0,0 ,0,0,0,0,0 ,0,0 ,0,1,0,0,0 ,0,0}

--登録されていない文字の場合はﾌﾙﾋﾞｯﾄを出力します
nan_know={1,1 ,1,1,1,1,1 ,1,1 ,1,1,1,1,1 ,1,1}

--s2に引数のﾃﾞｰﾀを代入します
s2=s

--文字リストの数だけforし文字検索をします
for i=0,69,1 do
	--見つかるとそのままﾌﾞﾚｲｸします
	if s2==WORD_LIST[i] then break end

	--もし見つからなかった場合はs2に"an_know"を代入します
	if i==89 then s2="an_know" end
end

if s==" " then s2="M1" end
if s=="-" then s2="M2" end
if s=="/" then s2="M3" end
if s=="." then s2="M4" end
if s=="," then s2="M5" end


if _G["n"..s2][1]==1 then
_MOVE3D(vector(x+0*xs,y+1*ys))
_LINE3D(vector(x+0.5*xs,y+1*ys))
end

if _G["n"..s2][2]==1 then
_MOVE3D(vector(x+0.5*xs,y+1*ys))
_LINE3D(vector(x+1*xs,y+1*ys))
end
if _G["n"..s2][3]==1 then
_MOVE3D(vector(x+0*xs,y+1*ys))
_LINE3D(vector(x+0*xs,y+0.5*ys))
end
if _G["n"..s2][4]==1 then
_MOVE3D(vector(x+0*xs,y+1*ys))
_LINE3D(vector(x+0.5*xs,y+0.5*ys))
end
if _G["n"..s2][5]==1 then
_MOVE3D(vector(x+0.5*xs,y+1*ys))
_LINE3D(vector(x+0.5*xs,y+0.5*ys))
end
if _G["n"..s2][6]==1 then
_MOVE3D(vector(x+1*xs,y+1*ys))
_LINE3D(vector(x+0.5*xs,y+0.5*ys))
end
if _G["n"..s2][7]==1 then
_MOVE3D(vector(x+1*xs,y+1*ys))
_LINE3D(vector(x+1*xs,y+0.5*ys))
end
if _G["n"..s2][8]==1 then
_MOVE3D(vector(x+0*xs,y+0.5*ys))
_LINE3D(vector(x+0.5*xs,y+0.5*ys))
end
if _G["n"..s2][9]==1 then
_MOVE3D(vector(x+1*xs,y+0.5*ys))
_LINE3D(vector(x+0.5*xs,y+0.5*ys))
end
if _G["n"..s2][10]==1 then
_MOVE3D(vector(x+0*xs,y+0.5*ys))
_LINE3D(vector(x+0*xs,y+0*ys))
end
if _G["n"..s2][11]==1 then
_MOVE3D(vector(x+0*xs,y+0*ys))
_LINE3D(vector(x+0.5*xs,y+0.5*ys))
end
if _G["n"..s2][12]==1 then
_MOVE3D(vector(x+0.5*xs,y+0.5*ys))
_LINE3D(vector(x+0.5*xs,y+0*ys))
end
if _G["n"..s2][13]==1 then
_MOVE3D(vector(x+0.5*xs,y+0.5*ys))
_LINE3D(vector(x+1*xs,y+0*ys))
end
if _G["n"..s2][14]==1 then
_MOVE3D(vector(x+1*xs,y+0*ys))
_LINE3D(vector(x+1*xs,y+0.5*ys))
end
if _G["n"..s2][15]==1 then
_MOVE3D(vector(x+0*xs,y+0*ys))
_LINE3D(vector(x+0.5*xs,y+0*ys))
end
if _G["n"..s2][16]==1 then
_MOVE3D(vector(x+1*xs,y+0*ys))
_LINE3D(vector(x+0.5*xs,y+0*ys))
end

end

function print16seg(x,y,xs,ys,ww,senter)

wl=string.len(ww)
setx=0
for i=1,wl,1 do

if senter=="T" then
setx=-wl-(xs*1.5)
end
sL_16(string.sub(ww,i,i),x+((setx+i)*(xs*1.5)),y,xs,ys)
end

end

rogx=1
brog={}
averogx=0
speed_ave=0
function rog(a)
averogx=averogx+a*30*20
--[[
brog[rogx]=a

_MOVE2D(-1,brog[1])
for i=2,rogx,1 do
_LINE2D(-1+i/1000,brog[i])
end
--]]
rogx=rogx+1
out(3,averogx/rogx)
speed_ave=averogx/rogx
end

function NO_P(c,v)
s={}
s[3]=math.int(c/100)
s[2]=math.int(c/10)-math.int(c/100)*10
s[1]=math.int(c)-math.int(c/10)*10-math.int(c/100)
return s[v]
end

function EN_X(a,b,c)  --円周上のX座標を出力　EN_X()　まあ　えん＿ｘ　って感じで
return
a+b*math.cos(math.pi/180*c)
end

function EN_Y(a,b,c)　--円周上のY座標を出力
return
a-b*math.sin(math.pi/180*c)
end
function linec(x,y)
_LINE3D(vector(x,y))
end

function movec(x,y)
_MOVE3D(vector(x,y))
end
--[[


WheelVEL=((0.3*2*math.pi*(math.deg(RRL)/360)*3.6)+(0.3*2*math.pi*(math.deg(RRR)/360)*3.6))/2
TCS=(WheelVEL-VEL*30)
]]}
