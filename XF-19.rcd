// [RCD] 
Val
{
	P(default=0, min=-10000000000, max=10000000000)
	R(default=0, min=-90, max=90)
	V(default=0, min=-90, max=90)
}
Key
{
}
Body
{
	Core() {
		W:Cowl(option=1, effect=#F0FB, option=1, name=LS) { }
		E:Cowl(option=1, effect=#F0FB, option=1, name=RS) { }
		S:Cowl(option=1, effect=#F0FB, option=1, name=TS) { }
		N:Cowl(option=1, effect=#F0FB, option=1, name=FS) { }
		N:Weight(angle=180) { }
		S:Chip() {
			S:Chip() {
				S:Chip(angle=-V) { }
				S:Trim(angle=90) {
					N:Jet(angle=90, power=P) {
						S:Jet(power=P) { }
					}
				}
			}
			E:Chip() {
				S:Chip(angle=R) { }
				E:Chip() { }
			}
			W:Chip() {
				S:Chip(angle=-R) { }
				W:Chip() { }
			}
		}
		S:Trim(angle=90) { }
	}
}
Lua
{
require("daretoku_taka/xgui.lua")
require("daretoku_taka/xhud2.lua")
require("daretoku_taka/libccvx3.lua")
require("daretoku_taka/libresume.lua")
require("daretoku_taka/libgun.lua")
require("daretoku_taka/libweapon.lua")

_limitlist={1500,1800,2000,2200,2500,64512}

_prvtbl = InitPRVTable()

_prvtbl.p.limit = 400000
_prvtbl.p.step  = 200000

_prvtbl.r.tgt = 360
_prvtbl.r.kp  = 4
_prvtbl.r.ki  = 4
_prvtbl.r.kd  = 4
_prvtbl.r.il  = 10

_prvtbl.v.tgt = 180
_prvtbl.v.kp  = 2
_prvtbl.v.ki  = 2
_prvtbl.v.kd  = 2
_prvtbl.v.il  = 10

local inited = false

_mv=0
_my=0

function OnFrame()
	if not inited then
		CCVXOnInit()
		inited = true
	end

	CCVXOnFrame(true)
	
	out(0,string.format("%.3f km/h @ %.2f m", _mv*3.6, _my))
	
	if _mv < _VEL(0) then
		_mv = _VEL(0)
		_my = _Y(0)
	end
	
	ShowSplash("XF-19 Stratosphere-II")
	
	local p,r,v,b = GetPRVBAnalog(_prvtbl,{p=P,b=0})
	
	P=p
	R=r
	V=v
	
	local dv = math.rad(-_NORMANALOG(1)*180/30)
	local dy = math.rad((_KEY(5)-_KEY(4))*60/30)
	
	if _gf == 0 then dy = dy * 2 end
	
	CheckLimit()
	
	XHUD.Draw()
	
	Weapon.Stat()
end
}
