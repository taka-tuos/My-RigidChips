// [RCD] 
Val
{
	ELON(default=0, min=-12, max=12, step=4)
	EVTR(default=0, min=-18, max=18, step=4)
	GUN1(default=0, max=16777216, step=16777216)
	GUN2(default=0, max=16777216, step=16777216)
	GUN3(default=0, max=16777216, step=16777216)
	GUN4(default=0, max=16777216, step=16777216)
	JET(default=0, max=307200, step=65536)
}
Key
{
	0:EVTR(step=-4)
	1:EVTR(step=4)
	2:ELON(step=-4)
	3:ELON(step=4)
	4:JET(step=65536)
	5:GUN(step=16777216)
}
Body
{
	Core() {
		N:Frame() {
			N:TrimF(angle=180, option=0) {
				N:Frame(angle=-90) {
					N:Weight(angle=-90, option=1) {
						N:Chip() {
							N:Chip() {
								N:Chip(name=MB) {
									N:Chip() {
										N:Chip() {
											N:Chip() {
												N:Chip() {
													E:Chip(angle=-160) {
														E:Chip(angle=160) {
															W:Trim(angle=-EVTR) {
																N:Cowl(angle=-175) { }
																E:Frame(option=1) {
																	S:Frame(option=1) {
																		W:Rudder(angle=20) {
																			S:Cowl(angle=-175) { }
																			W:Chip(option=5) {
																				S:Cowl(angle=-175) { }
																			}
																		}
																	}
																}
																W:Chip(option=5) {
																	N:Cowl(angle=-175) { }
																}
															}
															E:Trim(angle=EVTR) {
																N:Cowl(angle=-175) { }
																W:Frame(option=1) {
																	S:Frame(option=1) {
																		E:Rudder(angle=-20) {
																			S:Cowl(angle=-175) { }
																			E:Chip(option=5) {
																				S:Cowl(angle=-175) { }
																			}
																		}
																	}
																}
																E:Chip(option=5) {
																	N:Cowl(angle=-175) { }
																}
															}
														}
													}
													W:Chip(angle=-160) {
														W:Chip(angle=160) { }
													}
												}
											}
										}
										N:Frame(angle=-20) {
											N:Chip(angle=20) { }
										}
										E:Chip(angle=-160) {
											E:Chip(angle=160) {
												W:Trim(angle=-ELON) {
													W:Chip() {
														W:Chip() {
															N:Cowl(angle=-175) { }
															S:RudderF(angle=-45, option=1) {
																N:Cowl() {
																	W:Cowl(angle=-175) { }
																}
																S:Cowl() {
																	W:Cowl(angle=-175) {
																		W:Cowl(angle=-10) {
																			N:Cowl() { }
																		}
																		N:Cowl() { }
																	}
																	S:Cowl() {
																		W:Cowl(angle=-175) {
																			W:Cowl(angle=-10) { }
																		}
																		S:Cowl() { }
																	}
																}
															}
														}
														N:Cowl(angle=-175) {
															N:Cowl(angle=-10) {
																E:Cowl() { }
															}
															E:Cowl() { }
														}
													}
												}
												W:Frame(option=1) { }
												E:Frame(option=1) { }
											}
										}
										W:Chip(angle=-160) {
											W:Chip(angle=160) {
												E:Trim(angle=-ELON) {
													E:Chip() {
														E:Chip() {
															N:Cowl(angle=-175) { }
															S:RudderF(angle=45, option=1) {
																N:Cowl() {
																	E:Cowl(angle=-175) { }
																}
																S:Cowl() {
																	E:Cowl(angle=-175) {
																		E:Cowl(angle=-10) {
																			N:Cowl() { }
																		}
																		N:Cowl() { }
																	}
																	S:Cowl() {
																		E:Cowl(angle=-175) {
																			E:Cowl(angle=-10) { }
																		}
																		S:Cowl() { }
																	}
																}
															}
														}
													}
													N:Cowl(angle=-175) {
														N:Cowl(angle=-10) {
															E:Cowl() { }
														}
														E:Cowl() { }
													}
												}
											}
										}
										N:RudderF(angle=45, option=1) {
											N:RudderF(angle=-45, option=1) {
												S:RudderF(angle=45, option=1) { }
												S:Frame(angle=-130) {
													E:Frame(angle=-90, option=1) {
														S:Chip() {
															S:Chip(option=5) {
																W:Cowl(angle=175) { }
																W:Cowl(angle=-175) { }
															}
															E:RudderF(angle=40, option=1) {
																S:Cowl() {
																	N:Cowl() {
																		E:Cowl(angle=175) { }
																		E:Cowl(angle=-175) { }
																	}
																	E:Cowl(angle=175) { }
																	E:Cowl(angle=-175) { }
																}
															}
															W:Cowl(angle=175) { }
															W:Cowl(angle=-175) { }
														}
													}
													S:Jet(angle=-140, power=JET) { }
												}
											}
										}
										N:RudderF(angle=-45, option=1) {
											N:RudderF(angle=45, option=1) {
												S:Frame(angle=-130) {
													W:Frame(angle=-90, option=1) {
														S:Chip() {
															S:Chip() {
																E:Cowl(angle=175) { }
																E:Cowl(angle=-175) { }
															}
															W:RudderF(angle=-40, option=1) {
																S:Cowl() {
																	N:Cowl() {
																		W:Cowl(angle=175) { }
																		W:Cowl(angle=-175) { }
																	}
																	W:Cowl(angle=175) { }
																	W:Cowl(angle=-175) { }
																}
															}
															E:Cowl(angle=175) { }
															E:Cowl(angle=-175) { }
														}
													}
													S:Jet(angle=-140, power=JET) { }
												}
											}
										}
									}
								}
							}
						}
						E:RudderF(angle=45, option=1) {
							W:RudderF(angle=45, option=1) {
								E:Cowl(angle=170) {
									E:Cowl(angle=10) {
										E:Cowl() {
											E:Cowl() {
												N:Cowl(angle=90) {
													E:Cowl(angle=5) {
														E:Cowl() {
															S:Cowl(angle=90) { }
														}
														S:Cowl(angle=90) { }
													}
												}
											}
											N:Cowl(angle=90) { }
										}
										N:Cowl(angle=90) { }
									}
									N:Cowl(angle=90) { }
								}
								E:Frame(angle=-90, option=1) {
									E:Frame(angle=-90, option=1) {
										W:Cowl(angle=170) {
											W:Cowl(angle=10) {
												W:Cowl(angle=3) {
													W:Cowl() {
														N:Cowl(angle=85) {
															W:Cowl(angle=5) {
																W:Cowl() {
																	S:Cowl(angle=85) { }
																}
																S:Cowl(angle=85) { }
															}
														}
													}
													N:Cowl(angle=85) { }
												}
												N:Cowl(angle=85) { }
											}
											N:Cowl(angle=85) { }
										}
									}
								}
							}
						}
						W:RudderF(angle=-45, option=1) {
							E:RudderF(angle=-45, option=1) {
								W:Cowl(angle=170) {
									W:Cowl(angle=10) {
										W:Cowl() {
											W:Cowl() {
												N:Cowl(angle=90) {
													W:Cowl(angle=5) {
														W:Cowl() {
															S:Cowl(angle=90) { }
														}
														S:Cowl(angle=90) { }
													}
												}
											}
											N:Cowl(angle=90) { }
										}
										N:Cowl(angle=90) { }
									}
									N:Cowl(angle=90) { }
								}
								W:Frame(angle=-90, option=1) {
									W:Frame(angle=-90, option=1) {
										E:Cowl(angle=170) {
											E:Cowl(angle=10) {
												E:Cowl(angle=3) {
													E:Cowl() {
														N:Cowl(angle=85) {
															E:Cowl(angle=5) {
																E:Cowl() {
																	S:Cowl(angle=85) { }
																}
																S:Cowl(angle=85) { }
															}
														}
													}
													N:Cowl(angle=85) { }
												}
												N:Cowl(angle=85) { }
											}
											N:Cowl(angle=85) { }
										}
									}
								}
							}
						}
						S:Cowl() {
							S:Cowl(angle=-30) {
								S:Cowl(angle=-120) {
									S:Cowl(angle=-30) {
										S:Cowl(angle=0) {
											E:Cowl(angle=-90) { }
											W:Cowl(angle=-90) { }
										}
										E:Cowl(angle=-90) { }
										W:Cowl(angle=-90) { }
										S:Cowl(angle=30, color=0) {
											S:Cowl(angle=-30, color=0) {
												S:Cowl(angle=-8, color=0) {
													W:Cowl(angle=-95, color=0) { }
													E:Cowl(angle=-95, color=0) { }
													S:Cowl(angle=-8, color=0) {
														W:Cowl(angle=-95, color=0) { }
														E:Cowl(angle=-95, color=0) { }
													}
												}
												W:Cowl(angle=-95, color=0) { }
												E:Cowl(angle=-95, color=0) { }
											}
											W:Cowl(angle=-95, color=0) { }
											E:Cowl(angle=-95, color=0) { }
										}
									}
									W:Cowl(angle=-92, option=4) { }
									E:Cowl(angle=-92, option=3) { }
								}
								W:Cowl(angle=-92, option=3) { }
								E:Cowl(angle=-92, option=4) { }
							}
						}
						S:Arm(power=GUN4, option=50000) { }
					}
					S:Arm(angle=90, power=GUN1, option=50000) { }
					W:Arm(angle=90, power=GUN2, option=50000) { }
					E:Arm(angle=90, power=GUN3, option=50000) { }
				}
			}
		}
	}
}
Lua
{
function _VEL(n)
	return _LEN3( _VX(n), _VY(n), _VZ(n))
end

function _LEN3(a,b,c)
	return math.sqrt(a * a + b * b + c * c)
end

function draw_box(x,y,s)
	--ç∂ÇÃècê¸
	_MOVE2D(x,y)
	_LINE2D(x,y-s)

	--âEÇÃècê¸
	_MOVE2D(x+s,y)
	_LINE2D(x+s,y-s)

	--è„ÇÃâ°ê¸
	_MOVE2D(x,y)
	_LINE2D(x+s,y)

	--â∫ÇÃâ°ê¸
	_MOVE2D(x,y-s)
	_LINE2D(x+s,y-s)
end


function pointget_t(p,loop)
	local px=_PLAYERX(p)
	local py=_PLAYERY(p)
	local pz=_PLAYERZ(p)
	local i
	
	local sel={
		x_min=px,
		x_max=px,
	
		y_min=py,
		y_max=py,
	
		z_min=pz,
		z_max=pz
	}
	
	for i=1,loop do
		px=_PLAYERX(p)
		
		py=_PLAYERY(p)
		
		pz=_PLAYERZ(p)
		
		sel.x_min=math.min(px,sel.x_min)
		sel.x_max=math.max(px,sel.x_max)
	
		sel.y_min=math.min(py,sel.y_min)
		sel.y_max=math.max(py,sel.y_max)
		
		sel.z_min=math.min(pz,sel.z_min)
		sel.z_max=math.max(pz,sel.z_max)
	end
	
	px=(sel.x_min+sel.x_max)/2
	py=(sel.y_min+sel.y_max)/2
	pz=(sel.z_min+sel.z_max)/2
	
	return px,py,pz
end



draw_num7={
[0]=function(x,y,s)
	--ç∂ÇÃècê¸
	_MOVE2D(x,y)
	_LINE2D(x,y-s)

	--âEÇÃècê¸
	_MOVE2D(x+s/2,y)
	_LINE2D(x+s/2,y-s)

	--è„ÇÃâ°ê¸
	_MOVE2D(x,y)
	_LINE2D(x+s/2,y)

	--â∫ÇÃâ°ê¸
	_MOVE2D(x,y-s)
	_LINE2D(x+s/2,y-s)
end,
[1]=function(x,y,s)
	--âEÇÃècê¸
	_MOVE2D(x+s/2,y)
	_LINE2D(x+s/2,y-s)
end,
[2]=function(x,y,s)
	--ç∂ÇÃècê¸
	_MOVE2D(x,y-s/2)
	_LINE2D(x,y-s)

	--âEÇÃècê¸
	_MOVE2D(x+s/2,y)
	_LINE2D(x+s/2,y-s/2)

	--è„ÇÃâ°ê¸
	_MOVE2D(x,y)
	_LINE2D(x+s/2,y)

	--ê^ÇÒíÜÇÃâ°ê¸
	_MOVE2D(x,y-s/2)
	_LINE2D(x+s/2,y-s/2)

	--â∫ÇÃâ°ê¸
	_MOVE2D(x,y-s)
	_LINE2D(x+s/2,y-s)
end,
[3]=function(x,y,s)
	--âEÇÃècê¸
	_MOVE2D(x+s/2,y)
	_LINE2D(x+s/2,y-s)

	--è„ÇÃâ°ê¸
	_MOVE2D(x,y)
	_LINE2D(x+s/2,y)

	--ê^ÇÒíÜÇÃâ°ê¸
	_MOVE2D(x,y-s/2)
	_LINE2D(x+s/2,y-s/2)

	--â∫ÇÃâ°ê¸
	_MOVE2D(x,y-s)
	_LINE2D(x+s/2,y-s)
end,
[4]=function(x,y,s)
	--ç∂ÇÃècê¸
	_MOVE2D(x,y)
	_LINE2D(x,y-s/2)

	--âEÇÃècê¸
	_MOVE2D(x+s/2,y)
	_LINE2D(x+s/2,y-s)

	--ê^ÇÒíÜÇÃâ°ê¸
	_MOVE2D(x,y-s/2)
	_LINE2D(x+s/2,y-s/2)
end,
[5]=function(x,y,s)
	--ç∂ÇÃècê¸
	_MOVE2D(x,y)
	_LINE2D(x,y-s/2)

	--âEÇÃècê¸
	_MOVE2D(x+s/2,y-s/2)
	_LINE2D(x+s/2,y-s)

	--è„ÇÃâ°ê¸
	_MOVE2D(x,y)
	_LINE2D(x+s/2,y)

	--ê^ÇÒíÜÇÃâ°ê¸
	_MOVE2D(x,y-s/2)
	_LINE2D(x+s/2,y-s/2)

	--â∫ÇÃâ°ê¸
	_MOVE2D(x,y-s)
	_LINE2D(x+s/2,y-s)
end,
[6]=function(x,y,s)
	--ç∂ÇÃècê¸
	_MOVE2D(x,y)
	_LINE2D(x,y-s)

	--âEÇÃècê¸
	_MOVE2D(x+s/2,y-s/2)
	_LINE2D(x+s/2,y-s)

	--è„ÇÃâ°ê¸
	_MOVE2D(x,y)
	_LINE2D(x+s/2,y)

	--ê^ÇÒíÜÇÃâ°ê¸
	_MOVE2D(x,y-s/2)
	_LINE2D(x+s/2,y-s/2)

	--â∫ÇÃâ°ê¸
	_MOVE2D(x,y-s)
	_LINE2D(x+s/2,y-s)
end,
[7]=function(x,y,s)
	--âEÇÃècê¸
	_MOVE2D(x+s/2,y)
	_LINE2D(x+s/2,y-s)

	--è„ÇÃâ°ê¸
	_MOVE2D(x,y)
	_LINE2D(x+s/2,y)
end,
[8]=function(x,y,s)
	--ç∂ÇÃècê¸
	_MOVE2D(x,y)
	_LINE2D(x,y-s)

	--âEÇÃècê¸
	_MOVE2D(x+s/2,y)
	_LINE2D(x+s/2,y-s)

	--è„ÇÃâ°ê¸
	_MOVE2D(x,y)
	_LINE2D(x+s/2,y)

	--ê^ÇÒíÜÇÃâ°ê¸
	_MOVE2D(x,y-s/2)
	_LINE2D(x+s/2,y-s/2)

	--â∫ÇÃâ°ê¸
	_MOVE2D(x,y-s)
	_LINE2D(x+s/2,y-s)
end,
[9]=function(x,y,s)
	--ç∂ÇÃècê¸
	_MOVE2D(x,y)
	_LINE2D(x,y-s/2)

	--âEÇÃècê¸
	_MOVE2D(x+s/2,y)
	_LINE2D(x+s/2,y-s)

	--è„ÇÃâ°ê¸
	_MOVE2D(x,y)
	_LINE2D(x+s/2,y)

	--ê^ÇÒíÜÇÃâ°ê¸
	_MOVE2D(x,y-s/2)
	_LINE2D(x+s/2,y-s/2)

	--â∫ÇÃâ°ê¸
	_MOVE2D(x,y-s)
	_LINE2D(x+s/2,y-s)
end,
}

NGUN = 1
bs = 8

function box3d(ex,ey,ez,llen)
	_MOVE3D(ex - llen, ey - llen, ez - llen)
	_LINE3D(ex + llen, ey - llen, ez - llen)
	_MOVE3D(ex - llen, ey + llen, ez - llen)
	_LINE3D(ex + llen, ey + llen, ez - llen)
	
	_MOVE3D(ex - llen, ey - llen, ez - llen)
	_LINE3D(ex - llen, ey + llen, ez - llen)
	_MOVE3D(ex + llen, ey - llen, ez - llen)
	_LINE3D(ex + llen, ey + llen, ez - llen)
	
	
	_MOVE3D(ex - llen, ey - llen, ez + llen)
	_LINE3D(ex + llen, ey - llen, ez + llen)
	_MOVE3D(ex - llen, ey + llen, ez + llen)
	_LINE3D(ex + llen, ey + llen, ez + llen)
	
	_MOVE3D(ex - llen, ey - llen, ez + llen)
	_LINE3D(ex - llen, ey + llen, ez + llen)
	_MOVE3D(ex + llen, ey - llen, ez + llen)
	_LINE3D(ex + llen, ey + llen, ez + llen)
	
	
	_MOVE3D(ex - llen, ey - llen, ez + llen)
	_LINE3D(ex - llen, ey - llen, ez - llen)
	_MOVE3D(ex - llen, ey + llen, ez + llen)
	_LINE3D(ex - llen, ey + llen, ez - llen)
	_MOVE3D(ex + llen, ey - llen, ez + llen)
	_LINE3D(ex + llen, ey - llen, ez - llen)
	_MOVE3D(ex + llen, ey + llen, ez + llen)
	_LINE3D(ex + llen, ey + llen, ez - llen)
end
--[[
function ramiel3d(ex,ey,ez,llen)
	_MOVE3D(ex, ey + llen / 2, ez)
	_LINE3D(ex + llen, ey, ez - llen)
	_MOVE3D(ex, ey + llen / 2, ez)
	_LINE3D(ex - llen, ey, ez - llen)
	_MOVE3D(ex, ey + llen / 2, ez)
	_LINE3D(ex + llen, ey, ez + llen)
	_MOVE3D(ex, ey + llen / 2, ez)
	_LINE3D(ex - llen, ey, ez + llen)
	
	_MOVE3D(ex, ey - llen / 2, ez)
	_LINE3D(ex + llen, ey, ez - llen)
	_MOVE3D(ex, ey - llen / 2, ez)
	_LINE3D(ex - llen, ey, ez - llen)
	_MOVE3D(ex, ey - llen / 2, ez)
	_LINE3D(ex + llen, ey, ez + llen)
	_MOVE3D(ex, ey - llen / 2, ez)
	_LINE3D(ex - llen, ey, ez + llen)
	
	_MOVE3D(ex - llen, ey, ez + llen)
	_LINE3D(ex - llen, ey, ez - llen)
	_MOVE3D(ex + llen, ey, ez + llen)
	_LINE3D(ex + llen, ey, ez - llen)
	_MOVE3D(ex - llen, ey, ez - llen)
	_LINE3D(ex + llen, ey, ez - llen)
	_MOVE3D(ex - llen, ey, ez + llen)
	_LINE3D(ex + llen, ey, ez + llen)
end
]]--

RDCL = 8

function ramiel3d(ex,ey,ez,llen)
	_MOVE3D(math.cos((math.pi*2/RDCL))*llen+ex,math.sin((math.pi*2/RDCL))*llen+ey,ez)
	for i=0,RDCL do
		_LINE3D(math.cos((math.pi*2/RDCL)*i)*llen+ex,math.sin((math.pi*2/RDCL)*i)*llen+ey,ez)
	end
	
	_MOVE3D(ex,math.cos((math.pi*2/RDCL))*llen+ey,math.sin((math.pi*2/RDCL))*llen+ez)
	for i=0,RDCL do
		_LINE3D(ex,math.cos((math.pi*2/RDCL)*i)*llen+ey,math.sin((math.pi*2/RDCL)*i)*llen+ez)
	end
	
	_MOVE3D(ex,math.cos((math.pi*2/RDCL))*llen+ey,math.sin((math.pi*2/RDCL))*llen+ez)
	for i=0,RDCL do
		_LINE3D(math.cos((math.pi*2/RDCL)*i)*llen+ex,ey,math.sin((math.pi*2/RDCL)*i)*llen+ez)
	end
end


function rot3d(px,py,pz,pr,ax)
	if ax == 0 then
		rz = py * math.cos(pr) - pz * math.sin(pr)
		ry = py * math.sin(pr) + pz * math.cos(pr)
		rx = px
	elseif ax == 1 then
		rx = px * math.cos(pr) + pz * math.sin(pr)
		rz = pz * math.cos(pr) - px * math.sin(pr)
		ry = py
	elseif ax == 2 then
		rx = px * math.cos(pr) - py * math.sin(pr)
		ry = px * math.sin(pr) + py * math.cos(pr)
		rz = pz
	end
	
	return rx,ry,rz
end

function dmiso(mbx,mby,mbz,rx,ry,rz,yx,yy,yz,xm,ym,zm)
	_SETCOLOR(16777215)
	
	r1x,r1y,r1z = rx-xm,ry-ym,rz-zm
	r2x,r2y,r2z = rx+xm,ry+ym,rz+zm
	
	_MOVE3D(r1x+mbx,r1y+mby,r1z+mbz)
	_LINE3D(r2x+mbx,r2y+mby,r2z+mbz)
	
	_MOVE3D(r1x+rx*0.2+mbx,r1y+ry*0.2+mby,r1z+rz*0.2+mbz)
	_LINE3D(r2x+rx*0.2+mbx,r2y+ry*0.2+mby,r2z+rz*0.2+mbz)
	
	_MOVE3D(r1x+yx*0.2+mbx,r1y+yy*0.2+mby,r1z+yz*0.2+mbz)
	_LINE3D(r2x+yx*0.2+mbx,r2y+yy*0.2+mby,r2z+yz*0.2+mbz)
	
	_MOVE3D(r1x+yx*0.2+rx*0.2+mbx,r1y+yy*0.2+ry*0.2+mby,r1z+yz*0.2+rz*0.2+mbz)
	_LINE3D(r2x+yx*0.2+rx*0.2+mbx,r2y+yy*0.2+ry*0.2+mby,r2z+yz*0.2+rz*0.2+mbz)
	
	
	_MOVE3D(r1x+mbx,r1y+mby,r1z+mbz)
	_LINE3D(r1x+rx*0.2+mbx,r1y+ry*0.2+mby,r1z+rz*0.2+mbz)
	
	ex = (r1x) - (r1x+rx*0.1) + mbx
	
	_MOVE3D(r1x+rx*0.2+mbx,r1y+ry*0.2+mby,r1z+rz*0.2+mbz)
	_LINE3D(r1x+yx*0.2+rx*0.2+mbx,r1y+yy*0.2+ry*0.2+mby,r1z+yz*0.2+rz*0.2+mbz)
	
	ey = (r1y) - (r1y+yy*0.1+ry*0.1) + mby
	
	_MOVE3D(r1x+mbx,r1y+mby,r1z+mbz)
	_LINE3D(r1x+yx*0.2+mbx,r1y+yy*0.2+mby,r1z+yz*0.2+mbz)
	
	_MOVE3D(r1x+yx*0.2+mbx,r1y+yy*0.2+mby,r1z+yz*0.2+mbz)
	_LINE3D(r1x+yx*0.2+rx*0.2+mbx,r1y+yy*0.2+ry*0.2+mby,r1z+yz*0.2+rz*0.2+mbz)
	
	
	_MOVE3D(r2x+mbx,r2y+mby,r2z+mbz)
	_LINE3D(r2x+rx*0.2+mbx,r2y+ry*0.2+mby,r2z+rz*0.2+mbz)
	
	_MOVE3D(r2x+rx*0.2+mbx,r2y+ry*0.2+mby,r2z+rz*0.2+mbz)
	_LINE3D(r2x+yx*0.2+rx*0.2+mbx,r2y+yy*0.2+ry*0.2+mby,r2z+yz*0.2+rz*0.2+mbz)
	
	_MOVE3D(r2x+mbx,r2y+mby,r2z+mbz)
	_LINE3D(r2x+yx*0.2+mbx,r2y+yy*0.2+mby,r2z+yz*0.2+mbz)
	
	_MOVE3D(r2x+yx*0.2+mbx,r2y+yy*0.2+mby,r2z+yz*0.2+mbz)
	_LINE3D(r2x+yx*0.2+rx*0.2+mbx,r2y+yy*0.2+ry*0.2+mby,r2z+yz*0.2+rz*0.2+mbz)
	
	r1x = -r1x
	r1y = -r1y
	r1z = -r1z
	r2x = -r2x
	r2y = -r2y
	r2z = -r2z

	
	_MOVE3D(r1x+mbx,r1y+mby,r1z+mbz)
	_LINE3D(r2x+mbx,r2y+mby,r2z+mbz)
	
	_MOVE3D(r1x+rx*0.2+mbx,r1y+ry*0.2+mby,r1z+rz*0.2+mbz)
	_LINE3D(r2x+rx*0.2+mbx,r2y+ry*0.2+mby,r2z+rz*0.2+mbz)
	
	_MOVE3D(r1x+yx*0.2+mbx,r1y+yy*0.2+mby,r1z+yz*0.2+mbz)
	_LINE3D(r2x+yx*0.2+mbx,r2y+yy*0.2+mby,r2z+yz*0.2+mbz)
	
	_MOVE3D(r1x+yx*0.2+rx*0.2+mbx,r1y+yy*0.2+ry*0.2+mby,r1z+yz*0.2+rz*0.2+mbz)
	_LINE3D(r2x+yx*0.2+rx*0.2+mbx,r2y+yy*0.2+ry*0.2+mby,r2z+yz*0.2+rz*0.2+mbz)
	
	
	_MOVE3D(r1x+mbx,r1y+mby,r1z+mbz)
	_LINE3D(r1x+rx*0.2+mbx,r1y+ry*0.2+mby,r1z+rz*0.2+mbz)
	
	_MOVE3D(r1x+rx*0.2+mbx,r1y+ry*0.2+mby,r1z+rz*0.2+mbz)
	_LINE3D(r1x+yx*0.2+rx*0.2+mbx,r1y+yy*0.2+ry*0.2+mby,r1z+yz*0.2+rz*0.2+mbz)
	
	_MOVE3D(r1x+mbx,r1y+mby,r1z+mbz)
	_LINE3D(r1x+yx*0.2+mbx,r1y+yy*0.2+mby,r1z+yz*0.2+mbz)
	
	_MOVE3D(r1x+yx*0.2+mbx,r1y+yy*0.2+mby,r1z+yz*0.2+mbz)
	_LINE3D(r1x+yx*0.2+rx*0.2+mbx,r1y+yy*0.2+ry*0.2+mby,r1z+yz*0.2+rz*0.2+mbz)
	
	
	_MOVE3D(r2x+mbx,r2y+mby,r2z+mbz)
	_LINE3D(r2x+rx*0.2+mbx,r2y+ry*0.2+mby,r2z+rz*0.2+mbz)
	
	_MOVE3D(r2x+rx*0.2+mbx,r2y+ry*0.2+mby,r2z+rz*0.2+mbz)
	_LINE3D(r2x+yx*0.2+rx*0.2+mbx,r2y+yy*0.2+ry*0.2+mby,r2z+yz*0.2+rz*0.2+mbz)
	
	_MOVE3D(r2x+mbx,r2y+mby,r2z+mbz)
	_LINE3D(r2x+yx*0.2+mbx,r2y+yy*0.2+mby,r2z+yz*0.2+mbz)
	
	_MOVE3D(r2x+yx*0.2+mbx,r2y+yy*0.2+mby,r2z+yz*0.2+mbz)
	_LINE3D(r2x+yx*0.2+rx*0.2+mbx,r2y+yy*0.2+ry*0.2+mby,r2z+yz*0.2+rz*0.2+mbz)
end

function nvec(x,y,z)
	len = _LEN3(x,y,z)
	
	if len < 0.000001 then return x,y,z end
	
	len = 1 / len
	x = x * len
	y = y * len
	z = z * len
	
	return x,y,z
end

dmn = 0
dmptr = {}

SMKN = 4

function OnFrame()
	out(0,string.format("%.1f fps",_FPS()))
	
	if NGUN == 4 and _KEY(5) == 1 and math.mod(_TICKS(),3) == 0 then
		GUN4 = 16777216
		NGUN = 1
	elseif NGUN == 3 and _KEY(5) == 1 and math.mod(_TICKS(),3) == 0 then
		GUN3 = 16777216
		NGUN = 4
	elseif NGUN == 2 and _KEY(5) == 1 and math.mod(_TICKS(),3) == 0 then
		GUN2 = 16777216
		NGUN = 3
	elseif NGUN == 1 and _KEY(5) == 1 and math.mod(_TICKS(),3) == 0 then
		GUN1 = 16777216
		NGUN = 2
	end
	
	if _KEYDOWN(6) == 1 then
		dmptr[dmn+1] = {}
		dmptr[dmn+1].mbx = _X(MB)
		dmptr[dmn+1].mby = _Y(MB)
		dmptr[dmn+1].mbz = _Z(MB)
		dmptr[dmn+1].rx = _XX(MB)
		dmptr[dmn+1].ry = _XY(MB)
		dmptr[dmn+1].rz = _XZ(MB)
		dmptr[dmn+1].yx = _YX(MB)
		dmptr[dmn+1].yy = _YY(MB)
		dmptr[dmn+1].yz = _YZ(MB)
		dmptr[dmn+1].xm = _ZX(MB)
		dmptr[dmn+1].ym = _ZY(MB)
		dmptr[dmn+1].zm = _ZZ(MB)
		dmptr[dmn+1].px = _ZX(MB)
		dmptr[dmn+1].py = _ZY(MB)
		dmptr[dmn+1].pz = _ZZ(MB)
		dmptr[dmn+1].pbx = {}
		dmptr[dmn+1].pby = {}
		dmptr[dmn+1].pbz = {}
		for i=1,SMKN do
			dmptr[dmn+1].pbx[i] = _X(MB)
			dmptr[dmn+1].pby[i] = _Y(MB)
			dmptr[dmn+1].pbz[i] = _Z(MB)
		end
		dmptr[dmn+1].sn = 0
		dmptr[dmn+1].sf = 1
		dmptr[dmn+1].bs = 0
		dmn = dmn + 1
	end
	
	dmiso(_X(MB),_Y(MB),_Z(MB),_XX(MB),_XY(MB),_XZ(MB),_YX(MB),_YY(MB),_YZ(MB),_ZX(MB),_ZY(MB),_ZZ(MB))
	
	local n = 0
	
	for i=1,dmn do
		if dmptr[i].sf == 1 then
			dmiso(dmptr[i].mbx,dmptr[i].mby,dmptr[i].mbz,dmptr[i].rx,dmptr[i].ry,dmptr[i].rz,dmptr[i].yx,dmptr[i].yy,dmptr[i].yz,dmptr[i].xm,dmptr[i].ym,dmptr[i].zm)
			_SETCOLOR(8421504)
			dmptr[i].pbx[SMKN] = dmptr[i].mbx
			dmptr[i].pby[SMKN] = dmptr[i].mby
			dmptr[i].pbz[SMKN] = dmptr[i].mbz
			dmptr[i].mbx = dmptr[i].mbx + dmptr[i].xm * 16
			dmptr[i].mby = dmptr[i].mby + dmptr[i].ym * 16
			dmptr[i].mbz = dmptr[i].mbz + dmptr[i].zm * 16
			
			dmptr[i].sn = dmptr[i].sn + _LEN3(dmptr[i].xm * 16 ,dmptr[i].ym * 16,dmptr[i].zm * 16)
			
			out(i,dmptr[i].sn)
			
			if dmptr[i].sn > 1024 then dmptr[i].sf = 0 end
			n = n + 1
			
			for j=1,SMKN-1 do
				vx,vy,vz = dmptr[i].rx,dmptr[i].ry,dmptr[i].rz
				
				_MOVE3D(dmptr[i].pbx[j]+vx*1.2,dmptr[i].pby[j]+vy*1.2,dmptr[i].pbz[j]+vz*1.2)
				_LINE3D(dmptr[i].pbx[j+1]+vx*1.2,dmptr[i].pby[j+1]+vy*1.2,dmptr[i].pbz[j+1]+vz*1.2)
				
				_MOVE3D(dmptr[i].pbx[j]-vx*1.2,dmptr[i].pby[j]-vy*1.2,dmptr[i].pbz[j]-vz*1.2)
				_LINE3D(dmptr[i].pbx[j+1]-vx*1.2,dmptr[i].pby[j+1]-vy*1.2,dmptr[i].pbz[j+1]-vz*1.2)
			end
			
			for j=1,SMKN-1 do
				dmptr[i].pbx[j] = dmptr[i].pbx[j+1]
				dmptr[i].pby[j] = dmptr[i].pby[j+1]
				dmptr[i].pbz[j] = dmptr[i].pbz[j+1]
			end
		end
	end
	
	_SETCOLOR(65280)
	
	NKPH = math.floor(math.abs(_VEL(0)*3.6))
	n0 = math.mod(NKPH, 10)
	draw_num7[n0]((0.5+(0.0375+0.0125)*2),0,0.0375)
	NKPH = math.floor(NKPH / 10)
	n1 = math.mod(NKPH, 10)
	draw_num7[n1]((0.5+(0.0375+0.0125)*1),0,0.0375)
	NKPH = math.floor(NKPH / 10)
	n2 = math.mod(NKPH, 10)
	draw_num7[n2]((0.5+(0.0375+0.0125)*0),0,0.0375)
	
	pr = math.pi-_EY(0)
	px = 0
	py = 0.5
	
	rx = px * math.cos(pr) - py * math.sin(pr)
	ry = px * math.sin(pr) - py * math.cos(pr)
	
	_MOVE2D(rx,ry)
	_LINE2D(rx*0.8,ry*0.8)
	
	NKPH = math.floor(math.abs(_Y(0)))
	n0 = math.mod(NKPH, 10)
	draw_num7[n0](-(0.5+(0.0375+0.0125)*0),0,0.0375)
	NKPH = math.floor(NKPH / 10)
	n1 = math.mod(NKPH, 10)
	draw_num7[n1](-(0.5+(0.0375+0.0125)*1),0,0.0375)
	NKPH = math.floor(NKPH / 10)
	n2 = math.mod(NKPH, 10)
	draw_num7[n2](-(0.5+(0.0375+0.0125)*2),0,0.0375)
	NKPH = math.floor(NKPH / 10)
	n3 = math.mod(NKPH, 10)
	draw_num7[n3](-(0.5+(0.0375+0.0125)*3),0,0.0375)
	
	local pln = _PLAYERS()
	local pmyid = _PLAYERMYID()
	
	ml = 0
	mpx,mpy,mpz = 0,50,0
	
	for p = 1, pln, 1 do
		if _PLAYERARMS(p) ~= 0 and _PLAYERID(p) ~= pmyid then
			ex, ey, ez = pointget_t(p,100)
			_SETCOLOR(16711680)
			box3d(ex,ey,ez,bs)
			l = _LEN3(ex,ey,ez)
			if ml < l then
				ml = l
				mpx,mpy,mpz = ex,ey,ez
			end
		end
	end
	
	for i=1,dmn do
		if dmptr[i].sf ~= 0 and ml ~= 0 then
			lox = mpx - dmptr[i].mbx
			loy = mpy - dmptr[i].mby
			loz = mpz - dmptr[i].mbz
			
			vx,vy,vz = nvec(lox,loy,loz)
			
			nx = vx*_ZX(MB)+vy*_ZY(MB)+vz*_ZZ(MB)
			ac = math.acos(nx / (_LEN3(vx,vy,vz) * _LEN3(_ZX(MB),_ZY(MB),_ZZ(MB))))
			
			if math.deg(ac) < 60 then
				vx = dmptr[i].px * 0.9 + vx * 0.1
				vy = dmptr[i].py * 0.9 + vy * 0.1
				vz = dmptr[i].pz * 0.9 + vz * 0.1
				
				dmptr[i].xm,dmptr[i].ym,dmptr[i].zm = vx,vy,vz
				dmptr[i].yx,dmptr[i].yy,dmptr[i].yz = vx,vz,vy
				dmptr[i].rx,dmptr[i].ry,dmptr[i].rz = vz,vy,vx
				
				dmptr[i].px = vx
				dmptr[i].py = vy
				dmptr[i].pz = vz
				
				if _LEN3(lox,loy,loz) < 40 then
					if dmptr[i].bs == 0 then dmptr[i].bs = 30 end
					dmptr[i].sf = dmptr[i].bs
					_SETCOLOR(16711680)
					ramiel3d(dmptr[i].mbx,dmptr[i].mby,dmptr[i].mbz,dmptr[i].bs)
					dmptr[i].bs = dmptr[i].bs - 1
					if dmptr[i].bs == 0 then dmptr[i].sf = 0 end
				end
			end
			n = n + 1
		end
	end
	
	if n == 0 then dmn = 0 end
	
	_SETCOLOR(65280)
	
	_MOVE2D(-0.075,0)
	_LINE2D(-0.025,0)
	_MOVE2D(0.075,0)
	_LINE2D(0.025,0)
	
	_MOVE2D(0,-0.05)
	_LINE2D(0,-0.025)
	_MOVE2D(0,0.05)
	_LINE2D(0,0.025)
end
}
