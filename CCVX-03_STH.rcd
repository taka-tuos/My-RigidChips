// [RCD] 
Val
{
	JX(default=0, min=-10000000000, max=10000000000)
	JY(default=0, min=-10000000000, max=10000000000)
	P(default=0, min=-10000000000, max=10000000000)
	R(default=0, min=-90, max=90)
	V(default=0, min=-90, max=90)
}
Key
{
}
Body
{
	Core() {
		W:Cowl(option=1, effect=#F0FB, name=LS) { }
		E:Cowl(option=1, effect=#F0FB, name=RS) { }
		S:Cowl(option=1, effect=#F0FB, name=TS) { }
		N:Cowl(option=1, effect=#F0FB, name=FS) { }
		N:Cowl() {
			S:Cowl() {
				S:Cowl() {
					S:Cowl() {
						W:Cowl(option=4) { }
						E:Cowl(option=3) { }
						S:Cowl() {
							S:Cowl() {
								W:Cowl() {
									W:Cowl() { }
								}
								E:Cowl() {
									E:Cowl() { }
								}
							}
							W:Cowl() {
								W:Cowl(option=4) { }
							}
							E:Cowl() {
								E:Cowl(option=3) { }
							}
						}
					}
				}
			}
			S:Cowl(angle=150) {
				S:Cowl(angle=30) {
					W:Cowl(angle=90) {
						N:Cowl() {
							N:Cowl() {
								N:Cowl() {
									N:Cowl() {
										N:Cowl() {
											N:Cowl() {
												N:Cowl() {
													N:Cowl(angle=10, option=5, color=#202020) { }
												}
											}
										}
									}
								}
								S:Cowl(angle=-10, option=1, effect=#F0FB) {
									S:Cowl(angle=-170) {
										E:Cowl(angle=-90) { }
										S:Cowl() {
											W:Cowl(angle=-90) { }
											E:Cowl(angle=-90) { }
											S:Cowl() {
												W:Cowl(angle=-90) { }
												E:Cowl(angle=-90) { }
												S:Cowl() {
													W:Cowl(angle=-90) { }
													E:Cowl(angle=-90) { }
													S:Cowl(angle=-5) {
														W:Cowl(angle=-90) { }
														E:Cowl(angle=-90) { }
														S:Cowl() {
															W:Cowl(angle=-90) { }
															E:Cowl(angle=-90) { }
														}
													}
												}
											}
										}
										W:Cowl(angle=-90) { }
									}
								}
							}
						}
						S:Cowl(angle=-175) {
							E:Cowl(angle=-90) { }
							W:Cowl(angle=-90) { }
						}
					}
					E:Cowl(angle=90) {
						N:Cowl() {
							N:Cowl() {
								N:Cowl() {
									N:Cowl() {
										N:Cowl() {
											N:Cowl() {
												N:Cowl() {
													N:Cowl(angle=10, option=5, color=#202020) { }
												}
											}
										}
									}
								}
								S:Cowl(angle=-10, option=1, effect=#F0FB) {
									S:Cowl(angle=-170) {
										E:Cowl(angle=-90) { }
										S:Cowl() {
											W:Cowl(angle=-90) { }
											E:Cowl(angle=-90) { }
											S:Cowl() {
												W:Cowl(angle=-90) { }
												E:Cowl(angle=-90) { }
												S:Cowl() {
													W:Cowl(angle=-90) { }
													E:Cowl(angle=-90) { }
													S:Cowl(angle=-5) {
														W:Cowl(angle=-90) { }
														E:Cowl(angle=-90) { }
														S:Cowl() {
															W:Cowl(angle=-90) { }
															E:Cowl(angle=-90) { }
														}
													}
												}
											}
										}
										W:Cowl(angle=-90) { }
									}
								}
							}
						}
						S:Cowl(angle=-175) {
							E:Cowl(angle=-90) { }
							W:Cowl(angle=-90) { }
						}
					}
					N:Cowl() {
						N:Cowl() {
							N:Cowl() {
								N:Cowl() {
									N:Cowl() {
										N:Cowl() {
											N:Cowl() {
												N:Cowl(angle=90, option=1) {
													N:Cowl(angle=90) {
														S:Cowl(angle=10, option=5, color=#202020) { }
													}
												}
												N:Cowl(angle=10, option=5, color=#202020) { }
											}
										}
									}
								}
							}
						}
					}
					S:Cowl(angle=30) {
						W:Cowl(angle=95, option=3) { }
						E:Cowl(angle=95, option=4) { }
					}
					S:Cowl(angle=90) {
						S:Cowl(angle=-120) {
							N:Cowl(angle=-20, color=#203020, effect=#70FB) {
								N:Cowl(color=#203020, effect=#70FB) {
									N:Cowl(angle=-10, color=#203020, effect=#70FB) {
										N:Cowl(angle=-10) {
											N:Cowl() {
												W:Cowl(angle=-90) { }
												E:Cowl(angle=-90) { }
											}
											W:Cowl(angle=-90) { }
											E:Cowl(angle=-90) { }
										}
										W:Cowl(angle=-90, color=#203020, effect=#70FB) { }
										E:Cowl(angle=-90, color=#203020, effect=#70FB) { }
									}
									W:Cowl(angle=-90, color=#203020, effect=#70FB) { }
									E:Cowl(angle=-90, color=#203020, effect=#70FB) { }
								}
								W:Cowl(angle=-90, color=#203020, effect=#70FB) { }
								E:Cowl(angle=-90, color=#203020, effect=#70FB) { }
							}
							W:Cowl(angle=-95, option=3) { }
							E:Cowl(angle=-95, option=4) { }
						}
					}
				}
			}
		}
		N:Weight(angle=180, option=2.5, spring=1, damper=1) { }
		S:TrimF(angle=90, spring=1, damper=1) {
			S:TrimF(spring=1, damper=1) {
				S:TrimF(spring=1, damper=1) {
					S:TrimF(spring=1, damper=1) {
						S:TrimF(angle=-90, spring=1, damper=1) {
							W:Trim(angle=R, spring=1, damper=1) { }
							E:Trim(angle=R, spring=1, damper=1) { }
							N:Frame(angle=150, option=1, spring=1, damper=1) {
								N:Jet(angle=120, power=-P, spring=1, damper=1) { }
							}
						}
						S:Chip() { }
					}
				}
				E:Cowl(angle=90, option=1, effect=#F0FB) {
					S:Cowl(angle=-20, option=1, effect=#F0FB) {
						W:Cowl(angle=90) {
							S:Cowl() {
								E:Cowl(angle=-90, option=1, effect=#F0FB) {
									S:Cowl(angle=-20, option=1, effect=#F0FB) {
										W:Cowl(angle=-90) { }
									}
								}
							}
						}
					}
				}
			}
			N:TrimF(angle=90, option=1) {
				E:Trim(angle=V, spring=1, damper=1) {
					N:Cowl(option=4) { }
				}
				W:Trim(angle=-V, spring=1, damper=1) {
					N:Cowl(option=3) { }
				}
				S:Cowl() {
					S:Cowl() {
						S:Cowl() {
							S:Cowl() {
								S:Cowl() {
									W:Cowl() {
										W:Cowl() {
											W:Cowl() {
												W:Cowl(angle=90, option=1, effect=#F0FB) {
													N:Cowl(angle=35, option=1, effect=#F0FB) {
														E:Cowl(angle=90) {
															N:Cowl() {
																N:Cowl() {
																	N:Cowl() {
																		N:Cowl() { }
																	}
																}
															}
														}
													}
												}
												N:Cowl(angle=150, option=1, effect=#F0FB) {
													E:Cowl(angle=90, option=4) { }
													W:Cowl(angle=90, option=3) { }
												}
											}
										}
									}
									E:Cowl() {
										E:Cowl() {
											E:Cowl() {
												E:Cowl(angle=90, option=1, effect=#F0FB) {
													N:Cowl(angle=35, option=1, effect=#F0FB) {
														W:Cowl(angle=90) {
															N:Cowl() {
																N:Cowl() {
																	N:Cowl() {
																		N:Cowl() { }
																	}
																}
															}
														}
													}
												}
												N:Cowl(angle=150, option=1, effect=#F0FB) {
													E:Cowl(angle=90, option=4) { }
													W:Cowl(angle=90, option=3) { }
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
Lua
{
require("daretoku_taka/xgui.lua")
require("daretoku_taka/xhud2.lua")
require("daretoku_taka/libccvx3.lua")
require("daretoku_taka/libresume.lua")
require("daretoku_taka/libgun.lua")
require("daretoku_taka/libweapon.lua")

_limitlist={1500,1800,2000,2200,2500,64512}

_prvtbl = InitPRVTable()

_prvtbl.p.limit = 200000
_prvtbl.p.step  = 200000

_prvtbl.r.tgt = 360
_prvtbl.r.kp  = 4
_prvtbl.r.ki  = 4
_prvtbl.r.kd  = 4
_prvtbl.r.il  = 20

_prvtbl.v.tgt = 180
_prvtbl.v.kp  = 4
_prvtbl.v.ki  = 4
_prvtbl.v.kd  = 4
_prvtbl.v.il  = 20

JX_PID = XPID_new()
JY_PID = XPID_new()
WS_PID = XPID_new()
RD_PID = XPID_new()

_gf=25
_gr=70

local inited = false

function OnFrame()
	if not inited then
		CCVXOnInit()
		inited = true
	end

	CCVXOnFrame(true)

	ShowSplash("CCVX-03+ Stratosphere-T")
	
	local p,r,v,b = GetPRVBAnalog(_prvtbl,{p=P,b=0})
	
	P=p
	R=r
	V=v
	--AB=b
	
	local dv = math.rad(-_NORMANALOG(1)*180/30)
	local dy = math.rad((_KEY(5)-_KEY(4))*60/30)
	
	if _gf == 0 then dy = dy * 2 end
	
	--JX = JX_PID:PID(dv,WX,24,16,2,40)
	--JY = JY_PID:PID(dy,WY,24,16,2,40)
	--RD = RD_PID:PID(dy,WY,24,16,2,40)
	--WS = WS_PID:PID(dy,WY,24,16,2,40)
	
	--[[if _KEY(0) == 0 then
		if _KEYDOWN(6) == 1 then
			if _gf == 0 then _gf = 25
			else _gf = 0 end
			if _gr == 70 then _gr = 180
			else _gr = 70 end
		end
		
		WB=_LINER(WB,_KEY(7)*100,50)
	end]]--
	
	--GF=_LINER(GF,_gf,1)
	--GR=_LINER(GR,_gr,4.4)
	
	CheckLimit()
	
	XHUD.Draw()
	
	Weapon.Stat()
end
}
