// [RCD] 
Val
{
	AB(default=0, min=-90, max=90)
	GF(default=0, min=-180, max=180)
	GR(default=0, min=-180, max=180)
	JX(default=0, min=-90, max=90)
	JY(default=0, min=-90, max=90)
	P(default=0, min=-10000000000, max=10000000000)
	R(default=0, min=-90, max=90)
	RD(default=0, min=-90, max=90)
	V(default=0, min=-90, max=90)
	WB(default=0, max=10000000000)
	WS(default=0, min=-90, max=90)
}
Key
{
}
Body
{
	Core() {
		W:Cowl(option=1, effect=#F0FB, option=1, name=LS) { }
		E:Cowl(option=1, effect=#F0FB, option=1, name=RS) { }
		S:Cowl(option=1, effect=#F0FB, option=1, name=TS) { }
		N:Cowl(option=1, effect=#F0FB, option=1, name=FS) { }
		S:TrimF(angle=90, option=1) {
			N:RudderF(angle=-90) {
				E:Trim(angle=90) {
					W:Trim(angle=90, spring=1, damper=1) {
						E:RudderF(angle=-GF) {
							E:Wheel(angle=WS, brake=WB) { }
						}
					}
					S:RudderF(angle=-135, option=1, spring=1, damper=1) {
						N:Trim(angle=V, color=#002F7F, spring=1, damper=1) { }
						W:Cowl(angle=90, option=1, effect=#F0FB) {
							N:Cowl(angle=-160, option=1, effect=#F0FB) {
								E:Cowl(angle=-90, color=#002F7F) {
									S:Cowl(color=#002F7F) { }
								}
							}
						}
					}
					N:RudderF(angle=135, option=1, spring=1, damper=1) {
						S:Trim(angle=-V, color=#002F7F, spring=1, damper=1) { }
						W:Cowl(angle=90, option=1, effect=#F0FB) {
							S:Cowl(angle=-160, option=1, effect=#F0FB) {
								E:Cowl(angle=-90, color=#002F7F) {
									N:Cowl(color=#002F7F) { }
								}
							}
						}
					}
					E:Cowl() {
						E:Cowl() {
							E:Cowl() {
								E:Cowl(angle=-155) {
									S:Cowl(angle=-85, option=4) {
										E:Cowl(option=3, color=#80AFFF) { }
									}
									E:Cowl(angle=-5, color=#201000, effect=#D0FB) {
										E:Cowl(color=#201000, effect=#D0FB) {
											E:Cowl(angle=-21, color=#201000, effect=#D0FB) {
												E:Cowl(angle=-15, color=#002F7F) {
													E:Cowl(angle=5, color=#002F7F) {
														E:Cowl(angle=5, color=#002F7F) {
															E:Cowl(angle=5, color=#002F7F) {
																E:Cowl(color=#002F7F) {
																	E:Cowl(color=#002F7F) { }
																}
																S:Cowl(angle=-90, color=#002F7F) {
																	W:Cowl(color=#002F7F) { }
																}
																N:Cowl(angle=-90, color=#002F7F) {
																	W:Cowl(color=#002F7F) { }
																}
															}
															S:Cowl(angle=-90, option=3, color=#002F7F) {
																W:Cowl(color=#002F7F) { }
															}
															N:Cowl(angle=-90, option=4, color=#002F7F) {
																W:Cowl(color=#002F7F) { }
															}
														}
														S:Cowl(angle=-90, color=#002F7F) {
															W:Cowl(color=#002F7F) { }
														}
														N:Cowl(angle=-90, color=#002F7F) {
															W:Cowl(color=#002F7F) { }
														}
													}
													S:Cowl(angle=-85, option=3, color=#002F7F) { }
													N:Cowl(angle=-85, option=4, color=#002F7F) { }
												}
												N:Cowl(angle=-90, color=#201000, effect=#D0FB) { }
												S:Cowl(angle=-90, color=#201000, effect=#D0FB) { }
											}
											N:Cowl(angle=-90, color=#201000, effect=#D0FB) { }
											S:Cowl(angle=-90, color=#201000, effect=#D0FB) { }
										}
										S:Cowl(angle=-90, option=4, color=#201000, effect=#D0FB) { }
										N:Cowl(angle=-90, option=3, color=#201000, effect=#D0FB) { }
									}
									N:Cowl(angle=-85, option=3) {
										E:Cowl(option=4, color=#80AFFF) { }
									}
								}
								E:Cowl(angle=150) {
									S:Cowl(angle=85, option=4) {
										E:Cowl(option=3, color=#80AFFF) { }
									}
									E:Cowl(angle=30, color=#80AFFF) {
										E:Cowl(color=#002F7F) {
											E:Cowl(color=#002F7F) {
												E:Cowl(color=#002F7F) {
													E:Cowl(color=#002F7F) {
														E:Cowl(color=#002F7F) {
															E:Cowl(color=#002F7F) {
																E:Cowl(color=#002F7F) { }
															}
														}
													}
													S:Cowl(angle=90, color=#002F7F) {
														E:Cowl(color=#002F7F) {
															E:Cowl(color=#002F7F) {
																E:Cowl(color=#002F7F) { }
															}
														}
													}
													N:Cowl(angle=90, color=#002F7F) {
														E:Cowl(color=#002F7F) {
															E:Cowl(color=#002F7F) {
																E:Cowl(color=#002F7F) { }
															}
														}
													}
												}
												S:Cowl(angle=85, color=#002F7F) {
													E:Cowl(angle=4, option=3, color=#002F7F) { }
												}
												N:Cowl(angle=85, color=#002F7F) {
													E:Cowl(angle=4, option=4, color=#002F7F) { }
												}
											}
											S:Cowl(angle=85, color=#002F7F) {
												W:Cowl(angle=5, option=5, color=#80AFFF) { }
											}
											N:Cowl(angle=85, color=#002F7F) {
												W:Cowl(angle=5, option=5, color=#80AFFF) { }
											}
										}
										S:Cowl(angle=85, option=4, color=#80AFFF) { }
										N:Cowl(angle=85, option=3, color=#80AFFF) { }
									}
									N:Cowl(angle=85, option=3) {
										E:Cowl(option=4, color=#80AFFF) { }
									}
								}
							}
						}
					}
					W:Chip(spring=1, damper=1) {
						W:Chip(spring=1, damper=1) {
							W:Chip(spring=1, damper=1) {
								W:Chip(spring=1, damper=1) {
									W:Chip(spring=1, damper=1) {
										W:Chip(spring=1, damper=1) {
											N:Rudder(angle=30, color=#002F7F, spring=1, damper=1) {
												S:Cowl(option=4, color=#002F7F) { }
												N:Cowl(color=#002F7F) {
													N:Cowl(color=#002F7F) {
														N:Cowl(color=#80AFFF) {
															N:Cowl(angle=90, option=1, effect=#F0FB) {
																W:Cowl(angle=-150, option=1, effect=#F0FB) {
																	S:Cowl(angle=-90, option=4, color=#80AFFF) { }
																	W:Cowl(angle=-100, option=1, effect=#F0FB) {
																		S:Cowl(angle=-90, option=3, color=#80AFFF) {
																			W:Cowl(color=#002F7F) {
																				W:Cowl(color=#002F7F) {
																					W:Cowl(color=#002F7F) {
																						S:Cowl(color=#002F7F) { }
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
														S:Cowl(color=#002F7F) { }
													}
												}
												N:Frame(option=1) {
													N:Trim(angle=R, color=#002F7F, spring=1, damper=1) { }
												}
											}
											S:Rudder(angle=-30, color=#002F7F, spring=1, damper=1) {
												N:Cowl(option=3, color=#002F7F) { }
												S:Cowl(color=#002F7F) {
													S:Cowl(color=#002F7F) {
														S:Cowl(color=#80AFFF) {
															S:Cowl(angle=90, option=1, effect=#F0FB) {
																W:Cowl(angle=-150, option=1, effect=#F0FB) {
																	N:Cowl(angle=-90, option=3, color=#80AFFF) { }
																	W:Cowl(angle=-100, option=1, effect=#F0FB) {
																		N:Cowl(angle=-90, option=4, color=#80AFFF) {
																			W:Cowl(color=#002F7F) {
																				W:Cowl(color=#002F7F) {
																					W:Cowl(color=#002F7F) {
																						N:Cowl(color=#002F7F) { }
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
														N:Cowl(color=#002F7F) { }
													}
												}
												S:Frame(option=1) {
													S:Trim(angle=R, color=#002F7F, spring=1, damper=1) { }
												}
											}
										}
										W:Frame(angle=30) {
											W:Jet(angle=-120, power=P) {
												S:Cowl(angle=90, option=5, color=#101020) { }
												N:Cowl(angle=90, option=5, color=#101020) { }
												W:Cowl(angle=110, color=#101020) {
													E:Cowl(angle=30, color=#002F7F) { }
												}
												E:Cowl(angle=110, color=#101020) {
													W:Cowl(angle=15, color=#002F7F) {
														W:Cowl(color=#002F7F) {
															W:Cowl(angle=5, color=#002F7F) {
																W:Cowl(color=#002F7F) {
																	W:Cowl(color=#002F7F) {
																		N:Cowl(angle=90, color=#002F7F) {
																			W:Cowl(option=3, color=#002F7F) { }
																			E:Cowl(color=#002F7F) {
																				E:Cowl(color=#002F7F) { }
																			}
																		}
																		S:Cowl(angle=90, color=#002F7F) {
																			E:Cowl(color=#002F7F) {
																				E:Cowl(color=#002F7F) { }
																			}
																			W:Cowl(option=4, color=#002F7F) { }
																		}
																	}
																}
															}
															N:Cowl(angle=90, color=#002F7F) { }
															S:Cowl(angle=90, color=#002F7F) { }
														}
														N:Cowl(angle=90, color=#002F7F) { }
														S:Cowl(angle=90, color=#002F7F) { }
													}
												}
											}
										}
										W:Cowl(angle=30, color=#002F7F) {
											W:Cowl(angle=150, color=#002F7F) {
												S:Cowl(angle=90, color=#002F7F) {
													W:Cowl(color=#002F7F) {
														S:Cowl(angle=-120, color=#002F7F) {
															E:Cowl(angle=-35, option=4, color=#002F7F) { }
															W:Cowl(angle=-35, option=3, color=#002F7F) { }
														}
														N:Cowl(angle=-120, color=#002F7F) {
															E:Cowl(angle=-35, option=3, color=#002F7F) { }
															W:Cowl(angle=-5, option=4, color=#002F7F) { }
														}
													}
												}
												N:Cowl(angle=90, color=#002F7F) {
													W:Cowl(color=#002F7F) {
														N:Cowl(angle=-120, color=#002F7F) {
															E:Cowl(angle=-35, option=3, color=#002F7F) { }
															W:Cowl(angle=-35, option=4, color=#002F7F) { }
														}
														S:Cowl(angle=-120, color=#002F7F) {
															W:Cowl(angle=-5, option=3, color=#002F7F) { }
															E:Cowl(angle=-35, option=4, color=#002F7F) { }
														}
													}
												}
												W:Cowl(color=#002F7F) { }
											}
										}
										S:Frame() {
											S:Wheel(angle=GR, brake=WB) { }
										}
										N:Frame() {
											N:Wheel(angle=GR, brake=WB) { }
										}
									}
									W:TrimF(angle=90, option=1, spring=1, damper=1) {
										W:Rudder(angle=-90, color=#002F7F, spring=1, damper=1) {
											W:Trim(angle=RD, color=#002F7F, spring=1, damper=1) {
												W:Cowl(angle=-90, option=1, effect=#F0FB) {
													N:Cowl(angle=-70, option=1, effect=#F0FB) {
														E:Cowl(angle=-90, color=#002F7F) {
															N:Cowl(color=#002F7F) { }
														}
													}
													S:Cowl(angle=-50, option=1, effect=#F0FB) {
														S:Cowl(angle=10, option=1, effect=#F0FB) {
															E:Cowl(angle=-90, color=#002F7F) {
																N:Cowl(color=#002F7F) { }
															}
															S:Cowl(angle=30, option=1, effect=#F0FB) {
																E:Cowl(angle=-90, option=4, color=#002F7F) {
																	N:Cowl(color=#002F7F) { }
																}
															}
														}
														E:Cowl(angle=-90, color=#002F7F) { }
													}
												}
											}
										}
									}
									W:Chip(angle=AB) { }
									W:Chip(angle=-AB) { }
								}
							}
						}
						S:Cowl(angle=90, option=1, effect=#F0FB) {
							W:Cowl(angle=-20, option=1, effect=#F0FB) {
								N:Cowl(angle=90, color=#002F7F) {
									W:Cowl(color=#002F7F) {
										S:Cowl(angle=90, option=1, effect=#F0FB) {
											E:Cowl(angle=-10, option=1, effect=#F0FB) {
												N:Cowl(angle=90, color=#002F7F) {
													E:Cowl(color=#002F7F) {
														S:Cowl(angle=-170, color=#002F7F) { }
													}
													S:Cowl(angle=-165, color=#002F7F) {
														E:Cowl(angle=-5, option=3, color=#002F7F) { }
													}
												}
											}
											W:Cowl(angle=-35, option=1, effect=#F0FB) {
												N:Cowl(angle=90, color=#002F7F) { }
											}
											W:Cowl(angle=-10, option=1, effect=#F0FB) {
												N:Cowl(angle=90, color=#002F7F) {
													E:Cowl(color=#002F7F) { }
													S:Cowl(angle=-160, color=#002F7F) {
														W:Cowl(angle=-21, option=4, color=#002F7F) {
															S:Cowl(angle=-20, color=#002F7F) { }
														}
														S:Cowl(angle=-20, color=#002F7F) { }
													}
												}
											}
										}
										S:Cowl(angle=-160, color=#002F7F) {
											W:Cowl(color=#002F7F) { }
											E:Cowl(angle=-3, option=3, color=#002F7F) { }
										}
									}
								}
							}
						}
						N:Cowl(angle=90, option=1, effect=#F0FB) {
							W:Cowl(angle=-20, option=1, effect=#F0FB) {
								S:Cowl(angle=90, color=#002F7F) {
									W:Cowl(color=#002F7F) {
										N:Cowl(angle=90, option=1, effect=#F0FB) {
											W:Cowl(angle=-10, option=1, effect=#F0FB) {
												S:Cowl(angle=90, color=#002F7F) {
													E:Cowl(color=#002F7F) { }
													N:Cowl(angle=-160, color=#002F7F) {
														W:Cowl(angle=-20, option=3, color=#002F7F) {
															N:Cowl(angle=-20, color=#002F7F) { }
														}
														N:Cowl(angle=-20, color=#002F7F) { }
													}
												}
											}
											E:Cowl(angle=-10, option=1, effect=#F0FB) {
												S:Cowl(angle=90, color=#002F7F) {
													E:Cowl(color=#002F7F) {
														N:Cowl(angle=-170, color=#002F7F) { }
													}
													N:Cowl(angle=-165, color=#002F7F) {
														E:Cowl(angle=-5, option=4, color=#002F7F) { }
													}
												}
											}
											W:Cowl(angle=-35, option=1, effect=#F0FB) {
												S:Cowl(angle=90, color=#002F7F) { }
											}
										}
										N:Cowl(angle=-160, color=#002F7F) {
											W:Cowl(color=#002F7F) { }
											E:Cowl(angle=-3, option=4, color=#002F7F) { }
										}
									}
								}
							}
						}
					}
					E:Weight(angle=180) { }
				}
			}
		}
		N:Cowl() {
			N:Cowl(angle=150, option=1, effect=#F0FB) {
				N:Cowl(angle=120, effect=#F0FB, name=SCR1) { }
			}
		}
	}
}
Lua
{
require("daretoku_taka/xgui.lua")
require("daretoku_taka/xhud2.lua")
require("daretoku_taka/libccvx3.lua")
require("daretoku_taka/libresume.lua")
require("daretoku_taka/libgun.lua")
require("daretoku_taka/libweapon.lua")

_limitlist={1500,1800,2000,2200,2500,64512}

_prvtbl = InitPRVTable()

_prvtbl.p.limit = 200000
_prvtbl.p.step  = 200000

_prvtbl.r.tgt = 360
_prvtbl.r.kp  = 8
_prvtbl.r.ki  = 8
_prvtbl.r.kd  = 8
_prvtbl.r.il  = 20

_prvtbl.v.tgt = 180
_prvtbl.v.kp  = 12
_prvtbl.v.ki  = 12
_prvtbl.v.kd  = 4
_prvtbl.v.il  = 20

JX_PID = XPID_new()
JY_PID = XPID_new()
WS_PID = XPID_new()
RD_PID = XPID_new()

_gf=25
_gr=70

__xgui_drawingarea = {0,0,1024,1024} -- x1,y1,x2,y2

function XGUI.Interp(xi,xi1,yi,yi1,x)
	return yi + ((( yi1 - yi ) * ( x - xi )) / ( xi1 - xi ))
end

function XGUI.Move2D(x,y)
	__xgui_movex,__xgui_movey = x,y
end

function XGUI.Line2D(x,y)
	local ox,oy = __xgui_movex,__xgui_movey
	local px,py = x,y
	
	ox = ox + __xgui_moveorginx
	oy = oy + __xgui_moveorginy
	
	px = px + __xgui_moveorginx
	py = py + __xgui_moveorginy
	
	local sx,sy = ox,oy
	local tx,ty = px,py
	
	if not
		(sx >= __xgui_drawingarea[1] and sy >= __xgui_drawingarea[2] and sx < __xgui_drawingarea[3] and sy < __xgui_drawingarea[4]
		or
		px >= __xgui_drawingarea[1] and py >= __xgui_drawingarea[2] and px < __xgui_drawingarea[3] and py < __xgui_drawingarea[4])
	then
		__xgui_movex,__xgui_movey = x,y
		return
	end
	
	if sx < __xgui_drawingarea[1] then
		ox = __xgui_drawingarea[1]
		oy = XGUI.Interp(sx,tx,sy,ty,__xgui_drawingarea[1])
	end
	
	if tx < __xgui_drawingarea[1] then
		px = __xgui_drawingarea[1]
		py = XGUI.Interp(tx,sx,ty,sy,__xgui_drawingarea[1])
	end
	
	if sy < __xgui_drawingarea[2] then
		oy = __xgui_drawingarea[2]
		ox = XGUI.Interp(sy,ty,sx,tx,__xgui_drawingarea[2])
	end
	
	if ty < __xgui_drawingarea[2] then
		py = __xgui_drawingarea[2]
		px = XGUI.Interp(ty,sy,tx,sx,__xgui_drawingarea[2])
	end
	
	
	
	if sx > __xgui_drawingarea[3] then
		ox = __xgui_drawingarea[3]
		oy = XGUI.Interp(sx,tx,sy,ty,__xgui_drawingarea[3])
	end
	
	if tx > __xgui_drawingarea[3] then
		px = __xgui_drawingarea[3]
		py = XGUI.Interp(tx,sx,ty,sy,__xgui_drawingarea[3])
	end
	
	if sy > __xgui_drawingarea[4] then
		oy = __xgui_drawingarea[4]
		ox = XGUI.Interp(sy,ty,sx,tx,__xgui_drawingarea[4])
	end
	
	if ty > __xgui_drawingarea[4] then
		py = __xgui_drawingarea[4]
		px = XGUI.Interp(ty,sy,tx,sx,__xgui_drawingarea[4])
	end
	
	local qx,qy = XGUI.GetRegularPoint(ox,oy)
	local rx,ry = XGUI.GetRegularPoint(px,py)
	
	_MOVE2D(qx,qy)
	_LINE2D(rx,ry)
	
	__xgui_movex,__xgui_movey = x,y
end

function _WIDTH()
	return 1024
end

function _HEIGHT()
	return 1024
end

function _MOVE2D(x,y)
	_MOVE3D(XGUI.SampleVertexShader(x*128+256,y*128+256,SCR1))
end

function _LINE2D(x,y)
	_LINE3D(XGUI.SampleVertexShader(x*128+256,y*128+256,SCR1))
end

local inited = false

function OnFrame()
	if not inited then
		CCVXOnInit()
		inited = true
	end

	CCVXOnFrame(true)

	--ShowSplash("YF-2 Tesla")
	
	local p,r,v,b = GetPRVBAnalog(_prvtbl,{p=P,b=AB})
	
	P=p
	R=r
	V=v
	AB=b
	
	local dv = math.rad(-_NORMANALOG(1)*180/30)
	local dy = math.rad((_KEY(5)-_KEY(4))*60/30)
	
	if _gf == 0 then dy = dy * 2 end
	
	--JX = JX_PID:PID(dv,WX,24,16,2,40)
	--JY = JY_PID:PID(dy,WY,24,16,2,40)
	RD = RD_PID:PID(dy,WY,8,8,8,40)
	WS = WS_PID:PID(dy,WY,24,16,2,40)
	
	if _KEY(0) == 0 then
		if _KEYDOWN(6) == 1 then
			if _gf == 0 then _gf = 25
			else _gf = 0 end
			if _gr == 70 then _gr = 180
			else _gr = 70 end
		end
		
		WB=_LINER(WB,_KEY(7)*100,50)
	end
	
	GF=_LINER(GF,_gf,1)
	GR=_LINER(GR,_gr,4.4)
	
	CheckLimit()

	XHUD.Draw()
	
	Weapon.Stat()
end
}
