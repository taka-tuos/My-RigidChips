// [RCD] 
Val
{
	BEAM1(default=0, max=16777216, step=16777216)
	BEAM10(default=0, max=16777216, step=16777216)
	BEAM11(default=0, max=16777216, step=16777216)
	BEAM12(default=0, max=16777216, step=16777216)
	BEAM2(default=0, max=16777216, step=16777216)
	BEAM3(default=0, max=16777216, step=16777216)
	BEAM4(default=0, max=16777216, step=16777216)
	BEAM5(default=0, max=16777216, step=16777216)
	BEAM6(default=0, max=16777216, step=16777216)
	BEAM7(default=0, max=16777216, step=16777216)
	BEAM8(default=0, max=16777216, step=16777216)
	BEAM9(default=0, max=16777216, step=16777216)
	BRAKE(default=0, max=512, step=256)
	HS(default=38, min=-7, max=83)
	LTIRE(default=0, min=-16384, max=65536, step=16384)
	PPH(default=0, max=1966080)
	RTIRE(default=0, min=-16384, max=65536, step=16384)
	VS(default=0, min=-45, max=45)
}
Key
{
	0:LTIRE(step=16384), RTIRE(step=16384)
	1:LTIRE(step=-16384), RTIRE(step=-16384)
	2:RTIRE(step=16384)
	3:LTIRE(step=16384)
	5:BRAKE(step=256)
	7:VS(step=-2)
	8:HS(step=2)
	9:VS(step=2)
	15:HS(step=-2)
}
Body
{
	Core() {
		N:Chip() {
			N:Chip() {
				N:Chip() {
					W:Chip() {
						W:Chip(angle=-90) { }
					}
					E:Chip() {
						E:Chip(angle=-90) { }
					}
					N:Chip() {
						W:Chip() {
							W:Chip(angle=-90) { }
						}
						E:Chip() {
							E:Chip(angle=-90) { }
						}
						S:Chip(angle=20) {
							E:Chip() {
								S:Chip() { }
								E:Jet(power=2048, option=1) { }
							}
							W:Chip() {
								S:Chip() { }
								W:Jet(power=2048, option=1) { }
							}
							S:Chip() { }
						}
						N:Chip() {
							W:Chip() {
								W:Chip(angle=-90) { }
								N:Jet(power=2048, option=1) { }
							}
							E:Chip() {
								E:Chip(angle=-90) { }
								N:Jet(power=2048, option=1) { }
							}
							N:Chip(angle=160) {
								W:Chip() {
									N:Chip() { }
									W:Jet(power=2048, option=1) { }
								}
								E:Chip() {
									N:Chip() { }
									E:Jet(power=2048, option=1) { }
								}
								N:Chip() { }
							}
						}
					}
					S:Frame(angle=-90, option=1) {
						E:Jet(power=RTIRE) {
							E:Jet(power=RTIRE) { }
						}
						W:Jet(power=LTIRE) {
							W:Jet(power=LTIRE) { }
						}
					}
				}
				W:Chip() {
					W:Chip(angle=-90) { }
				}
				E:Chip() {
					E:Chip(angle=-90) { }
				}
			}
			W:Chip() {
				W:Chip(angle=-90) { }
				W:Jet(power=2048, option=1) { }
			}
			E:Chip() {
				E:Chip(angle=-90) { }
				E:Jet(power=2048, option=1) { }
			}
		}
		W:Chip() {
			W:Chip(angle=-90) { }
		}
		E:Chip() {
			E:Chip(angle=-90) { }
		}
		S:Chip() {
			W:Chip() {
				W:Chip(angle=-90) { }
				W:Jet(power=2048, option=1) { }
			}
			E:Chip() {
				E:Chip(angle=-90) { }
				E:Jet(power=2048, option=1) { }
			}
			S:Chip(option=7) {
				W:Chip() {
					W:Chip(angle=-90) { }
					W:Jet(power=2048, option=1) { }
				}
				E:Chip() {
					E:Chip(angle=-90) { }
					E:Jet(power=2048, option=1) { }
				}
			}
		}
		N:Frame(angle=-90) {
			N:Frame() {
				N:Frame(angle=87) {
					S:Frame() {
						S:Chip() {
							S:TrimF(angle=PPH) {
								S:TrimF() {
									W:Frame() {
										S:Chip() { }
									}
									E:Frame() {
										S:Chip() { }
									}
								}
								S:TrimF(angle=30) {
									E:Frame() {
										S:Chip() { }
									}
									W:Frame() {
										S:Chip() { }
									}
								}
								S:TrimF(angle=60) {
									E:Frame() {
										S:Chip() { }
									}
									W:Frame() {
										S:Chip() { }
									}
								}
								S:TrimF(angle=90) {
									E:Frame() {
										S:Chip() { }
									}
									W:Frame() {
										S:Chip() { }
									}
								}
								S:TrimF(angle=120) {
									E:Frame() {
										S:Chip() { }
									}
									W:Frame() {
										S:Chip() { }
									}
								}
								S:TrimF(angle=150) {
									E:Frame() {
										S:Chip() { }
									}
									W:Frame() {
										S:Chip() { }
									}
								}
							}
						}
					}
					N:Chip() {
						N:Chip() {
							N:TrimF(angle=PPH) {
								N:TrimF() {
									E:Frame() {
										N:Arm(power=BEAM4, option=43000, name=MSHOT4) { }
									}
									W:Frame() {
										N:Arm(power=BEAM10, option=43000, name=MSHOT10) { }
									}
								}
								N:TrimF(angle=30) {
									W:Frame() {
										N:Arm(power=BEAM9, option=43000, name=MSHOT9) { }
									}
									E:Frame() {
										N:Arm(power=BEAM3, option=43000, name=MSHOT3) { }
									}
								}
								N:TrimF(angle=60) {
									W:Frame() {
										N:Arm(power=BEAM8, option=43000, name=MSHOT8) { }
									}
									E:Frame() {
										N:Arm(power=BEAM2, option=43000, name=MSHOT2) { }
									}
								}
								N:TrimF(angle=90) {
									W:Frame() {
										N:Arm(power=BEAM7, option=43000, name=MSHOT7) { }
									}
									E:Frame() {
										N:Arm(power=BEAM1, option=43000, name=MSHOT1) { }
									}
								}
								N:TrimF(angle=120) {
									W:Frame() {
										N:Arm(power=BEAM6, option=43000, name=MSHOT6) { }
									}
									E:Frame() {
										N:Arm(power=BEAM12, option=43000, name=MSHOT12) { }
									}
								}
								N:TrimF(angle=150) {
									W:Frame() {
										N:Arm(power=BEAM5, option=43000, name=MSHOT5) { }
									}
									E:Frame() {
										N:Arm(power=BEAM11, option=43000, name=MSHOT11) { }
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
Lua
{NPPH = 0
TPPH = 0
SPPH = 0

function adpph()
	if PPH < TPPH then
		PPH = PPH + 30
	end
end

function main()
	adpph()
	
	if NPPH == 1 then
		BEAM1 = 43000
		NPPH = 0
		TPPH = TPPH + 30
		SPPH = 30
	end
	
	if NPPH == 2 then
		BEAM2 = 43000
		NPPH = 0
		TPPH = TPPH + 30
		SPPH = 60
	end
	
	if NPPH == 3 then
		BEAM3 = 43000
		NPPH = 0
		TPPH = TPPH + 30
		SPPH = 90
	end
	
	if NPPH == 4 then
		BEAM4 = 43000
		NPPH = 0
		TPPH = TPPH + 30
		SPPH = 120
	end
	
	if NPPH == 5 then
		BEAM5 = 43000
		NPPH = 0
		TPPH = TPPH + 30
		SPPH = 150
	end
	
	if NPPH == 6 then
		BEAM6 = 43000
		NPPH = 0
		TPPH = TPPH + 30
		SPPH = 180
	end
	
	if NPPH == 7 then
		BEAM7 = 43000
		NPPH = 0
		TPPH = TPPH + 30
		SPPH = 210
	end
	
	if NPPH == 8 then
		BEAM8 = 43000
		NPPH = 0
		TPPH = TPPH + 30
		SPPH = 240
	end
	
	if NPPH == 9 then
		BEAM9 = 43000
		NPPH = 0
		TPPH = TPPH + 30
		SPPH = 270
	end
	
	if NPPH == 10 then
		BEAM10 = 43000
		NPPH = 0
		TPPH = TPPH + 30
		SPPH = 300
	end
	
	if NPPH == 11 then
		BEAM11 = 43000
		NPPH = 0
		TPPH = TPPH + 30
		SPPH = 330
	end
	
	if NPPH == 12 then
		BEAM12 = 43000
		NPPH = 0
		TPPH = TPPH + 30
		SPPH = 0
	end
	
	if _E(MSHOT12) == 43000 and SPPH == 330 and _KEY(4) == 1 then
		NPPH = 12
	end
	
	if _E(MSHOT11) == 43000 and SPPH == 300 and _KEY(4) == 1 then
		NPPH = 11
	end
	
	if _E(MSHOT10) == 43000 and SPPH == 270 and _KEY(4) == 1 then
		NPPH = 10
	end
	
	if _E(MSHOT9) == 43000 and SPPH == 240 and _KEY(4) == 1 then
		NPPH = 9
	end
	
	if _E(MSHOT8) == 43000 and SPPH == 210 and _KEY(4) == 1 then
		NPPH = 8
	end
	
	if _E(MSHOT7) == 43000 and SPPH == 180 and _KEY(4) == 1 then
		NPPH = 7
	end
	
	if _E(MSHOT6) == 43000 and SPPH == 150 and _KEY(4) == 1 then
		NPPH = 6
	end
	
	if _E(MSHOT5) == 43000 and SPPH == 120 and _KEY(4) == 1 then
		NPPH = 5
	end
	
	if _E(MSHOT4) == 43000 and SPPH ==  90 and _KEY(4) == 1 then
		NPPH = 4
	end
	
	if _E(MSHOT3) == 43000 and SPPH ==  60 and _KEY(4) == 1 then
		NPPH = 3
	end
	
	if _E(MSHOT2) == 43000 and SPPH ==  30 and _KEY(4) == 1 then
		NPPH = 2
	end
	
	if _E(MSHOT1) == 43000 and SPPH ==   0 and _KEY(4) == 1 then
		NPPH = 1
	end
end
}
