// [RCD] 
Val
{
	B(default=0, min=-90, max=90)
	H(default=0, min=-10000000000, max=10000000000)
	JB(default=0, min=-10000000000, max=10000000000)
	JF(default=0, min=-10000000000, max=10000000000)
	JL(default=0, min=-10000000000, max=10000000000)
	JP(default=0, min=-10000000000, max=10000000000)
	JR(default=0, min=-10000000000, max=10000000000)
	S(default=0, min=-10000000000, max=10000000000)
}
Key
{
}
Body
{
	Core() {
		W:Cowl(option=1, effect=#F0FB, name=LS) { }
		E:Cowl(option=1, effect=#F0FB, name=RS) { }
		S:Cowl(option=1, effect=#F0FB, name=TS) { }
		N:Cowl(option=1, effect=#F0FB, name=FS) { }
		E:Frame(option=1) {
			N:Chip() {
				S:Trim(angle=-90) {
					S:Chip(angle=S) { }
					N:Chip() { }
				}
			}
		}
		W:Frame(option=1) {
			N:Chip() {
				N:Frame(option=1) { }
				S:Trim(angle=-90) {
					N:Chip() { }
					S:Chip(angle=S) { }
				}
			}
		}
		N:Frame() {
			N:Jet(power=JF, name=VF) {
				N:Frame(angle=-120, option=1) {
					N:Frame(angle=-150, option=1, name=SF) { }
				}
			}
			S:Frame(angle=-30) {
				S:Jet(angle=120, power=-JP, name=VP) { }
			}
		}
		E:Jet(power=JR, name=VR) {
			E:Frame(angle=-120, option=1) {
				E:Frame(angle=-150, option=1, name=SR) { }
			}
			S:Chip() { }
		}
		W:Jet(power=JL, name=VL) {
			W:Frame(angle=-120, option=1) {
				W:Frame(angle=-150, option=1, name=SL) { }
			}
			S:Chip() { }
		}
		S:Frame() {
			S:Jet(power=JB, name=VB) {
				S:Frame(angle=-120, option=1) {
					S:Frame(angle=-150, option=1, name=SB) { }
				}
			}
		}
		N:Trim(angle=-90) {
			S:Chip() {
				S:Chip() {
					S:Chip() { }
				}
			}
			S:Chip(angle=B) { }
			S:Chip(angle=-B) { }
			N:Chip() { }
		}
	}
}
Lua
{
require("daretoku_taka/xgui.lua")

window_info=nil

XMET={}

_fl=0
_fr=0

_rl=0
_rr=0

_jpm=0

_sms=0

function OnDraw_Window_Info(obj)
	local kph=math.abs(_VEL(0))*3.6
	
	if kph>_sms then _sms=kph end
	
	local fl=math.abs(_POWER(VL)/_jp1)
	local fr=math.abs(_POWER(VR)/_jp1)
	
	local rl=math.abs(_POWER(VF)/_jp1)
	local rr=math.abs(_POWER(VR)/_jp1)
	
	local jp=math.abs(_POWER(VP)/_jp)
	
	if fl>_fl then _fl=fl end
	if fr>_fr then _fr=fr end
	if rl>_rl then _rl=rl end
	if rr>_rr then _rr=rr end
	
	if jp>_jpm then _jpm=jp end
	
	XGUI.WindowDrawBegin(obj)
	
	XGUI.SetStringSize(32)
	
	XGUI.SetStringPosition(192+64,192+64)
	XGUI.DrawVectorStringCenter("速度")
	XGUI.SetStringPosition(192+64,192+64+32)
	XGUI.DrawVectorStringCenter("x1 [km/h]")
	
	XGUI.SetStringSize(16)
	
	XGUI.SetStringPosition(384+96,0+96+32)
	XGUI.DrawVectorStringCenter("左JET出力")
	XGUI.SetStringPosition(384+96,0+96+32+16)
	XGUI.DrawVectorStringCenter("x100 [%]")
	
	XGUI.SetStringPosition(384+288,0+96+32)
	XGUI.DrawVectorStringCenter("右JET出力")
	XGUI.SetStringPosition(384+288,0+96+32+16)
	XGUI.DrawVectorStringCenter("x100 [%]")
	
	XGUI.SetStringPosition(384+96,0+288+32)
	XGUI.DrawVectorStringCenter("前JET出力")
	XGUI.SetStringPosition(384+96,0+288+32+16)
	XGUI.DrawVectorStringCenter("x100 [%]")
	
	XGUI.SetStringPosition(384+288,0+288+32)
	XGUI.DrawVectorStringCenter("後JET出力")
	XGUI.SetStringPosition(384+288,0+288+32+16)
	XGUI.DrawVectorStringCenter("x100 [%]")
	
	XGUI.SetStringPosition(384+480,0+96+32)
	XGUI.DrawVectorStringCenter("推進JET出力")
	XGUI.SetStringPosition(384+480,0+96+32+16)
	XGUI.DrawVectorStringCenter("x10 [%]")
	
	XGUI.SetStringPosition(384+480,0+288+32)
	XGUI.DrawVectorStringCenter("FPS")
	XGUI.SetStringPosition(384+480,0+288+32+16)
	XGUI.DrawVectorStringCenter("x1 [FPS]")
	
	XMET.Draw(obj,192,192,192,90,360,15/1.5,20,kph,540,_sms)
	
	XMET.Draw(obj,384+96 ,  0+96 ,96,90,360,27*2,1,fl,5,_fl)
	XMET.Draw(obj,384+288,  0+96 ,96,90,360,27*2,1,fr,5,_fr)
	
	XMET.Draw(obj,384+96 ,  0+288,96,90,360,27*2,1,rl,5,_rl)
	XMET.Draw(obj,384+288,  0+288,96,90,360,27*2,1,rr,5,_rr)
	
	XMET.Draw(obj,384+480,  0+96 ,96,90,360,27,1,jp,1,_jpm)
	
	XMET.Draw(obj,384+480,  0+288,96,90,360,18,2,_FPS(),30)
	
	XGUI.WindowDrawEnd()
end

-- x : X座標
-- y : Y座標
-- s : メーター半径
-- c : 目盛始端角度(deg)
-- d : 目盛終端角度(deg)
-- e : 何度ごとに目盛数字があるか
-- f : 目盛数字の一個ごとの差
-- g : 針で示す数値
-- h : 針がd度の位置にあるときのgの値
-- i : 針で示す数値(2)
-- j : 針で示す数値(3)

function XMET.Draw(obj,x,y,s,c,d,e,f,g,h,i,j)
	XGUI.SetDrawColorINT(2105376)
	
	XMET.Circle(obj,x,y,s)
	
	XMET.Circle(obj,x,y,s/10)
	
	XGUI.SetDrawColorINT(0)
	
	XMET.CircleString(obj,x,y,s*0.75,c,d,e,f)
	
	XMET.CircleM(obj,x,y,s*0.9,s,c,d,e)
	
	XGUI.SetDrawColorINT(2105376)
	
	XMET.CircleM(obj,x,y,s*0.95,s,c,d,e/10)
	
	if j ~= nil then XMET.Needle(obj,x,y,s,c - (j / h * math.abs(d-c)),65280) end
	if i ~= nil then XMET.Needle(obj,x,y,s,c - (i / h * math.abs(d-c)),255) end
	XMET.Needle(obj,x,y,s,c - (g / h * math.abs(d-c)),16711680)
end

function XMET.Circle(obj,x,y,s)
	local i
	XGUI.Move2D(math.cos((math.pi*2/32)*0)*s+x,math.sin((math.pi*2/32)*0)*s+y)
	for i=1,32 do
		XGUI.Line2D(math.cos((math.pi*2/32)*i)*s+x,math.sin((math.pi*2/32)*i)*s+y)
	end
end

function XMET.CircleString(obj,x,y,s,a,b,c,d)
	local i,j,k
	j = 0
	for i=a,b,c do
		k = string.format("%d",j)
		local vx = math.cos(math.rad(i))*s+x
		local vy = math.sin(math.rad(i))*s+y
		XGUI.SetStringPosition(vx,vy)
		XGUI.SetDrawColorINT(16777215)
		XGUI.DrawVectorStringCenter(k)
		j = j + d
	end
end

function XMET.CircleM(obj,x,y,s,t,a,b,c)
	local i,j,k
	for i=a,b,c do
		local x0 = math.cos(math.rad(i))*s+x
		local y0 = math.sin(math.rad(i))*s+y
		
		local x1 = math.cos(math.rad(i))*t+x
		local y1 = math.sin(math.rad(i))*t+y
		
		XGUI.Move2D(x0,y0)
		XGUI.Line2D(x1,y1)
	end
end

function XMET.Rotation(px,py,pr)
	local rx = px * math.cos(pr) - py * math.sin(pr)
	local ry = px * math.sin(pr) - py * math.cos(pr)
	return rx,ry
end

function XMET.Needle(obj,x,y,s,a,c)
	XGUI.SetDrawColorINT(c)
	
	local i,j = XMET.Rotation(s*0.9,0,math.rad(180-a))
	local k,l = XMET.Rotation(-s*0.25,0,math.rad(180-a))
	
	i = i + x
	j = j + y
	
	k = k + x
	l = l + y
	
	XGUI.Move2D(i,j)
	XGUI.Line2D(k,l)
end

do
	local FSX=_X(FS)
	local FSY=_Y(FS)
	local FSZ=_Z(FS)
	local RSX=_X(RS)
	local RSY=_Y(RS)
	local RSZ=_Z(RS)
	local LSX=_X(LS)
	local LSY=_Y(LS)
	local LSZ=_Z(LS)
	local TSX=_X(TS)
	local TSY=_Y(TS)
	local TSZ=_Z(TS)
	
	function MF(a)
		local FX=_X(FS)-FSX
		local FY=_Y(FS)-FSY
		local FZ=_Z(FS)-FSZ
		local RX=_X(RS)-RSX
		local RY=_Y(RS)-RSY
		local RZ=_Z(RS)-RSZ
		local LX=_X(LS)-LSX
		local LY=_Y(LS)-LSY
		local LZ=_Z(LS)-LSZ
		local TX=_X(TS)-TSX
		local TY=_Y(TS)-TSY
		local TZ=_Z(TS)-TSZ

		WX=(FX*_YX(FS)+FY*_YY(FS)+FZ*_YZ(FS))-(TX*_YX(TS)+TY*_YY(TS)+TZ*_YZ(TS))
		WY=(RX*_ZX(RS)+RY*_ZY(RS)+RZ*_ZZ(RS))-(LX*_ZX(LS)+LY*_ZY(LS)+LZ*_ZZ(LS))
		WZ=(RX*_YX(RS)+RY*_YY(RS)+RZ*_YZ(RS))-(LX*_YX(LS)+LY*_YY(LS)+LZ*_YZ(LS))
		VEL=(FX*_ZX(FS)+FY*_ZY(FS)+FZ*_ZZ(FS))*3.6
		VX=(FX*_XX(FS)+FY*_XY(FS)+FZ*_XZ(FS))*3.6

		VY=(FX*_YX(FS)+FY*_YY(FS)+FZ*_YZ(FS))*3.6

		FSX=_X(FS)
		FSY=_Y(FS)
		FSZ=_Z(FS)
		RSX=_X(RS)
		RSY=_Y(RS)
		RSZ=_Z(RS)
		LSX=_X(LS)
		LSY=_Y(LS)
		LSZ=_Z(LS)
		TSX=_X(TS)
		TSY=_Y(TS)
		TSZ=_Z(TS)
	end
end

function _VEL(n)
	return _LEN3( _VX(n), _VY(n), _VZ(n))
end

function _LEN3(a,b,c)
	return math.sqrt(a * a + b * b + c * c)
end

function _LINER(v,t,s)
	local r=v
	if v<t then r=v+s end
	if v>t then r=v-s end
	if r>t and v<t then r=t end
	if r<t and v>t then r=t end
	return t
end

_jp=200000
_jp1=150000
_jp2=_jp1/10
_hp=0.2
_ba=90
_sp=20

function _NORMANALOG(n)
	local v = _ANALOG(n)
	if v < 100 and v > -100 then v = 0 end
	return v/1000
end

function XPID_new()
	local obj = {
		i = 0,
		d = 0,
		e_b = 0,

		PID = function (self,now,tgt,kp,ki,kd,lim)
			local e_n = now - tgt
			local e_d = e_n - self.e_b
			
			local p = e_n * kp
			
			local i = self.i + e_n * ki
			
			local d = e_d * kd
			
			i=math.min(20000,math.max(-20000,i))
			
			self.i = i
			
			self.e_b = e_n
			
			local pid = p+i+d
			
			pid = math.min(lim,math.max(-lim,pid))
			
			return pid
		end
	}
	
	return obj
end

_pfr=XPID_new()
_pfl=XPID_new()
_prr=XPID_new()
_prl=XPID_new()

function _GETHJ(n,o,d,pid)
	local tr=_RANGE(n)-1+d
	local tv=-_VY(o)
	
	if tr+1<0 then tr=0 end
	if tr>0 then tr=tr*0.8 end
	
	return pid:PID(_RANGE(n),1+d,_jp,_jp/8,_jp,_jp)
end

function OnFrame()
	if window_info == nil then
		window_info=XGUI.CreateWindow(960,384,"計器類 (MAX=青針,NOW=赤針)",OnDraw_Window_Info,true)
	end
	
	MF()
	
	local key4 = -_NORMANALOG(5)
	local key0 = _NORMANALOG(5)
	local key1 = 0
	
	if key0 < 0 then
		if _KEY(14) == 1 then
			key1 = -key0
		end
		key0 = 0
	end
	
	if key4 < 0 or key1 > 0 then key4 = 0 end
	
	JP=_LINER(JP,(key0-key1)*_jp,_jp/10)
	H=_LINER(H,(_NORMANALOG(0))*_hp,_hp/2)
	B=_LINER(B,key4*_ba,_ba/3)
	S=(_NORMANALOG(0))*_sp*(0.9^(_VEL()*3.6/200))
	
	--if (_NORMANALOG(0)) == 0 then
	--	S=WY*-_sp*2
	--end
	
	JF=-_GETHJ(SF,VF,0,_pfr)
	JB=-_GETHJ(SB,VB,0,_pfl)
	JR=-_GETHJ(SR,VR,H,_prr)
	JL=-_GETHJ(SL,VL,-H,_prl)
	
	XGUI.RefreshWindowManager()
end
}
