// [RCD] 
Val
{
	E0(default=0, min=-90, max=90)
	G0(default=0, max=10000000000)
	G1(default=0, max=10000000000)
	G2(default=0, max=10000000000)
	G3(default=0, max=10000000000)
	P(default=0, min=-10000000000, max=10000000000)
	R(default=0, min=-90, max=90)
	T(default=0, min=-90, max=90)
	V(default=0, min=-90, max=90)
	V0(default=0, min=-90, max=90)
	V1(default=0, min=-90, max=90)
	V2(default=0, min=-90, max=90)
	V3(default=0, min=-90, max=90)
	Y(default=0, min=-90, max=90)
}
Key
{
}
Body
{
	Core() {
		W:Cowl(option=1, effect=#F0FB, name=LS) { }
		E:Cowl(option=1, effect=#F0FB, name=RS) { }
		S:Cowl(option=1, effect=#F0FB, name=TS) { }
		N:Cowl(option=1, effect=#F0FB, name=FS) { }
		N:Frame(angle=170) {
			N:Frame(angle=-170) {
				S:TrimF(angle=90, option=1, spring=1, damper=1) {
					W:Rudder(angle=90, spring=1, damper=1) {
						E:Trim(spring=1, damper=1) {
							W:TrimF(angle=-90) {
								N:Frame(angle=-150) {
									N:Chip(angle=-35) {
										N:Trim(angle=-R) {
											N:Chip() { }
										}
										N:Cowl(option=1) {
											N:Cowl() {
												N:Cowl() {
													N:Cowl(angle=90, option=1, effect=#F0FB) {
														W:Cowl(angle=85, option=1, effect=#F0FB) {
															S:Cowl(angle=90) {
																W:Cowl() {
																	W:Cowl() {
																		W:Cowl() { }
																	}
																}
															}
														}
														E:Cowl(angle=80, option=1, effect=#F0FB) {
															S:Cowl(angle=90) {
																E:Cowl() {
																	E:Cowl() {
																		E:Cowl() { }
																	}
																	W:Cowl(angle=-90, option=1, effect=#F0FB) {
																		S:Cowl(angle=-70, option=1, effect=#F0FB) {
																			E:Cowl(angle=-91, option=2, color=#FF0000) { }
																			E:Cowl(angle=-89, option=2, color=#FF0000) { }
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
										S:Cowl(angle=-5) { }
										N:Wheel(angle=E0) { }
									}
								}
								S:Frame(angle=-150) {
									S:Chip(angle=-35) {
										S:Trim(angle=-R) {
											S:Chip() { }
										}
										S:Cowl(option=1) {
											S:Cowl() {
												S:Cowl() {
													S:Cowl(angle=90, option=1, effect=#F0FB) {
														W:Cowl(angle=85, option=1, effect=#F0FB) {
															N:Cowl(angle=90) {
																W:Cowl() {
																	W:Cowl() {
																		W:Cowl() { }
																	}
																}
															}
														}
														E:Cowl(angle=80, option=1, effect=#F0FB) {
															N:Cowl(angle=90) {
																E:Cowl() {
																	E:Cowl() {
																		E:Cowl() { }
																	}
																	W:Cowl(angle=-90, option=1, effect=#F0FB) {
																		N:Cowl(angle=-70, option=1, effect=#F0FB) {
																			E:Cowl(angle=-89, option=2, color=#FF0000) { }
																			E:Cowl(angle=-91, option=2, color=#FF0000) { }
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
										N:Cowl(angle=-5) { }
										S:Wheel(angle=E0) { }
									}
								}
								W:Chip(angle=0, name=CRE) {
									W:Frame(angle=V0) {
										W:Arm(option=50000, power=G0, angle=-V0, name=A0) { }
									}
									W:Frame(angle=V1) {
										W:Arm(option=50000, power=G1, angle=-V1, name=A1) { }
									}
									W:Frame(angle=V2) {
										W:Arm(option=50000, power=G2, angle=-V2, name=A2) { }
									}
									W:Frame(angle=V3) {
										W:Arm(option=50000, power=G3, angle=-V3, name=A3) { }
									}
									E:Chip(angle=-V) { }
								}
							}
							E:Trim(spring=1, damper=1) {
								E:RudderF(angle=15, option=1) {
									E:Wheel() { }
								}
								E:Trim(spring=1, damper=1) {
									E:Chip(angle=Y) {
										N:Chip() { }
									}
									N:Rudder(angle=60) {
										N:Rudder(angle=30) {
											S:Cowl(option=4) { }
										}
										S:Cowl() { }
										S:Chip() { }
									}
									E:TrimF(angle=-90, option=1) {
										S:Frame(angle=150, option=1) {
											S:Frame(angle=35, option=1) {
												N:Trim(angle=V) {
													S:Chip() { }
												}
												S:Cowl() {
													S:Cowl(angle=90, option=1, effect=#F0FB) {
														W:Cowl(angle=70, option=1, effect=#F0FB) {
															N:Cowl(angle=90) {
																W:Cowl() { }
															}
														}
													}
												}
											}
										}
										N:Frame(angle=150, option=1) {
											N:Frame(angle=35, option=1) {
												S:Trim(angle=-V) {
													N:Chip() { }
												}
												N:Cowl() {
													N:Cowl(angle=90, option=1, effect=#F0FB) {
														W:Cowl(angle=70, option=1, effect=#F0FB) {
															S:Cowl(angle=90) {
																W:Cowl() { }
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
						W:Weight(option=1) { }
					}
				}
				N:Cowl(angle=5) {
					N:Cowl(angle=25, option=5) { }
					S:Cowl(angle=-20, color=#202040, effect=#70FB) {
						S:Cowl(angle=20, color=#202040, effect=#70FB) {
							S:Cowl(angle=20, color=#202040, effect=#70FB) {
								S:Cowl(angle=5, color=#202040, effect=#70FB) {
									E:Cowl(angle=90, color=#202040, effect=#70FB) { }
									W:Cowl(angle=90, color=#202040, effect=#70FB) { }
								}
								E:Cowl(angle=90, color=#202040, effect=#70FB) { }
								W:Cowl(angle=90, color=#202040, effect=#70FB) { }
							}
							E:Cowl(angle=90, color=#202040, effect=#70FB) { }
							W:Cowl(angle=90, color=#202040, effect=#70FB) { }
						}
						E:Cowl(angle=90, color=#202040, effect=#70FB) { }
						W:Cowl(angle=90, color=#202040, effect=#70FB) { }
					}
				}
				E:Cowl(angle=90) {
					N:Cowl(angle=5) {
						N:Cowl(angle=25, option=5) { }
						S:Cowl() {
							S:Cowl(angle=5) {
								S:Cowl() {
									S:Cowl(angle=5) {
										S:Cowl(angle=5) {
											S:Cowl(angle=5) {
												E:Cowl(angle=90, option=4) { }
											}
											E:Cowl(angle=90) { }
											W:Cowl(angle=90, option=3) { }
										}
										W:Cowl(angle=90) { }
										E:Cowl(angle=90) { }
									}
									W:Cowl(angle=90) { }
									E:Cowl(angle=90) { }
								}
								W:Cowl(angle=90) { }
								E:Cowl(angle=90) { }
							}
							W:Cowl(angle=90) { }
							E:Cowl(angle=90) { }
							S:Cowl(angle=4, option=2, color=#FF0000) { }
						}
					}
				}
				W:Cowl(angle=90) {
					N:Cowl(angle=5) {
						N:Cowl(angle=25, option=5) { }
						S:Cowl() {
							S:Cowl(angle=5) {
								S:Cowl() {
									S:Cowl(angle=5) {
										S:Cowl(angle=5) {
											W:Cowl(angle=90) { }
											S:Cowl(angle=5) {
												W:Cowl(angle=90, option=3) { }
											}
											E:Cowl(angle=90, option=4) { }
										}
										E:Cowl(angle=90) { }
										W:Cowl(angle=90) { }
									}
									E:Cowl(angle=90) { }
									W:Cowl(angle=90) { }
								}
								E:Cowl(angle=90) { }
								W:Cowl(angle=90) { }
							}
							E:Cowl(angle=90) { }
							W:Cowl(angle=90) { }
							S:Cowl(angle=4, option=2, color=#FF0000) { }
						}
					}
				}
				S:Cowl(angle=90) {
					S:Cowl(angle=90) {
						S:Cowl(angle=5) {
							S:Cowl(angle=25, option=5) { }
						}
					}
				}
				S:Frame(angle=0, option=1) {
					S:RLW(angle=90, power=P) {
						E:Trim(angle=T) { }
						W:Trim(angle=T) { }
						N:Trim(angle=T) { }
						S:Trim(angle=T) { }
					}
				}
			}
		}
	}
}
Lua
{
require("daretoku_taka/xgui.lua")
require("daretoku_taka/xhud2.lua")
require("daretoku_taka/libccvx3.lua")
require("daretoku_taka/libgun.lua")
require("daretoku_taka/libweapon.lua")

_limitlist={1500,1800,2000,2200,2500,64512}

_prvtbl = InitPRVTable()

_prvtbl.p.limit = 360000
_prvtbl.p.step  = 360000

_prvtbl.r.tgt = 120
_prvtbl.r.kp  = 12
_prvtbl.r.ki  = 24
_prvtbl.r.kd  = 4
_prvtbl.r.il  = 20

_prvtbl.v.tgt = 60
_prvtbl.v.kp  = 32
_prvtbl.v.ki  = 48
_prvtbl.v.kd  = 4
_prvtbl.v.il  = 40

RD_PID = XPID_new()

_ng = 0

_init = false

_e0t=85

function OnFrame()
	if not _init then
		CCVXOnInit({ Gun={func=_KEY,fire=2,op=50000,an=4,ang=-65} })
		_init = true
	end
	
	local nk=_VEL(0)*3.6
	
	--T=55
	T=math.max(25*((nk-130)/400)+55,55)
	
	E0=_LINER(E0,_e0t,8)
	
	if _KEYDOWN(6) == 1 then
		_e0t=85-_e0t
	end
	
	CCVXOnFrame()

	ShowSplash("XU-6 Kiribana")
	
	local p,r,v,b = GetPRVBAnalog(_prvtbl,{p=P,b=0})
	
	local dy = math.rad((_KEY(5)-_KEY(4))*60/30)
	
	Y = RD_PID:PID(dy,WY,24,16,2,40)
	
	P=p
	R=-r
	V=v
	
	CheckLimit()
	
	XHUD.Draw()
	
	Weapon.Stat()
end
}
