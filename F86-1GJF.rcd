// [RCD] 
Val
{
	P(default=0, max=10000000000)
	R(default=0, min=-180, max=180)
	V(default=0, min=-180, max=180)
}
Key
{
}
Body
{
	Core() {
		N:Frame(angle=90) {
			S:Cowl(angle=-90) {
				S:Cowl(angle=-20, option=5) {
					N:Cowl(angle=-10, option=0) {
						N:Cowl(angle=20, color=0, effect=#80FB) {
							N:Cowl(angle=-55, color=0, effect=#80FB) {
								N:Cowl(angle=22.5) {
									E:Cowl(angle=-91) {
										N:Cowl(angle=-5) {
											N:Cowl(angle=-5) { }
											W:Cowl(angle=-150) { }
											E:Cowl(angle=-150) { }
											W:Cowl(angle=-90, option=4) { }
										}
									}
									W:Cowl(angle=-91) {
										N:Cowl(angle=-5) {
											N:Cowl(angle=-5) { }
											E:Cowl(angle=-150) { }
											W:Cowl(angle=-150) { }
											E:Cowl(angle=-90, option=3) { }
										}
									}
								}
								E:Cowl(angle=-95, color=0, effect=#80FB) {
									N:Cowl(option=4) { }
								}
								W:Cowl(angle=-95, color=0, effect=#80FB) {
									N:Cowl(option=3) { }
								}
							}
							E:Cowl(angle=-95, color=0, effect=#80FB) { }
							W:Cowl(angle=-95, color=0, effect=#80FB) { }
						}
						E:Cowl(angle=-95) { }
						W:Cowl(angle=-95) { }
					}
				}
			}
			N:Weight(angle=-90) {
				W:Cowl(angle=-90) {
					N:Cowl(angle=-20, option=5) { }
				}
				E:Cowl(angle=-90) {
					N:Cowl(angle=-20, option=5) { }
				}
				N:Cowl(angle=-20, option=5) { }
				S:Chip() {
					E:Cowl(angle=-90) { }
					W:Cowl(angle=-90) { }
					S:TrimF(angle=-90, option=1) {
						W:Rudder(angle=-90) {
							E:Chip() { }
						}
					}
					S:Frame(name=VC) {
						E:Cowl(angle=-90) { }
						W:Cowl(angle=-90) { }
						S:Cowl(angle=-2) {
							E:Cowl(angle=-90) {
								S:Cowl(angle=-5) {
									S:Cowl(angle=-2) {
										S:Cowl() {
											E:Cowl(angle=-155) { }
										}
										E:Cowl(angle=-150) { }
										W:Cowl(angle=-150) { }
									}
									E:Cowl(angle=-150) { }
									W:Cowl(angle=-150) { }
								}
							}
							W:Cowl(angle=-90) {
								S:Cowl(angle=-5) {
									S:Cowl(angle=-2) {
										S:Cowl() {
											W:Cowl(angle=-155) { }
										}
										W:Cowl(angle=-150) { }
										E:Cowl(angle=-150) { }
									}
									W:Cowl(angle=-150) { }
									E:Cowl(angle=-150) { }
								}
							}
						}
						S:Frame() {
							E:Cowl(angle=-90) {
								E:Cowl(angle=-95) { }
							}
							S:Frame(option=1) {
								S:TrimF(angle=-90, option=1) {
									S:Frame(option=1) {
										W:Chip() {
											W:Cowl(option=5) { }
										}
									}
									W:Rudder(angle=-35) {
										W:Chip() { }
									}
								}
								S:Frame(angle=-40, option=1) {
									S:Frame(angle=-140) {
										N:RudderF(angle=-55, option=1) {
											N:Trim(angle=V) {
												S:Chip() { }
												N:Cowl() {
													E:Cowl(angle=-90, option=1, effect=#F0FB) {
														N:Cowl(angle=165, option=1, effect=#F0FB) {
															W:Cowl(angle=90) {
																N:Cowl() {
																	N:Cowl() { }
																}
															}
														}
													}
												}
											}
										}
										N:RudderF(angle=55, option=1) {
											N:Trim(angle=-V) {
												S:Chip() { }
												N:Cowl() {
													W:Cowl(angle=-90, option=1, effect=#F0FB) {
														N:Cowl(angle=165, option=1, effect=#F0FB) {
															E:Cowl(angle=90) {
																N:Cowl() {
																	N:Cowl() { }
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
							W:Cowl(angle=-90) {
								W:Cowl(angle=-95) { }
							}
						}
						S:Jet(angle=-90, power=P) { }
					}
					S:Cowl() { }
					N:Frame() { }
					N:Frame() { }
					E:Rudder(angle=35) {
						E:Trim(angle=-R) {
							E:Chip() { }
						}
						E:Cowl(option=1, effect=#F0FB) {
							E:Cowl(option=1, effect=#F0FB) {
								E:Cowl() {
									E:Cowl() {
										E:Cowl(angle=90, option=1, effect=#F0FB) {
											S:Cowl(angle=80, option=1, effect=#F0FB) {
												W:Cowl(angle=90) {
													S:Cowl() {
														S:Cowl() {
															S:Cowl() {
																S:Cowl() { }
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
						W:Cowl() { }
					}
					W:Rudder(angle=-35) {
						W:Trim(angle=-R) {
							W:Chip() { }
						}
						W:Cowl(option=1, effect=#F0FB) {
							W:Cowl(option=1, effect=#F0FB) {
								W:Cowl() {
									W:Cowl() {
										W:Cowl(angle=90, option=1, effect=#F0FB) {
											S:Cowl(angle=80, option=1, effect=#F0FB) {
												E:Cowl(angle=90) {
													S:Cowl() {
														S:Cowl() {
															S:Cowl() {
																S:Cowl() { }
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
						E:Cowl() { }
					}
				}
			}
		}
	}
}
Lua
{
require("daretoku_taka/xgui.lua")
require("daretoku_taka/xhud-le.lua")
require("daretoku_taka/libccvx3.lua")
require("daretoku_taka/libgun.lua")
require("daretoku_taka/libweapon.lua")

_limitlist={1500,1800,2000,2200,2500,64512}

_prvtbl = InitPRVTable()

_prvtbl.p.limit = 400000
_prvtbl.p.step  = 200000

_prvtbl.r.tgt = 360
_prvtbl.r.kp  = 12
_prvtbl.r.ki  = 12
_prvtbl.r.kd  = 4
_prvtbl.r.il  = 20

_prvtbl.v.tgt = 180
_prvtbl.v.kp  = 12
_prvtbl.v.ki  = 16
_prvtbl.v.kd  = 4
_prvtbl.v.il  = 20

WS_PID = XPID_new()
RD_PID = XPID_new()

RX_PID = XPID_new()
VX_PID = XPID_new()

local inited = false

_mv=0
_my=0
_xy=0

_gf=25
_gr=70

_vm=false
_vmv=0

function OnFrame()
	if not inited then
		CCVXOnInit()
		inited = true
	end

	CCVXOnFrame(true)
	
	out(0,string.format("%.3f km/h @ %.2f m", _mv*3.6, _my))
	out(1,string.format("MAX %.2f m", _xy))
	
	if _mv < _VEL(0) then
		_mv = _VEL(0)
		_my = _Y(0)
	end
	
	
	if _xy < _Y(0) then
		_xy = _Y(0)
	end
	
	if _KEYDOWN(7) == 1 then
		_vm = not _vm
		_vmv = _VEL()
	end
	
	local p,r,v,b = GetPRVBAnalog(_prvtbl,{p=P,b=0})
	
	v = VX_PID:PID(0,WY,24,0,0,1000) + -_NORMANALOG(1) * 20
	r = RX_PID:PID(0,WZ,24,0,0,1000) + _NORMANALOG(0) * 20
	
	if _vm then
		local dif = _VEL() - _vmv
		out(2,dif)
		--p = SS_PID:PID(0,dif,100000,20000,20000,500000)
	end
	
	P=p
	R=r
	V=v
	AB=b
	
	local ay = (_KEY(5)-_KEY(4))*10
	
	RD = ay
	WS = ay
	
	if _gf == 0 then ay = ay * 2 end
	
	CheckLimit()
	
	XHUD.Draw()
	
	Weapon.Stat()
end
}
