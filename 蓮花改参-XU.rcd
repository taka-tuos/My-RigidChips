// [RCD] 
Val
{
	B1K(default=0, max=16777216, step=16777216)
	DRE(default=0, max=16384)
	ELON(default=0, min=-16, max=16, step=4)
	ENGINE(default=0, max=307200, step=65536)
	EVTR(default=0, min=-16, max=16, step=8)
	FLAG(default=-90, min=-90, max=0, step=9)
	G0(default=-45, min=-45, max=-5)
	G1(default=-55, min=-55, max=0)
	GUN1(default=0, max=65536, step=65536)
	GUN2(default=0, max=65536, step=65536)
	GUN3(default=0, max=65536, step=65536)
	GUN4(default=0, max=65536, step=65536)
	PTCH(default=55, min=55, max=90)
	ST37(default=0, max=16777216, step=16777216)
	VAR(default=0, max=262144)
}
Key
{
	0:EVTR(step=8)
	1:EVTR(step=-8)
	2:ELON(step=8)
	3:ELON(step=-8)
	4:ENGINE(step=65536)
	11:FLAG(step=9), DRE(step=131072)
	13:ST37(step=16777216)
	14:G1(step=5), G0(step=5)
	15:G0(step=-5), G1(step=-5)
}
Body
{
	Core(color=#202020) {
		S:Frame(angle=160, option=1) {
			S:Frame(angle=20, option=1) {
				S:Frame(angle=-90, option=1) {
					S:Frame(angle=-90, color=#202020, spring=1, damper=1) {
						W:Chip(angle=-170, color=#202020) {
							W:Trim(angle=ELON, color=#202020) {
								S:Rudder(angle=15, color=#202020) {
									E:Cowl(option=5, color=#202020) { }
									W:Chip(angle=-10, color=#202020) {
										W:Cowl(angle=0, color=#202020) {
											W:Cowl(option=5, color=#202020) { }
										}
										W:Cowl(angle=2, option=2, color=#FF0000) { }
										W:Cowl(angle=-2, option=2, color=#FF0000) { }
									}
								}
								S:Cowl(angle=1, option=4, color=#202020) { }
								W:Chip(angle=-10, color=#202020) {
									W:Chip(angle=0, color=#202020) {
										W:Cowl(option=5, color=#202020) { }
									}
								}
							}
							W:Frame(option=1) {
								W:Frame(angle=G0, color=#202020) {
									W:Wheel(angle=G1, option=0, effect=2) { }
								}
								W:Frame(angle=-10, option=1) { }
							}
						}
						E:Chip(angle=-170, color=#202020) {
							E:Trim(angle=ELON, color=#202020) {
								S:Rudder(angle=-15, color=#202020) {
									W:Cowl(option=5, color=#202020) { }
									E:Chip(angle=-10, color=#202020) {
										E:Cowl(angle=0, color=#202020) {
											E:Cowl(option=5, color=#202020) { }
										}
										E:Cowl(angle=2, option=2, color=#FF0000) { }
										E:Cowl(angle=-2, option=2, color=#FF0000) { }
									}
								}
								S:Cowl(angle=1, option=3, color=#202020) { }
								E:Chip(angle=-10, color=#202020) {
									E:Chip(angle=0, color=#202020) {
										E:Cowl(option=5, color=#202020) { }
									}
								}
							}
							E:Frame(angle=0, option=1) {
								E:Frame(angle=G0, color=#202020) {
									E:Wheel(angle=G1, option=0, effect=2) { }
								}
								E:Frame(angle=-10, option=1) { }
							}
						}
						E:Chip(angle=-90, color=#202020) { }
						W:Chip(angle=-90, color=#202020) { }
						S:Chip(color=#202020, spring=1, damper=1) {
							E:Chip(angle=-90, color=#202020) { }
							W:Chip(angle=-90, color=#202020) { }
							S:Chip(color=#202020, spring=1, damper=1) {
								E:Chip(angle=-90, color=#202020) { }
								W:Chip(angle=-90, color=#202020) { }
								S:Chip(color=#202020, spring=1, damper=1) {
									E:Chip(angle=-90, color=#202020) { }
									W:Chip(angle=-90, color=#202020) { }
									S:Chip(color=#202020, spring=1, damper=1) {
										S:Frame(option=1, color=#202020, spring=1, damper=1) {
											E:Frame(angle=-170, option=1) {
												E:Trim(angle=-EVTR, color=#202020) {
													E:Cowl(angle=-10, option=5, color=#202020) { }
													W:Frame(option=1) {
														N:Rudder(angle=20, color=#202020) {
															E:Chip(color=#202020) {
																E:Cowl(angle=-10, option=5, color=#202020) { }
																W:Chip(color=#202020) { }
															}
														}
													}
													W:Cowl(angle=10, color=#202020) { }
												}
											}
											W:Frame(angle=-170, option=1) {
												W:Trim(angle=EVTR, color=#202020) {
													W:Cowl(angle=-10, option=5, color=#202020) { }
													E:Frame(option=1) {
														N:Rudder(angle=-20, color=#202020) {
															W:Chip(color=#202020) {
																W:Cowl(angle=-10, option=5, color=#202020) { }
																E:Chip(color=#202020) { }
															}
														}
													}
													E:Cowl(angle=10, color=#202020) { }
												}
											}
										}
									}
								}
								S:TrimF(angle=-90, option=1) {
									W:Rudder(angle=-60, color=#202020) {
										S:Rudder(angle=60, color=#202020) {
											N:Chip(color=#202020) {
												N:Chip(color=#202020) {
													N:Chip(color=#202020) {
														N:Frame(option=1) { }
													}
												}
											}
											S:Chip(color=#202020) {
												W:Chip(color=#202020) { }
											}
											W:Rudder(angle=-40, color=#202020) { }
										}
										W:Chip(color=#202020) {
											W:Cowl(option=5, color=#202020) { }
										}
									}
									S:Frame(option=1) {
										S:Wheel(effect=2) { }
									}
								}
							}
						}
						N:Chip(color=#202020) {
							W:Chip(angle=-90, color=#202020) {
								N:Arm(angle=0, power=GUN4, option=50000, color=#404040) { }
							}
							E:Chip(angle=-90, color=#202020) {
								N:Arm(angle=0, power=GUN2, option=50000, color=#404040) { }
							}
							S:Cowl(angle=5) {
								S:Cowl(angle=-2, color=#202020) {
									S:Cowl(angle=-4, color=#202020) {
										S:Cowl(angle=-2, color=#202020) {
											W:Cowl(angle=-85, color=#202020) {
												S:Cowl(angle=-10, color=#202020) {
													S:Cowl(color=#202020) { }
												}
											}
											E:Cowl(angle=-85, color=#202020) {
												S:Cowl(angle=-10, color=#202020) {
													S:Cowl(color=#202020) { }
												}
											}
										}
										W:Cowl(angle=-85, color=#202020) { }
										E:Cowl(angle=-85, color=#202020) { }
									}
									W:Cowl(angle=-85, color=#202020) {
										S:Cowl(option=2, color=#FF0000) { }
									}
									E:Cowl(angle=-85, color=#202020) {
										S:Cowl(option=2, color=#FF0000) { }
									}
								}
								W:Cowl(angle=-85) { }
								E:Cowl(angle=-85) { }
							}
							N:Frame(angle=-90, option=1) {
								N:Arm(angle=90, power=GUN1, option=50000, color=#404040) { }
							}
							N:RLW(angle=-90, power=ENGINE, color=0) {
								W:Trim(angle=PTCH, color=#202020, spring=1, damper=1) { }
								E:Trim(angle=PTCH, color=#202020, spring=1, damper=1) { }
							}
							N:RLW(angle=-90, power=-ENGINE, color=0) {
								W:Trim(angle=-PTCH, color=#202020, spring=1, damper=1) { }
								E:Trim(angle=-PTCH, color=#202020, spring=1, damper=1) { }
							}
							N:Cowl(angle=-30, color=#808080) {
								N:Cowl(angle=-120, color=#808080) {
									W:Cowl(angle=-95, option=3, color=#808080) { }
									E:Cowl(angle=-95, option=4, color=#808080) { }
								}
								E:Cowl(angle=-95, option=3, color=#808080) { }
								W:Cowl(angle=-95, option=4, color=#808080) { }
							}
							S:Cowl(angle=-90, color=0) {
								S:Cowl(angle=-90, color=#202020) {
									N:Cowl(angle=30, color=0, effect=#50FB) {
										N:Cowl(angle=-30, color=0, effect=#50FB) {
											N:Cowl(angle=-7, color=#202020) {
												N:Cowl(angle=-2, color=#202020) {
													E:Cowl(angle=-85, color=#202020) {
														N:Cowl(angle=-10, color=#202020) {
															N:Cowl(color=#202020) {
																W:Cowl(angle=-120, option=4, color=#202020) {
																	S:Cowl(color=#202020) { }
																}
															}
															W:Cowl(angle=-90, option=4, color=#202020) { }
														}
													}
													W:Cowl(angle=-85, color=#202020) {
														N:Cowl(angle=-10, color=#202020) {
															N:Cowl(color=#202020) {
																E:Cowl(angle=-120, option=3, color=#202020) {
																	S:Cowl(color=#202020) { }
																}
															}
															E:Cowl(angle=-90, option=3, color=#202020) { }
														}
													}
												}
												E:Cowl(angle=-85, color=#202020) { }
												W:Cowl(angle=-85, color=#202020) { }
											}
											E:Cowl(angle=-85, color=0, effect=#50FB) { }
											W:Cowl(angle=-85, color=0, effect=#50FB) { }
										}
										E:Cowl(angle=-85, option=4, color=0, effect=#50FB) { }
										W:Cowl(angle=-85, option=3, color=0, effect=#50FB) { }
									}
								}
							}
							N:Arm(angle=0, power=GUN3, option=50000, color=#404040) { }
						}
					}
				}
			}
		}
	}
}
Lua
{function _VEL(n)
	return _LEN3( _VX(n), _VY(n), _VZ(n))
end

function _LEN3(a,b,c)
	return math.sqrt(a * a + b * b + c * c)
end

function _BOX2D(x, y, sx, sy)
	for y = y, y + sy, 0.002 do
		_MOVE2D(x, y)
		_LINE2D(x - sx, y)
	end
end

MKPH = 0

dx = 0
dy = 0
dz = 0

px = 0
py = 0
pz = 0

loop_a = 32
loop_b = 32
llen = 15

vec_font={
[32]='!~ ',
[33]='&¶B√E∆©h€Le… ',
[34]='&∑›+◊ ',
[35]='!´Nµ@&ªaƒ+m€ ',
[36]='!§Kn«Õk–Da”◊d⁄N+º¬(‹ ',
[37]='!¥b—Df‘ÿd€B`ÿ‘£n€™lÕJh ∆j√Ln∆  ',
[38]='0£j≈g…b÷⁄d‹Gi⁄◊g”b–`Ã∆c√FhƒnÕ ',
[39]='(∂‹Hfÿ ',
[40]='-ºh⁄f◊e”Àf«hƒk¬ ',
[41]='$ºf⁄h◊i”Àh«fƒc¬ ',
[42]='!©n÷!n…)¶Ÿ ',
[43]='"∞M)∏» ',
[44]='(ße≈d«e…g«fƒc¡ ',
[45]='"∞M ',
[46]='%•f√h≈f«d≈H(ß√ ',
[47]='!§n€ ',
[48]='!µ…b≈e√Hk≈m…’kŸh€EbŸ`’ ',
[49]='$£K)‹c÷ ',
[50]='!∂bŸe€Jl⁄n◊”lŒg…`√N ',
[51]='!ªMd—IlœmÕ«l≈i√Dbƒ`∆ ',
[52]=',£€)º`Ã N ',
[53]='!¶aƒc√Ikƒm«Œl–i“C`–Ø€M ',
[54]='/πj€EbŸ`’«a≈d√Il≈m«Õlœi—D`œ ',
[55]='!∑€NŸi—g √ ',
[56]='!¶Œc—KnŒ∆k√C`∆%±a‘ÿd€Jmÿ‘j— ',
[57]='!•d√Hk≈m…ÿk⁄i€Db⁄`ÿ–bŒdÕJm– ',
[58]='&´gÕiÀg…eÀI¥Eg“i‘g÷e‘ ',
[59]=')≤e‘g÷i‘g“’§i«ÀgÕeÀg…IgÀ ',
[60]='0©`–n◊ ',
[61]='"≠M≥A ',
[62]='!©n–`◊ ',
[63]='!µÿc€Jmÿ”j–gÃ ¶iƒg¬eƒg∆√ ',
[64]=',£D`«ÿd‹Jnÿ«≤k’He—Àg»JnÃ ',
[65]='!£g‹n√$¨K ',
[66]='!£Jm≈n«Õmœi—A£‹!Il⁄mÿ’l”i— ',
[67]='0º÷∏j‹Db⁄`÷ b≈d√Jm∆n… ',
[68]='!ºHk⁄m◊»k≈h√@"‹ ',
[69]='!ºN£@"‹±L ',
[70]='!ºN"√∞K ',
[71]='0∑l⁄i‹Eb⁄`◊»b≈e√Jn∆ŒK ',
[72]='"£‹/√∞A ',
[73]='$£K)‹$K ',
[74]='!•c¬Gjƒl»‹ ',
[75]='"£‹/a–#±n√ ',
[76]='!£N"‹ ',
[77]='!£b‹g…l‹n√ ',
[78]='"£‹m√‹ ',
[79]='!™b≈d√Ik≈m ’k⁄i‹Db⁄`’  ',
[80]='!ºJl€nŸ”l—j–Aº√ ',
[81]='!©÷b⁄e‹Hk⁄m÷…k≈h√Eb≈`…%Gj«n¡ ',
[82]='!ºJl€nÿ‘l—j–A)m√N"‹ ',
[83]='!¶b√Jm∆Ãjœb“`’Ÿc‹Jm⁄ ',
[84]='!ºN)√ ',
[85]='"º»b≈d√Jl≈m»‹ ',
[86]='!ºg√n‹ ',
[87]='!ºc√g’k√n‹ ',
[88]='!£n‹!n√ ',
[89]='!ºg—√±n‹ ',
[90]='!ºM`√M ',
[91]='.ºG¬L ',
[92]='!ªnƒ*∞E ',
[92]='#ºG¬B ',
[94]='$∏g›kÿ ',
[95]='!°N ',
[96]='+∑h›Fh⁄ ',
[97]='0£l∆“j’C`”.∞cŒ`À∆c√Il∆ ',
[98]='"£‹±d’Jm—«j√Da« ',
[99]='/µ–±j’C`—«c√Jm« ',
[100]='/º√ßj√C`«—c’Jm— ',
[101]='!ÆM–k”h’Eb”`–»b≈e√Hk≈m« ',
[102]=')£◊h⁄k‹N.¥B ',
[103]='!¢c¿Jm√’≤j’Da“ d«Jm… ',
[104]='"£‹≤d’Jm“√ ',
[105]='#£K)’Dªfÿh€D ',
[106]='!£c¡Fi√k«‘H∫j◊l⁄H ',
[107]='"£‹≠m’£cŒ ',
[108]='#£K)‹D ',
[109]='!£’≤b’Eg“√≤i’Ln“√ ',
[110]='"£’±d’Jm—√ ',
[111]='"±«b≈d√Jl≈m«—l”j’Db”a— ',
[112]='"µ¿≤d’Ik‘m— k«i∆Da… ',
[113]='!± b«d∆Il ~’±i’Db‘`— ',
[114]='#£’Æd—f”i’L ',
[115]='/≤j’Da”œdÕJm ∆j√C`∆ ',
[116]='"µM£If∆Ÿ ',
[117]='"µ«d√Im»µ√ ',
[118]='!µg√n’ ',
[119]='!µd√g—j√n’ ',
[120]='"£m’"m√ ',
[121]='"~d¬m’!f∆ ',
[122]='!µM`√M ',
[123]='.ºIfŸ–cœfŒ≈i¬L ',
[124]=')°ﬁ ',
[125]='#ºEhŸ–kœhŒ≈e¬B ',
[126]='!πc‹Ei◊Kn⁄ '
}

fsize=1.2
hv=_WIDTH()/_HEIGHT()
hh=_HEIGHT()/_WIDTH()

tsize=1/_WIDTH()*hv*fsize
ysize=1/_HEIGHT()*hh*2*fsize
x=0
y=0
vx=0
vy=0

function stroke(str)
	local i
	
	if str==nil then return end
	
	for i=0,string.len(str) do
		line_draw(string.byte(str,i))
	end
end

function vecstr(stir)
	local i
	
	for i=0,string.len(stir) do
		ji = string.byte(stir,i)
		stroke(vec_font[ji])
		vx = vx + tsize*16
	end
end

function line_draw(a)
	
	if not a then
		t="nil"
		return 0
	end
	
	if a>32 and a<39 then
		x=a-33
		_MOVE2D2(x,y)
	end

	if a>39 and a<64 then
		x=a-34
		_MOVE2D2(x,y)
	end
	
	if a>63 and a<92 then
		x=a-64
		_LINE2D2(x,y)
	end

	if a>93 and a<96 then
		x=a-65
		_LINE2D2(x,y)
	end

	if a>95 and a<126 then
		x=(a-96)
	end
	
	if a==126 then
		y=0
		_MOVE2D2(x,y)
	end

	if a>160 and a<192 then
		y=a-160
		_MOVE2D2(x,y)
	end

	if a>191 and a<224 then
		y=a-192
		_LINE2D2(x,y)
	end

	if a==39 or a==92 or a==93 then
		x=0
		y=0
	end
end

function _MOVE2D2(q,w)
	_MOVE2D(q*tsize+vx,w*ysize+vy)
end
function _LINE2D2(q,w)
	_LINE2D(q*tsize+vx,w*ysize+vy)
end

ArmScope = {};
ArmScope.ColorSet = {}
ArmScope.ColorSet.lineColor = 65535;
ArmScope.ColorSet.guideColorOdd = 255 * 65536;
ArmScope.ColorSet.guideColorEven = 255 * (65536 + 256)

function ArmScope.draw(chipid,length,guide,count,size,span,disableLine)
	local function nilfunc() end
	
	if chipid == nil then chipid = 0 end
	if length == nil then length = 1000 end
	if guide == nil then guide = nilfunc end
	if count == nil then count = 5 end
	if size == nil then size = 1 end
	if span == nil then span = length / count end

	--ïœêîx,y,zÇ…É`ÉbÉvÇÃç¿ïWéÊìæÅB	
	local x = _X(chipid)
	local y = _Y(chipid)
	local z = _Z(chipid)
	
	--ïœêîzx,zy,zzÇ…É`ÉbÉvÇÃZé≤ÉxÉNÉgÉãÅAïœêîxx,xy,xzÇ…Xé≤ÅAïœêîyx,yy,yzÇ…Yé≤ÉxÉNÉgÉãÇäiî[ÅB
	local zx = _ZX(chipid)
	local zy = _ZY(chipid)
	local zz = _ZZ(chipid)

	local xx = _XX(chipid)
	local xy = _XY(chipid)
	local xz = _XZ(chipid)
	
	local yx = _YX(chipid)
	local yy = _YY(chipid)
	local yz = _YZ(chipid)

	local dir = _DIR(chipid)
	
	local zx0;
	local zy0;
	local zz0;
	
	if dir == 1 then -- W
		xx, zx = zx, xx;
		xy, zy = zy, xy;
		xz, zz = zz, xz;
	elseif dir == 2 then -- S
		zx = -zx;
		zy = -zy;
		zz = -zz;
	elseif dir == 3 then -- E
		xx, zx = zx, -xx;
		xy, zy = zy, -xy;
		xz, zz = zz, -xz;
	end

	zx0 = zx;
	zy0 = zy;
	zz0 = zz;

	xx = xx * size;
	xy = xy * size;
	xz = xz * size;
	yx = yx * size;
	yy = yy * size;
	yz = yz * size;
	zx = zx * size;
	zy = zy * size;
	zz = zz * size;
--	éÀé≤ÇÉâÉCÉìï`âÊ
	if disableLine == nil then
		_SETCOLOR(ArmScope.ColorSet.lineColor);
		_MOVE3D(x,y,z);
		_LINE3D(x + zx0*length,y + zy0*length,z + zz0*length);
	end


	local color = {ArmScope.ColorSet.guideColorOdd, ArmScope.ColorSet.guideColorEven};
	local colorindex = 1;

-- à¯êîÇ∆ÇµÇƒìnÇ∑ÇΩÇﬂÇÃÉNÉçÅ[ÉWÉÉ
	local function moveFunc(xxx, yyy, zzz)
		local xxxx = x + xx * xxx + yx * yyy + zx * zzz;
		local yyyy = y + xy * xxx + yy * yyy + zy * zzz;
		local zzzz = z + xz * xxx + yz * yyy + zz * zzz;
		_MOVE3D(xxxx, yyyy, zzzz);
	end
	
	local function lineFunc(xxx, yyy, zzz)
		local xxxx = x + xx * xxx + yx * yyy + zx * zzz;
		local yyyy = y + xy * xxx + yy * yyy + zy * zzz;
		local zzzz = z + xz * xxx + yz * yyy + zz * zzz;
		_LINE3D(xxxx, yyyy, zzzz);
	end
	
	for i = 1, count do

		--äÓèÄç¿ïWÇéÀê¸ï˚å¸Ç…ÉIÉtÉZÉbÉg
		x = x + zx0 * span
		y = y + zy0 * span
		z = z + zz0 * span
		
		--ÉKÉCÉhÇÃï`âÊ
		_SETCOLOR(color[colorindex]);
		guide(i, moveFunc, lineFunc);
		
		colorindex = 3 - colorindex;		
	end	
end

function ArmScope.Box(i, move, line)
	move( 1, 1,0)
	line(-1, 1,0)
	line(-1,-1,0)
	line( 1,-1,0)
	line( 1, 1,0)
end

function ArmScope.Cross(i, move, line)
	move(2, 0, 0)
	line(-2, 0, 0)
	move(0, 2, 0)
	line(0, -2, 0)
end

function draw_box(x,y,s)
	--ç∂ÇÃècê¸
	_MOVE2D(x,y)
	_LINE2D(x,y-s)

	--âEÇÃècê¸
	_MOVE2D(x+s,y)
	_LINE2D(x+s,y-s)

	--è„ÇÃâ°ê¸
	_MOVE2D(x,y)
	_LINE2D(x+s,y)

	--â∫ÇÃâ°ê¸
	_MOVE2D(x,y-s)
	_LINE2D(x+s,y-s)
end

draw_num7={
[0]=function(x,y,s)
	--ç∂ÇÃècê¸
	_MOVE2D(x,y)
	_LINE2D(x,y-s)

	--âEÇÃècê¸
	_MOVE2D(x+s/2,y)
	_LINE2D(x+s/2,y-s)

	--è„ÇÃâ°ê¸
	_MOVE2D(x,y)
	_LINE2D(x+s/2,y)

	--â∫ÇÃâ°ê¸
	_MOVE2D(x,y-s)
	_LINE2D(x+s/2,y-s)
end,
[1]=function(x,y,s)
	--âEÇÃècê¸
	_MOVE2D(x+s/2,y)
	_LINE2D(x+s/2,y-s)
end,
[2]=function(x,y,s)
	--ç∂ÇÃècê¸
	_MOVE2D(x,y-s/2)
	_LINE2D(x,y-s)

	--âEÇÃècê¸
	_MOVE2D(x+s/2,y)
	_LINE2D(x+s/2,y-s/2)

	--è„ÇÃâ°ê¸
	_MOVE2D(x,y)
	_LINE2D(x+s/2,y)

	--ê^ÇÒíÜÇÃâ°ê¸
	_MOVE2D(x,y-s/2)
	_LINE2D(x+s/2,y-s/2)

	--â∫ÇÃâ°ê¸
	_MOVE2D(x,y-s)
	_LINE2D(x+s/2,y-s)
end,
[3]=function(x,y,s)
	--âEÇÃècê¸
	_MOVE2D(x+s/2,y)
	_LINE2D(x+s/2,y-s)

	--è„ÇÃâ°ê¸
	_MOVE2D(x,y)
	_LINE2D(x+s/2,y)

	--ê^ÇÒíÜÇÃâ°ê¸
	_MOVE2D(x,y-s/2)
	_LINE2D(x+s/2,y-s/2)

	--â∫ÇÃâ°ê¸
	_MOVE2D(x,y-s)
	_LINE2D(x+s/2,y-s)
end,
[4]=function(x,y,s)
	--ç∂ÇÃècê¸
	_MOVE2D(x,y)
	_LINE2D(x,y-s/2)

	--âEÇÃècê¸
	_MOVE2D(x+s/2,y)
	_LINE2D(x+s/2,y-s)

	--ê^ÇÒíÜÇÃâ°ê¸
	_MOVE2D(x,y-s/2)
	_LINE2D(x+s/2,y-s/2)
end,
[5]=function(x,y,s)
	--ç∂ÇÃècê¸
	_MOVE2D(x,y)
	_LINE2D(x,y-s/2)

	--âEÇÃècê¸
	_MOVE2D(x+s/2,y-s/2)
	_LINE2D(x+s/2,y-s)

	--è„ÇÃâ°ê¸
	_MOVE2D(x,y)
	_LINE2D(x+s/2,y)

	--ê^ÇÒíÜÇÃâ°ê¸
	_MOVE2D(x,y-s/2)
	_LINE2D(x+s/2,y-s/2)

	--â∫ÇÃâ°ê¸
	_MOVE2D(x,y-s)
	_LINE2D(x+s/2,y-s)
end,
[6]=function(x,y,s)
	--ç∂ÇÃècê¸
	_MOVE2D(x,y)
	_LINE2D(x,y-s)

	--âEÇÃècê¸
	_MOVE2D(x+s/2,y-s/2)
	_LINE2D(x+s/2,y-s)

	--è„ÇÃâ°ê¸
	_MOVE2D(x,y)
	_LINE2D(x+s/2,y)

	--ê^ÇÒíÜÇÃâ°ê¸
	_MOVE2D(x,y-s/2)
	_LINE2D(x+s/2,y-s/2)

	--â∫ÇÃâ°ê¸
	_MOVE2D(x,y-s)
	_LINE2D(x+s/2,y-s)
end,
[7]=function(x,y,s)
	--âEÇÃècê¸
	_MOVE2D(x+s/2,y)
	_LINE2D(x+s/2,y-s)

	--è„ÇÃâ°ê¸
	_MOVE2D(x,y)
	_LINE2D(x+s/2,y)
end,
[8]=function(x,y,s)
	--ç∂ÇÃècê¸
	_MOVE2D(x,y)
	_LINE2D(x,y-s)

	--âEÇÃècê¸
	_MOVE2D(x+s/2,y)
	_LINE2D(x+s/2,y-s)

	--è„ÇÃâ°ê¸
	_MOVE2D(x,y)
	_LINE2D(x+s/2,y)

	--ê^ÇÒíÜÇÃâ°ê¸
	_MOVE2D(x,y-s/2)
	_LINE2D(x+s/2,y-s/2)

	--â∫ÇÃâ°ê¸
	_MOVE2D(x,y-s)
	_LINE2D(x+s/2,y-s)
end,
[9]=function(x,y,s)
	--ç∂ÇÃècê¸
	_MOVE2D(x,y)
	_LINE2D(x,y-s/2)

	--âEÇÃècê¸
	_MOVE2D(x+s/2,y)
	_LINE2D(x+s/2,y-s)

	--è„ÇÃâ°ê¸
	_MOVE2D(x,y)
	_LINE2D(x+s/2,y)

	--ê^ÇÒíÜÇÃâ°ê¸
	_MOVE2D(x,y-s/2)
	_LINE2D(x+s/2,y-s/2)

	--â∫ÇÃâ°ê¸
	_MOVE2D(x,y-s)
	_LINE2D(x+s/2,y-s)
end,
}


function tapi_getppos(p)
	local fx = 0
	local fy = 0
	local fz = 0

	local ex = {}
	local ey = {}
	local ez = {}
	
	local fx = 0
	local fy = 0
	local fz = 0
	
	for k = 1, loop_b, 1 do
		for i = 0, loop_a, 1 do
			ex[i] = _PLAYERX(p)
			ey[i] = _PLAYERY(p)
			ez[i] = _PLAYERZ(p)
		end
		
		table.sort(ex)
		table.sort(ey)
		table.sort(ez)
		
		fx = fx + ex[loop_a/2]
		fy = fy + ey[loop_a/2]
		fz = fz + ez[loop_a/2]
	end
	
	fx = fx / loop_b
	fy = fy / loop_b
	fz = fz / loop_b
	
	return fx, fy ,fz
end

function pointget_t(p,loop)
	local px=_PLAYERX(p)
	local py=_PLAYERY(p)
	local pz=_PLAYERZ(p)
	
	local sel={
		x_min=px,
		x_max=px,
	
		y_min=py,
		y_max=py,
	
		z_min=pz,
		z_max=pz
	}
	
	for i=1,loop do
	
		px=_PLAYERX(p)
		
		py=_PLAYERY(p)
		
		pz=_PLAYERZ(p)
		
		sel.x_min=math.min(px,sel.x_min)
		sel.x_max=math.max(px,sel.x_max)
	
		sel.y_min=math.min(py,sel.y_min)
		sel.y_max=math.max(py,sel.y_max)
		
		sel.z_min=math.min(pz,sel.z_min)
		sel.z_max=math.max(pz,sel.z_max)
	end
	
	px=(sel.x_min+sel.x_max)/2
	py=(sel.y_min+sel.y_max)/2
	pz=(sel.z_min+sel.z_max)/2
	
	return px,py,pz
end

NGUN = 1

function OnInit()
	_ZOOM(37.25)
end

function OnFrame()
	NKPH = math.floor(_VEL(0) * 3.6 + 0.5)
	
	if NKPH > MKPH then
		MKPH = NKPH
	end
	
	out(0, "è\å‹éÆì¡éÍêÌì¨ã@Å@ò@â‘")
	out(1, NKPH, "kph")
	out(2, _WEIGHT(), "kg")
	out(3, _FPS(), "fps")
	out(4, "max ", MKPH, "kph")
	
	PTCH = 25 * ((NKPH - 200) / 200) + 55
	
	n0 = math.mod(NKPH, 10)

	NKPH = math.floor(NKPH / 10)

	n1 = math.mod(NKPH, 10)

	NKPH = math.floor(NKPH / 10)

	n2 = math.mod(NKPH, 10)
	
	
	if NGUN == 4 and _KEY(5) == 1 and math.mod(_TICKS(),3) == 0 then
		GUN4 = 65536
		NGUN = 1
	elseif NGUN == 3 and _KEY(5) == 1 and math.mod(_TICKS(),3) == 0 then
		GUN3 = 65536
		NGUN = 4
	elseif NGUN == 2 and _KEY(5) == 1 and math.mod(_TICKS(),3) == 0 then
		GUN2 = 65536
		NGUN = 3
	elseif NGUN == 1 and _KEY(5) == 1 and math.mod(_TICKS(),3) == 0 then
		GUN1 = 65536
		NGUN = 2
	end

	if _KEY(11) == 1 then
		_SPLIT(BMB1)
	end
	
	if _H(BMB1) <= 5 and _Y(0) > 100 then
		B1K = 16777216
	end

	--[[for p = 1, _PLAYERS(), 1 do
		if _PLAYERID(p) ~= _PLAYERMYID() and _PLAYERARMS(p) ~= 0 then
			ex = 0
			ey = 0
			ez = 0
			ex, ey, ez = pointget_t(p,1024)

			px = (-_X(0) - ex) / 800
			py = (-_Z(0) - ey) / 800
			pr = -_EY(0)
			
			
			rx = px * math.cos(pr) - py * math.sin(pr)
			ry = py * math.sin(pr) - py * math.cos(pr)
			rx = rx * (_WIDTH() / _HEIGHT())

			_SETCOLOR(16711680)
			draw_box(rx - 0.025, ry + 0.025, 0.05)
			draw_num7[p](rx - 0.07, ry - 0.045, 0.05)
			vx=rx - 0.07
			vy=ry - 0.0675
			--vecstr(_PLAYERNAME(p))
			
			_MOVE3D(ex - llen, ey, ez)
			_LINE3D(ex + llen, ey, ez)

			_MOVE3D(ex, ey - llen, ez)
			_LINE3D(ex, ey + llen, ez)

			_MOVE3D(ex, ey, ez - llen)
			_LINE3D(ex, ey, ez + llen)
		end
	end]]--
	_SETCOLOR(16711680)
	ArmScope.draw(MGUN1R,300,ArmScope.Cross,5,1)
	ArmScope.draw(MGUN1L,300,ArmScope.Cross,5,1)
	--[[_SETCOLOR(65280)
	draw_box(-0.025, 0.025, 0.05)
	_MOVE2D(0,0)
	_LINE2D(0,300 / 800)]]--
end
}
